{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/vuex.png","path":"images/vuex.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"28f4aa60b87f58358c709e255d6132dd5a576647","modified":1591322614219},{"_id":"source/CNAME","hash":"78e69af1d9b1c038edd1259e5a746a0524b61502","modified":1538064073558},{"_id":"themes/next/.DS_Store","hash":"710121816cde2278701b84f03d0157829d433ec2","modified":1538055675398},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1537973434815},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1537973434815},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1537973434816},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1537973434817},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1537973434817},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1537973434817},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1537973434817},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1537973434817},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1537973434817},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1537973434818},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1537973434818},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1537973434818},{"_id":"themes/next/_config.yml","hash":"8f51be9ea83f1219a6a71a2a1eb4a7a4ecd4e84d","modified":1538056014581},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1537973434818},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1537973434819},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1537973434836},{"_id":"source/_posts/1-JS-zuoyongyu.md","hash":"2f2224d8de76900903436e5be538bd2a8f5e9ae7","modified":1554042225208},{"_id":"source/_posts/1-Node-introduction.md","hash":"5ca7f094c4a9cf579de8f215ec63a2c7e9cf3297","modified":1547381673765},{"_id":"source/_posts/1-ts.md","hash":"2514658ba9fcea1495deffd8cc50af6d50796e82","modified":1552092876204},{"_id":"source/_posts/2-JS-tishenghebibao.md","hash":"81f4597daaa82487d8abcbc53a5393855a50828b","modified":1554126504012},{"_id":"source/_posts/2-ts-primitive-data-type.md","hash":"393624505521bfadad2bc25fde9a87327924202a","modified":1552093844471},{"_id":"source/_posts/3-JS-this.md","hash":"219e36552026ccd7cc0601e440ec89f71c7d9d21","modified":1554203607854},{"_id":"source/_posts/3-ts-any.md","hash":"7599d27fd33bcc373b82daec43101b2a477d80ef","modified":1552094396750},{"_id":"source/_posts/4-ts-interfaces.md","hash":"0858dc6143cf92b61563f6f607174c034931541f","modified":1552096093038},{"_id":"source/_posts/Node-tool.md","hash":"c5c11bf3a19b5091a0fc586f17d78b2ad2cf04b2","modified":1560572133519},{"_id":"source/_posts/PM2.md","hash":"0a92861ecf3dfe67a3316fa58bd3d50f256e7a0c","modified":1560572455186},{"_id":"source/_posts/async.md","hash":"d63212197c66de54020b468d40f503e247e73db9","modified":1546005973803},{"_id":"source/_posts/axios.md","hash":"085920416d2e79b380b4e8f1235833b272ccc6bf","modified":1555511805709},{"_id":"source/_posts/blog-construct.md","hash":"592488f12e777599b072849a5732f82e28920706","modified":1538319211805},{"_id":"source/_posts/blog-start.md","hash":"913e91c5285ac8ba532d2e086d5c72e0d8ccee9f","modified":1538141814089},{"_id":"source/_posts/ele-upload.md","hash":"f0dcbfa43e7d2a68c952ee24b2c701f25efe074e","modified":1554819579298},{"_id":"source/_posts/express.md","hash":"1bcee7361a0ad955ca703c8f85fdc0c8c77f6689","modified":1560421290413},{"_id":"source/_posts/flatten.md","hash":"2d82289b8e7ad126ed49267bc2fecd0fa64d919a","modified":1571884854883},{"_id":"source/_posts/flutter-1-create-flutter.md","hash":"340bd7267300c6bbc44b2f43a0b213ed04e7b55e","modified":1590200246027},{"_id":"source/_posts/flutter-2-base.md","hash":"72ae168f5b484c114719f85f4ecba2864d5c17cd","modified":1590544563561},{"_id":"source/_posts/flutter-3.md","hash":"33e8b5dfb9234cd38bfd06e6760bafd6f54f4bdb","modified":1591088364328},{"_id":"source/_posts/flutter-4-list.md","hash":"6a9e1ed6abfdcb79d4fe5918da43a57e4aadb0be","modified":1591322374612},{"_id":"source/_posts/flutter-5-http.md","hash":"7b7a6cbcb5d597df7fff4a63f53d527b1059c3e7","modified":1591580675653},{"_id":"source/_posts/flutter-6-list.md","hash":"fb7d531b1d7089bde7fc039f5fb0381dd322ac18","modified":1597137656007},{"_id":"source/_posts/flutter-7-build.md","hash":"9858215e8a712262cea29d8bedb4214a7492c2d9","modified":1597137990638},{"_id":"source/_posts/h5-pay.md","hash":"fe8bc5bc0659b764bbea725bce6e3777f8fa9e12","modified":1539097310246},{"_id":"source/_posts/js-shangxiawen.md","hash":"623fad27d56effc7cf15f48f1a7d1ff5b79100c4","modified":1546529238058},{"_id":"source/_posts/js-token.md","hash":"8fb9586c5ae0e35d0411889b640f1ab6e2c4663b","modified":1567068808825},{"_id":"source/_posts/moment.md","hash":"df3561dbfc2886da4e7f7d18712a729287324676","modified":1539179044946},{"_id":"source/_posts/node-http.md","hash":"ed933d7fdcbf2dfccfb9a311ebe6d30227f54f00","modified":1560308138064},{"_id":"source/_posts/nodejs-aliyun.md","hash":"c140f389e6976e2b1cf3d60377748ad03fbb3fb9","modified":1587717553424},{"_id":"source/_posts/nodejs-weibo.md","hash":"a99c56208ae2648041cb4569c4f486bc55b820cb","modified":1587717442158},{"_id":"source/_posts/react-native-BackHandler.md","hash":"85d3bd3ccd5edec9de67bf7872f7d3e5f0b890a2","modified":1561342135415},{"_id":"source/_posts/react-native-FlatList.md","hash":"69ddabd291a0512e4617e57ed2b6bf1a117cfac6","modified":1561097669782},{"_id":"source/_posts/react-native-SafeAreaView.md","hash":"8196e090a8cbf7cd63a5ce63a265b20ba73dc185","modified":1561426833656},{"_id":"source/_posts/react-native-navigation.md","hash":"9edd791214abe57f8a2a4358e4475ddcdf93437f","modified":1560766088195},{"_id":"source/_posts/react-native-package.md","hash":"f4a21d16cacf20b0ba8a02bf2200092cd9ed0101","modified":1561511980408},{"_id":"source/_posts/react-router.md","hash":"caa4549500f30d56839d5d4ea65841551579ded0","modified":1551012706531},{"_id":"source/_posts/react-native-tools.md","hash":"f1faee1fd830771e0b1da6e9f9e2cd7c4b13cb22","modified":1562117009102},{"_id":"source/_posts/react.md","hash":"51bc809801a6544ecf226e8672383188a04731bf","modified":1554042453175},{"_id":"source/_posts/suanfa-string.md","hash":"9138ae579dcffce9488b19e4f72baf5a8adf6f79","modified":1562859614954},{"_id":"source/_posts/vue-router-history.md","hash":"972f1a333c84b1cc0cb2b56414674da945d29b31","modified":1539699840013},{"_id":"source/_posts/sunfa-array.md","hash":"232d226c1b0f086210046e578c0ec7322988f312","modified":1562897420564},{"_id":"source/_posts/vue-vuex.md","hash":"78adc146f1e9f7744d11e97efe9cccad5eb7519f","modified":1539097349600},{"_id":"source/_posts/weChat-wx-request.md","hash":"aa84efe57a43931b20243971daa5d915f8f66cbc","modified":1544020636678},{"_id":"source/_posts/weChat-component.md","hash":"31083e5295350878da6ece83024b5d6bd3fbf001","modified":1541343622487},{"_id":"source/categories/index.md","hash":"4d67701b670f4fe8c079177e8f8ae5a0e4022f45","modified":1537975721177},{"_id":"source/tags/index.md","hash":"033f665b059cc8d96920a8c010c44aeac9f8f9ee","modified":1537976577594},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1537972960471},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1537973434809},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1537973434807},{"_id":"themes/next/.git/index","hash":"f26e0b4792a5c348e7b2f074a8463593c544b66b","modified":1537973434906},{"_id":"themes/next/.git/packed-refs","hash":"69237944e31c16fe545d1f47b0b1e5b1d99660da","modified":1537973434806},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1537973434816},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1537973434816},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1537973434816},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1537973434817},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1537973434819},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1537973434819},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1537973434819},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1537973434820},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1537973434820},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1537973434820},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1537973434820},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1537973434820},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1537973434820},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1537973434821},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1537973434821},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1537973434821},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1537973434821},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1537974518684},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1537973434821},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1537973434822},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1537973434822},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1537973434834},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1537973434835},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1537973434835},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1537973434835},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1537973434835},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1537973434835},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1537973434836},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1537973434836},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1537973434836},{"_id":"themes/next/source/.DS_Store","hash":"b8e5951c497e1060bfccf7be197be3bad8cb1885","modified":1538055675401},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1537973434905},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1537973434905},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1537973434905},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537973434858},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1537972960473},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1537972960472},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1537972960474},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1537972960473},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1537972960474},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1537972960473},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1537972960474},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1537972960473},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1537972960473},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1537972960474},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1537972960475},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1537972960471},{"_id":"themes/next/.git/logs/HEAD","hash":"0686ba9cec3724b947e1cf00d68d9715e7b59616","modified":1537973434808},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1537973434822},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1537973434822},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1537973434822},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1537973434822},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1537973434823},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1537973434823},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1537973434823},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1537973434823},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1537973434826},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1537973434826},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1537973434827},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1537973434823},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1537973434824},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1537973434824},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1537973434824},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1537973434825},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1537973434825},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1537973434825},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1537973434832},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1537973434833},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1537973434833},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1537973434833},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1537973434833},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1537973434833},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1537973434833},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1537973434837},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1537973434837},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1537973434837},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1537973434837},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1537973434837},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1537973434837},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1537973434837},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1537973434838},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1537973434838},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1537973434858},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1537973434858},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1537973434859},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1537973434859},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1537973434859},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1537973434859},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1537973434859},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1537973434860},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1537973434860},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1537973434860},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1537973434860},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1537973434861},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1537973434861},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1537973434861},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1537973434861},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1537973434861},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1537973434861},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1537973434862},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1537973434862},{"_id":"themes/next/source/images/vuex.png","hash":"4fb73c3495849d5ac2ac80546a8431d563a7da45","modified":1538923212775},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537973434827},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537973434827},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537973434852},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537973434852},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537973434853},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537973434858},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537973434858},{"_id":"themes/next/source/images/avatar.png","hash":"49c05a1efe4a4508b560a58574706f15a8a9f5d5","modified":1538055591270},{"_id":"themes/next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1537973434808},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1537973434826},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1537973434827},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1537973434827},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1537973434824},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1537973434824},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1537973434825},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1537973434825},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1537973434825},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1537973434825},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1537973434826},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1537973434826},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1537973434826},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1537973434828},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1537973434828},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1537973434828},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1537973434828},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1537973434829},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1537973434829},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1537973434829},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1537973434829},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1537973434829},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1537973434830},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1537973434830},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1537973434830},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1537973434830},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1537973434831},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1537973434831},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1537973434831},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1537973434831},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1537973434831},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1537973434832},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1537973434832},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1537973434832},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1537973434832},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1537973434834},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1537973434834},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1537973434834},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1537973434834},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1537973434852},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1537973434852},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1537973434852},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1537973434853},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1537973434857},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1537973434858},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1537973434858},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1537973434858},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1537973434862},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1537973434862},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1537973434863},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1537973434863},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1537973434863},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1537973434863},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1537973434864},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1537973434864},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1537973434864},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1537973434864},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1537973434865},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1537973434869},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1537973434872},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1537973434872},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1537973434872},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1537973434873},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1537973434876},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1537973434876},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1537973434876},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1537973434876},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1537973434877},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1537973434878},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1537973434878},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1537973434878},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1537973434878},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1537973434889},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1537973434890},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1537973434890},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1537973434891},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1537973434891},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1537973434891},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1537973434891},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1537973434892},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1537973434892},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1537973434892},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1537973434893},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1537973434893},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1537973434893},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1537973434893},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1537973434893},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1537973434893},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1537973434894},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1537973434893},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1537973434894},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1537973434894},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1537973434894},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1537973434895},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1537973434895},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1537973434895},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1537973434896},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1537973434896},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1537973434896},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1537973434901},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1537973434901},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1537973434904},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1537973434904},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1537973434904},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1537973434890},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"0686ba9cec3724b947e1cf00d68d9715e7b59616","modified":1537973434808},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1537973434807},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1537973434833},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1537973434834},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1537973434850},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1537973434850},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1537973434850},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1537973434851},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1537973434851},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1537973434851},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1537973434851},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1537973434838},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1537973434838},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1537973434838},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1537973434838},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1537973434839},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1537973434841},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1537973434845},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1537973434853},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1537973434853},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1537973434854},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1537973434854},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1537973434854},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1537973434854},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1537973434854},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1537973434854},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1537973434855},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1537973434855},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1537973434855},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1537973434856},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1537973434856},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1537973434856},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1537973434856},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1537973434856},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1537973434857},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1537973434857},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1537973434857},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1537973434864},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1537973434868},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1537973434869},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1537973434873},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1537973434873},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1537973434873},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1537973434873},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1537973434874},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1537973434874},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1537973434875},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1537973434875},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1537973434876},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1537973434877},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1537973434877},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1537973434879},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1537973434879},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1537973434879},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1537973434900},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1537973434901},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1537973434867},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1537973434868},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1537973434889},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1537973434889},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1537973434903},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"0686ba9cec3724b947e1cf00d68d9715e7b59616","modified":1537973434807},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1537973434839},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1537973434839},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1537973434839},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1537973434839},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1537973434839},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1537973434840},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1537973434840},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1537973434840},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1537973434840},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1537973434840},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1537973434840},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1537973434841},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1537973434841},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1537973434841},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1537973434841},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1537973434841},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1537973434841},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1537973434842},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1537973434842},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1537973434842},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1537973434842},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1537973434842},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1537973434842},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1537973434843},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1537973434843},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1537973434843},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1537973434843},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"7714f0af4432e04ad7cafc0a8c2dcdb72cbaa8ff","modified":1538056283133},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1537973434844},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1537973434844},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1537973434844},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1537973434842},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1537973434844},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1537973434844},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1537973434845},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1537973434845},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1537973434845},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1537973434845},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1537973434845},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1537973434846},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1537973434846},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1537973434846},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1537973434846},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1537973434847},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1537973434847},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1537973434847},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1537973434847},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1537973434848},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1537973434848},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1537973434848},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1537973434848},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1537973434849},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1537973434849},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1537973434849},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1537973434849},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1537973434849},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1537973434849},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1537973434850},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1537973434855},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1537973434855},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1537973434856},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1537973434866},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1537973434866},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1537973434866},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1537973434867},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1537973434867},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1537973434874},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1537973434874},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1537973434874},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1537973434874},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1537973434875},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1537973434875},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1537973434881},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1537973434883},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1537973434888},{"_id":"themes/next/.git/objects/pack/pack-09df78575dd506cafcb2c517908ed591431fdc71.idx","hash":"be430c584ec6e1499b87f9e416e72d0fbc2e3a26","modified":1537973434795},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1537973434871},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1537973434899},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1537973434886},{"_id":"themes/next/.git/objects/pack/pack-09df78575dd506cafcb2c517908ed591431fdc71.pack","hash":"eee901eb2f4a4df31eaa41634f4e9de643c3fb4e","modified":1537973434791}],"Category":[{"name":"你不知道的JavaScript","_id":"ckdpqq41b0002he6j6g6d8sy5"},{"name":"Node.js","_id":"ckdpqq41g0007he6jnm5p8f3d"},{"name":"TypeScript","_id":"ckdpqq41l000ehe6juvv8fryg"},{"name":"JavaScript","_id":"ckdpqq41x0012he6jacd89u9k"},{"name":"vue","_id":"ckdpqq421001bhe6j23yts0w7"},{"name":"随笔","_id":"ckdpqq426001lhe6j6pibmf1u"},{"name":"Flutter","_id":"ckdpqq42c001zhe6jdut2960z"},{"name":"H5","_id":"ckdpqq42s0031he6jfipcvv8u"},{"name":"React Native","_id":"ckdpqq42v003ahe6jalex3gbz"},{"name":"React","_id":"ckdpqq4380047he6jxiiqh4wr"},{"name":"js数据结构与算法","_id":"ckdpqq43b004ehe6jwbyeje3u"},{"name":"小程序","_id":"ckdpqq43e004ohe6jgejkgtfs"}],"Data":[],"Page":[{"title":"categories","date":"2018-09-26T15:28:20.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-09-26 23:28:20\ntype: \"categories\"\n---\n","updated":"2018-09-26T15:28:41.177Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckdpqq46y0059he6jc2n6ukad","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"0201-11-15T11:04:22.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 201-11-15 19:10:05\ntype: \"tags\"\n---\n","updated":"2018-09-26T15:42:57.594Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckdpqq46z005ahe6jkau69b6c","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"作用域","date":"2019-03-30T15:37:33.000Z","_content":"### 作用域\n<!-- more -->\n\n### 作用域是什么\n> 作用域就是一套规则，用于确定在何处以及如何查找变量（标识符）。\nLHS查询：查找的目的是对变量进行赋值。\nRHS查询：目的是获取变量的值。\n嵌套作用域：引擎从当前执行作用域开始查找变量，如果没找到，就向上一级继续查找。\n当抵达最外层的全局作用域时，无论有没有找到，查找过程都会停止\n#### JS编译原理\n例如：var a = 2;\n> 任何JavaScript代码片段在执行前都要进行编译（通常就在执行前）。因此，JavaScript编译器。首先会对var a = 2;这段程序进行编译,然后做好执行它的准备，并且马上就会执行它。\n\n\n一. JS编译\n· 引擎\n从头到尾负责整个JavaScript程序的编译及执行过程。\n· 编译器\n引擎的好朋友之一，负责语法分析及代码生成等脏活累活\n· 作用域\n引擎的另一位好朋友，负责收集并维护所有声明的标识符（变量）组成的\n一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。\n\n二.接下来 var a = 2的编译过程\n1.编译器询问作用域是否已经有有一个该名称的变量存在作用域集合中。如果是，编译器就会忽略该声明，继续进行编译。否则在该作用域的集合重声明一个新的变量，命名为a。\n\n2.编译器为引擎生成运行所需的代码，用来处理a = 2的操作。首先询问作用域，当前有没有a的变量，有，引擎使用a的变量。没有则引擎继续查找该变量。如果最终找到a变量，把2赋值给a。没找到抛出异常!\n\n### 词法作用域\n> 词法作用域就是定义在词法阶段的作用域。换句话说，词法作用域是由你在写代码时将变量和块作用域写在哪里来决定的，因此当词法分析器处理代码时会保持作用域不变（大部分情况时这样的）。\n\n```\nfunction foo(a) {\n    var b = a * 2;\n\n    function bar(c) {\n        console.log(a,b,c)\n    }\n    bar(b*3)\n}\nfoo(2) //2,4,12\n```\n![image](/images/cifazuoyongyu.png)\n1.整个全局作用句,有一个标识符：foo。\n2.foo所创建的作用域，有三个标识符：a,bar和b。\n3.bar所创建的作用域，有一个标识符：c。\n\n无论函数在哪里被调用，它的词法作用域都只由函数被声明时所处都位置决定。词法作用域查找只会查找一级标识符，比如a,b,c。如果代码中引用来foo,bar,baz，词法作用域只会试图查找foo标识符,找到这个变量后，对象属性访问规则分别接管bar和baz属性都访问。\n\n### 函数作用域\n#### 函数作用域\n> 函数作用域：属于这个函数的全部变量都可以在整个函数都范围内使用及复用（事实上在嵌套都作用域也可以使用）。这种数据方案非常有用，能充分利用JavaScript变量可以根据需要改变值类型都“动态”特效。\n\n例如：\n```\nfunction doSomething(a) {\n    b = a + doSomethingElse(a*2)\n    console.log(b*3)\n}\nfunction doSomethingElse(a) {\n    return a - 1;\n}\nvar b;\ndoSomething(2) //15\n```\nb和doSomethingElse应该是doSomething内部具体实现的“私有”内容。给予外部作用域对b和doSomethingElse对“访问权限”。导致他们可能被有意无意以非预期对方式使用。\n\n```\nfunction doSomething(a) {\n    function doSomethingElse(a) {\n        return a - 1;\n    }\n    var b ;\n    b = a + doSomethingElse(a*2)\n    console.log(b*3)\n}\ndoSomething(2) //15\n```\nb和doSomethingElse都无法从外部被访问，只能被doSomething控制，设计上将具体内容私有化。\n#### 函数声明和函数表达式\n> 函数声明：如果function是声明中都第一个词，就是一个函数声明，否则是一个函数表达式。\n> 函数表达式：以(function...而不仅是以function...开始。)\n1.例如\n```\nvar a = 2;\nfunction foo() {\n    var a = 3;\n    console.log(a); //3\n}\nfoo()\nconsole.log(a); //2\n```\n具名函数foo()本身污染所在都作用域，并且必须显式通过foo()调用才能运行其中代码。如果函数不需要函数名自动运行？\n\n```\nvar a = 2;\n(functgion foo() {\n    var a = 3;\n    console.log(a); //3\n})();\nconsole.log(a); //2\n```\n此foo函数被绑定在函数表达式自身都函数中而不是所在作用域中。意味foo只能在(function foo(){...})...被访问，外部作用域不行。foo被因此在自身意味不会非不要地污染外部作用域\n\n2.匿名和具名\n```\nsetTimeout(function() {\n\n},1000)\n```\n匿名函数表达式：没有名称和标识符。函数表达式可以是匿名的，而函数声明则不可以省略函数名。\n\n\n\n\n\n\n","source":"_posts/1-JS-zuoyongyu.md","raw":"---\ntitle: 作用域\ndate: 2019-03-30 23:37:33\ntags: ['你不知道的JavaScript']\ncategories: 你不知道的JavaScript\n---\n### 作用域\n<!-- more -->\n\n### 作用域是什么\n> 作用域就是一套规则，用于确定在何处以及如何查找变量（标识符）。\nLHS查询：查找的目的是对变量进行赋值。\nRHS查询：目的是获取变量的值。\n嵌套作用域：引擎从当前执行作用域开始查找变量，如果没找到，就向上一级继续查找。\n当抵达最外层的全局作用域时，无论有没有找到，查找过程都会停止\n#### JS编译原理\n例如：var a = 2;\n> 任何JavaScript代码片段在执行前都要进行编译（通常就在执行前）。因此，JavaScript编译器。首先会对var a = 2;这段程序进行编译,然后做好执行它的准备，并且马上就会执行它。\n\n\n一. JS编译\n· 引擎\n从头到尾负责整个JavaScript程序的编译及执行过程。\n· 编译器\n引擎的好朋友之一，负责语法分析及代码生成等脏活累活\n· 作用域\n引擎的另一位好朋友，负责收集并维护所有声明的标识符（变量）组成的\n一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。\n\n二.接下来 var a = 2的编译过程\n1.编译器询问作用域是否已经有有一个该名称的变量存在作用域集合中。如果是，编译器就会忽略该声明，继续进行编译。否则在该作用域的集合重声明一个新的变量，命名为a。\n\n2.编译器为引擎生成运行所需的代码，用来处理a = 2的操作。首先询问作用域，当前有没有a的变量，有，引擎使用a的变量。没有则引擎继续查找该变量。如果最终找到a变量，把2赋值给a。没找到抛出异常!\n\n### 词法作用域\n> 词法作用域就是定义在词法阶段的作用域。换句话说，词法作用域是由你在写代码时将变量和块作用域写在哪里来决定的，因此当词法分析器处理代码时会保持作用域不变（大部分情况时这样的）。\n\n```\nfunction foo(a) {\n    var b = a * 2;\n\n    function bar(c) {\n        console.log(a,b,c)\n    }\n    bar(b*3)\n}\nfoo(2) //2,4,12\n```\n![image](/images/cifazuoyongyu.png)\n1.整个全局作用句,有一个标识符：foo。\n2.foo所创建的作用域，有三个标识符：a,bar和b。\n3.bar所创建的作用域，有一个标识符：c。\n\n无论函数在哪里被调用，它的词法作用域都只由函数被声明时所处都位置决定。词法作用域查找只会查找一级标识符，比如a,b,c。如果代码中引用来foo,bar,baz，词法作用域只会试图查找foo标识符,找到这个变量后，对象属性访问规则分别接管bar和baz属性都访问。\n\n### 函数作用域\n#### 函数作用域\n> 函数作用域：属于这个函数的全部变量都可以在整个函数都范围内使用及复用（事实上在嵌套都作用域也可以使用）。这种数据方案非常有用，能充分利用JavaScript变量可以根据需要改变值类型都“动态”特效。\n\n例如：\n```\nfunction doSomething(a) {\n    b = a + doSomethingElse(a*2)\n    console.log(b*3)\n}\nfunction doSomethingElse(a) {\n    return a - 1;\n}\nvar b;\ndoSomething(2) //15\n```\nb和doSomethingElse应该是doSomething内部具体实现的“私有”内容。给予外部作用域对b和doSomethingElse对“访问权限”。导致他们可能被有意无意以非预期对方式使用。\n\n```\nfunction doSomething(a) {\n    function doSomethingElse(a) {\n        return a - 1;\n    }\n    var b ;\n    b = a + doSomethingElse(a*2)\n    console.log(b*3)\n}\ndoSomething(2) //15\n```\nb和doSomethingElse都无法从外部被访问，只能被doSomething控制，设计上将具体内容私有化。\n#### 函数声明和函数表达式\n> 函数声明：如果function是声明中都第一个词，就是一个函数声明，否则是一个函数表达式。\n> 函数表达式：以(function...而不仅是以function...开始。)\n1.例如\n```\nvar a = 2;\nfunction foo() {\n    var a = 3;\n    console.log(a); //3\n}\nfoo()\nconsole.log(a); //2\n```\n具名函数foo()本身污染所在都作用域，并且必须显式通过foo()调用才能运行其中代码。如果函数不需要函数名自动运行？\n\n```\nvar a = 2;\n(functgion foo() {\n    var a = 3;\n    console.log(a); //3\n})();\nconsole.log(a); //2\n```\n此foo函数被绑定在函数表达式自身都函数中而不是所在作用域中。意味foo只能在(function foo(){...})...被访问，外部作用域不行。foo被因此在自身意味不会非不要地污染外部作用域\n\n2.匿名和具名\n```\nsetTimeout(function() {\n\n},1000)\n```\n匿名函数表达式：没有名称和标识符。函数表达式可以是匿名的，而函数声明则不可以省略函数名。\n\n\n\n\n\n\n","slug":"1-JS-zuoyongyu","published":1,"updated":"2019-03-31T14:23:45.208Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq4160000he6jxn1uftjq","content":"<h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><a id=\"more\"></a>\n<h3 id=\"作用域是什么\"><a href=\"#作用域是什么\" class=\"headerlink\" title=\"作用域是什么\"></a>作用域是什么</h3><blockquote>\n<p>作用域就是一套规则，用于确定在何处以及如何查找变量（标识符）。<br>LHS查询：查找的目的是对变量进行赋值。<br>RHS查询：目的是获取变量的值。<br>嵌套作用域：引擎从当前执行作用域开始查找变量，如果没找到，就向上一级继续查找。<br>当抵达最外层的全局作用域时，无论有没有找到，查找过程都会停止</p>\n</blockquote>\n<h4 id=\"JS编译原理\"><a href=\"#JS编译原理\" class=\"headerlink\" title=\"JS编译原理\"></a>JS编译原理</h4><p>例如：var a = 2;</p>\n<blockquote>\n<p>任何JavaScript代码片段在执行前都要进行编译（通常就在执行前）。因此，JavaScript编译器。首先会对var a = 2;这段程序进行编译,然后做好执行它的准备，并且马上就会执行它。</p>\n</blockquote>\n<p>一. JS编译<br>· 引擎<br>从头到尾负责整个JavaScript程序的编译及执行过程。<br>· 编译器<br>引擎的好朋友之一，负责语法分析及代码生成等脏活累活<br>· 作用域<br>引擎的另一位好朋友，负责收集并维护所有声明的标识符（变量）组成的<br>一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。</p>\n<p>二.接下来 var a = 2的编译过程<br>1.编译器询问作用域是否已经有有一个该名称的变量存在作用域集合中。如果是，编译器就会忽略该声明，继续进行编译。否则在该作用域的集合重声明一个新的变量，命名为a。</p>\n<p>2.编译器为引擎生成运行所需的代码，用来处理a = 2的操作。首先询问作用域，当前有没有a的变量，有，引擎使用a的变量。没有则引擎继续查找该变量。如果最终找到a变量，把2赋值给a。没找到抛出异常!</p>\n<h3 id=\"词法作用域\"><a href=\"#词法作用域\" class=\"headerlink\" title=\"词法作用域\"></a>词法作用域</h3><blockquote>\n<p>词法作用域就是定义在词法阶段的作用域。换句话说，词法作用域是由你在写代码时将变量和块作用域写在哪里来决定的，因此当词法分析器处理代码时会保持作用域不变（大部分情况时这样的）。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(a) &#123;</span><br><span class=\"line\">    var b = a * 2;</span><br><span class=\"line\"></span><br><span class=\"line\">    function bar(c) &#123;</span><br><span class=\"line\">        console.log(a,b,c)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bar(b*3)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(2) //2,4,12</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/cifazuoyongyu.png\" alt=\"image\"><br>1.整个全局作用句,有一个标识符：foo。<br>2.foo所创建的作用域，有三个标识符：a,bar和b。<br>3.bar所创建的作用域，有一个标识符：c。</p>\n<p>无论函数在哪里被调用，它的词法作用域都只由函数被声明时所处都位置决定。词法作用域查找只会查找一级标识符，比如a,b,c。如果代码中引用来foo,bar,baz，词法作用域只会试图查找foo标识符,找到这个变量后，对象属性访问规则分别接管bar和baz属性都访问。</p>\n<h3 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h3><h4 id=\"函数作用域-1\"><a href=\"#函数作用域-1\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h4><blockquote>\n<p>函数作用域：属于这个函数的全部变量都可以在整个函数都范围内使用及复用（事实上在嵌套都作用域也可以使用）。这种数据方案非常有用，能充分利用JavaScript变量可以根据需要改变值类型都“动态”特效。</p>\n</blockquote>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function doSomething(a) &#123;</span><br><span class=\"line\">    b = a + doSomethingElse(a*2)</span><br><span class=\"line\">    console.log(b*3)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function doSomethingElse(a) &#123;</span><br><span class=\"line\">    return a - 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var b;</span><br><span class=\"line\">doSomething(2) //15</span><br></pre></td></tr></table></figure></p>\n<p>b和doSomethingElse应该是doSomething内部具体实现的“私有”内容。给予外部作用域对b和doSomethingElse对“访问权限”。导致他们可能被有意无意以非预期对方式使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function doSomething(a) &#123;</span><br><span class=\"line\">    function doSomethingElse(a) &#123;</span><br><span class=\"line\">        return a - 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var b ;</span><br><span class=\"line\">    b = a + doSomethingElse(a*2)</span><br><span class=\"line\">    console.log(b*3)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">doSomething(2) //15</span><br></pre></td></tr></table></figure>\n<p>b和doSomethingElse都无法从外部被访问，只能被doSomething控制，设计上将具体内容私有化。</p>\n<h4 id=\"函数声明和函数表达式\"><a href=\"#函数声明和函数表达式\" class=\"headerlink\" title=\"函数声明和函数表达式\"></a>函数声明和函数表达式</h4><blockquote>\n<p>函数声明：如果function是声明中都第一个词，就是一个函数声明，否则是一个函数表达式。<br>函数表达式：以(function…而不仅是以function…开始。)<br>1.例如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 2;</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    var a = 3;</span><br><span class=\"line\">    console.log(a); //3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br><span class=\"line\">console.log(a); //2</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>具名函数foo()本身污染所在都作用域，并且必须显式通过foo()调用才能运行其中代码。如果函数不需要函数名自动运行？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 2;</span><br><span class=\"line\">(functgion foo() &#123;</span><br><span class=\"line\">    var a = 3;</span><br><span class=\"line\">    console.log(a); //3</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">console.log(a); //2</span><br></pre></td></tr></table></figure>\n<p>此foo函数被绑定在函数表达式自身都函数中而不是所在作用域中。意味foo只能在(function foo(){…})…被访问，外部作用域不行。foo被因此在自身意味不会非不要地污染外部作用域</p>\n<p>2.匿名和具名<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,1000)</span><br></pre></td></tr></table></figure></p>\n<p>匿名函数表达式：没有名称和标识符。函数表达式可以是匿名的，而函数声明则不可以省略函数名。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3>","more":"<h3 id=\"作用域是什么\"><a href=\"#作用域是什么\" class=\"headerlink\" title=\"作用域是什么\"></a>作用域是什么</h3><blockquote>\n<p>作用域就是一套规则，用于确定在何处以及如何查找变量（标识符）。<br>LHS查询：查找的目的是对变量进行赋值。<br>RHS查询：目的是获取变量的值。<br>嵌套作用域：引擎从当前执行作用域开始查找变量，如果没找到，就向上一级继续查找。<br>当抵达最外层的全局作用域时，无论有没有找到，查找过程都会停止</p>\n</blockquote>\n<h4 id=\"JS编译原理\"><a href=\"#JS编译原理\" class=\"headerlink\" title=\"JS编译原理\"></a>JS编译原理</h4><p>例如：var a = 2;</p>\n<blockquote>\n<p>任何JavaScript代码片段在执行前都要进行编译（通常就在执行前）。因此，JavaScript编译器。首先会对var a = 2;这段程序进行编译,然后做好执行它的准备，并且马上就会执行它。</p>\n</blockquote>\n<p>一. JS编译<br>· 引擎<br>从头到尾负责整个JavaScript程序的编译及执行过程。<br>· 编译器<br>引擎的好朋友之一，负责语法分析及代码生成等脏活累活<br>· 作用域<br>引擎的另一位好朋友，负责收集并维护所有声明的标识符（变量）组成的<br>一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限。</p>\n<p>二.接下来 var a = 2的编译过程<br>1.编译器询问作用域是否已经有有一个该名称的变量存在作用域集合中。如果是，编译器就会忽略该声明，继续进行编译。否则在该作用域的集合重声明一个新的变量，命名为a。</p>\n<p>2.编译器为引擎生成运行所需的代码，用来处理a = 2的操作。首先询问作用域，当前有没有a的变量，有，引擎使用a的变量。没有则引擎继续查找该变量。如果最终找到a变量，把2赋值给a。没找到抛出异常!</p>\n<h3 id=\"词法作用域\"><a href=\"#词法作用域\" class=\"headerlink\" title=\"词法作用域\"></a>词法作用域</h3><blockquote>\n<p>词法作用域就是定义在词法阶段的作用域。换句话说，词法作用域是由你在写代码时将变量和块作用域写在哪里来决定的，因此当词法分析器处理代码时会保持作用域不变（大部分情况时这样的）。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(a) &#123;</span><br><span class=\"line\">    var b = a * 2;</span><br><span class=\"line\"></span><br><span class=\"line\">    function bar(c) &#123;</span><br><span class=\"line\">        console.log(a,b,c)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bar(b*3)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo(2) //2,4,12</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/cifazuoyongyu.png\" alt=\"image\"><br>1.整个全局作用句,有一个标识符：foo。<br>2.foo所创建的作用域，有三个标识符：a,bar和b。<br>3.bar所创建的作用域，有一个标识符：c。</p>\n<p>无论函数在哪里被调用，它的词法作用域都只由函数被声明时所处都位置决定。词法作用域查找只会查找一级标识符，比如a,b,c。如果代码中引用来foo,bar,baz，词法作用域只会试图查找foo标识符,找到这个变量后，对象属性访问规则分别接管bar和baz属性都访问。</p>\n<h3 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h3><h4 id=\"函数作用域-1\"><a href=\"#函数作用域-1\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h4><blockquote>\n<p>函数作用域：属于这个函数的全部变量都可以在整个函数都范围内使用及复用（事实上在嵌套都作用域也可以使用）。这种数据方案非常有用，能充分利用JavaScript变量可以根据需要改变值类型都“动态”特效。</p>\n</blockquote>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function doSomething(a) &#123;</span><br><span class=\"line\">    b = a + doSomethingElse(a*2)</span><br><span class=\"line\">    console.log(b*3)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function doSomethingElse(a) &#123;</span><br><span class=\"line\">    return a - 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var b;</span><br><span class=\"line\">doSomething(2) //15</span><br></pre></td></tr></table></figure></p>\n<p>b和doSomethingElse应该是doSomething内部具体实现的“私有”内容。给予外部作用域对b和doSomethingElse对“访问权限”。导致他们可能被有意无意以非预期对方式使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function doSomething(a) &#123;</span><br><span class=\"line\">    function doSomethingElse(a) &#123;</span><br><span class=\"line\">        return a - 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    var b ;</span><br><span class=\"line\">    b = a + doSomethingElse(a*2)</span><br><span class=\"line\">    console.log(b*3)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">doSomething(2) //15</span><br></pre></td></tr></table></figure>\n<p>b和doSomethingElse都无法从外部被访问，只能被doSomething控制，设计上将具体内容私有化。</p>\n<h4 id=\"函数声明和函数表达式\"><a href=\"#函数声明和函数表达式\" class=\"headerlink\" title=\"函数声明和函数表达式\"></a>函数声明和函数表达式</h4><blockquote>\n<p>函数声明：如果function是声明中都第一个词，就是一个函数声明，否则是一个函数表达式。<br>函数表达式：以(function…而不仅是以function…开始。)<br>1.例如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 2;</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    var a = 3;</span><br><span class=\"line\">    console.log(a); //3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br><span class=\"line\">console.log(a); //2</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>具名函数foo()本身污染所在都作用域，并且必须显式通过foo()调用才能运行其中代码。如果函数不需要函数名自动运行？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 2;</span><br><span class=\"line\">(functgion foo() &#123;</span><br><span class=\"line\">    var a = 3;</span><br><span class=\"line\">    console.log(a); //3</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">console.log(a); //2</span><br></pre></td></tr></table></figure>\n<p>此foo函数被绑定在函数表达式自身都函数中而不是所在作用域中。意味foo只能在(function foo(){…})…被访问，外部作用域不行。foo被因此在自身意味不会非不要地污染外部作用域</p>\n<p>2.匿名和具名<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(function() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,1000)</span><br></pre></td></tr></table></figure></p>\n<p>匿名函数表达式：没有名称和标识符。函数表达式可以是匿名的，而函数声明则不可以省略函数名。</p>"},{"title":"Node.js介绍","date":"2019-01-13T11:04:56.000Z","_content":"### Node.js概述\n<!-- more -->\n\n### Node.js概述\n> Node.js的首要目标是提供一种简单的、用于创建高性能服务器及可在该服务器中运行的各种应用程序的开发工具。\n\n#### 实现高性能的服务器\n1. Node.js运行的是高性能 V8 JavaScript脚本语言，该语言是一种可以运行在服务端的JavaScript脚本语言。V8 JavaScript 引擎是由Google公司使用C++语言开发的一种高性能JavaScript引擎。不止在浏览器中运行，Node.js将其转用在了服务器中，提供了各种不同用途的API。\n2.  意味开发者编写的高端JavaScript脚本代码与开发者编写的低端的C语言具有非常相近的执行效率。\n\n#### 非阻塞型I/O及事件环机制\n1. 非阻塞型I/O\n例如在传统的单线程处理机制中，执行了访问数据库的代码之后，整个线程都将暂停下来，等待数据库返回的查询结果之后才能继续执行其后面的代码，I/O操作阻塞了代码的执行，降低了程序的执行效率。而Node.js采用非阻塞型I/O机制，执行了访问数据库的代码之后将立即执行后面的代码，把数据库返回结果的处理代码放在回调函数中执行，从而提高程序的执行效率。\n\n2. 事件环机制\n在Node.js中，在一个时刻只能执行一个事件回调函数，但是在执行一个事件回调函数的中途可以转而处理其他事件（包括触发新的事件，声明该事件的回调函数等），然后返回继续执行原事件回调函数，这种处理机制称为事件环机制。\n\n### Node.js适合开发的应用程序\n> 当应用程序需要处理大量并发的输入/输出，而在向客户端发出响应之前，应用程序内部并不需要进行非常复杂的处理的时候。\n\n1. 聊天服务器:存在大量用户与聊天服务器之间的并发连接，而服务器本身并不存在非常复杂的处理。\n2. 综合服务类网站或电子商务网站的服务器。\n\n### 示例应用程序\n```\n// 引入http模块\nconst http = require('http');\n// createServer方法创建用于接受HTTP客户端请求并响应的HTTP服务器应用程序\nhttp.createServer(function(req,res) {\n/**\n *  req:客户端请求对象，res:服务端所做出的响应对象。\n *  响应状态码定义200，内容类型text/html。\n *  定义utf-8为了在浏览器中显示中文\n *  通过响应对象的end方法输出一行HTMl代码并结束响应流\n */\n    res.writeHead(200,('Content-Type':'text-html'));\n    res.write('<head><meta charset=\"utf-8\"/></head>')\n    res.end('hello word')\n}).listen(8081);\n\n```\n","source":"_posts/1-Node-introduction.md","raw":"---\ntitle: Node.js介绍\ndate: 2019-01-13 19:04:56\ntags: ['Node.js']\ncategories: Node.js\n---\n### Node.js概述\n<!-- more -->\n\n### Node.js概述\n> Node.js的首要目标是提供一种简单的、用于创建高性能服务器及可在该服务器中运行的各种应用程序的开发工具。\n\n#### 实现高性能的服务器\n1. Node.js运行的是高性能 V8 JavaScript脚本语言，该语言是一种可以运行在服务端的JavaScript脚本语言。V8 JavaScript 引擎是由Google公司使用C++语言开发的一种高性能JavaScript引擎。不止在浏览器中运行，Node.js将其转用在了服务器中，提供了各种不同用途的API。\n2.  意味开发者编写的高端JavaScript脚本代码与开发者编写的低端的C语言具有非常相近的执行效率。\n\n#### 非阻塞型I/O及事件环机制\n1. 非阻塞型I/O\n例如在传统的单线程处理机制中，执行了访问数据库的代码之后，整个线程都将暂停下来，等待数据库返回的查询结果之后才能继续执行其后面的代码，I/O操作阻塞了代码的执行，降低了程序的执行效率。而Node.js采用非阻塞型I/O机制，执行了访问数据库的代码之后将立即执行后面的代码，把数据库返回结果的处理代码放在回调函数中执行，从而提高程序的执行效率。\n\n2. 事件环机制\n在Node.js中，在一个时刻只能执行一个事件回调函数，但是在执行一个事件回调函数的中途可以转而处理其他事件（包括触发新的事件，声明该事件的回调函数等），然后返回继续执行原事件回调函数，这种处理机制称为事件环机制。\n\n### Node.js适合开发的应用程序\n> 当应用程序需要处理大量并发的输入/输出，而在向客户端发出响应之前，应用程序内部并不需要进行非常复杂的处理的时候。\n\n1. 聊天服务器:存在大量用户与聊天服务器之间的并发连接，而服务器本身并不存在非常复杂的处理。\n2. 综合服务类网站或电子商务网站的服务器。\n\n### 示例应用程序\n```\n// 引入http模块\nconst http = require('http');\n// createServer方法创建用于接受HTTP客户端请求并响应的HTTP服务器应用程序\nhttp.createServer(function(req,res) {\n/**\n *  req:客户端请求对象，res:服务端所做出的响应对象。\n *  响应状态码定义200，内容类型text/html。\n *  定义utf-8为了在浏览器中显示中文\n *  通过响应对象的end方法输出一行HTMl代码并结束响应流\n */\n    res.writeHead(200,('Content-Type':'text-html'));\n    res.write('<head><meta charset=\"utf-8\"/></head>')\n    res.end('hello word')\n}).listen(8081);\n\n```\n","slug":"1-Node-introduction","published":1,"updated":"2019-01-13T12:14:33.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq41a0001he6jio7c4hsg","content":"<h3 id=\"Node-js概述\"><a href=\"#Node-js概述\" class=\"headerlink\" title=\"Node.js概述\"></a>Node.js概述</h3><a id=\"more\"></a>\n<h3 id=\"Node-js概述-1\"><a href=\"#Node-js概述-1\" class=\"headerlink\" title=\"Node.js概述\"></a>Node.js概述</h3><blockquote>\n<p>Node.js的首要目标是提供一种简单的、用于创建高性能服务器及可在该服务器中运行的各种应用程序的开发工具。</p>\n</blockquote>\n<h4 id=\"实现高性能的服务器\"><a href=\"#实现高性能的服务器\" class=\"headerlink\" title=\"实现高性能的服务器\"></a>实现高性能的服务器</h4><ol>\n<li>Node.js运行的是高性能 V8 JavaScript脚本语言，该语言是一种可以运行在服务端的JavaScript脚本语言。V8 JavaScript 引擎是由Google公司使用C++语言开发的一种高性能JavaScript引擎。不止在浏览器中运行，Node.js将其转用在了服务器中，提供了各种不同用途的API。</li>\n<li>意味开发者编写的高端JavaScript脚本代码与开发者编写的低端的C语言具有非常相近的执行效率。</li>\n</ol>\n<h4 id=\"非阻塞型I-O及事件环机制\"><a href=\"#非阻塞型I-O及事件环机制\" class=\"headerlink\" title=\"非阻塞型I/O及事件环机制\"></a>非阻塞型I/O及事件环机制</h4><ol>\n<li><p>非阻塞型I/O<br>例如在传统的单线程处理机制中，执行了访问数据库的代码之后，整个线程都将暂停下来，等待数据库返回的查询结果之后才能继续执行其后面的代码，I/O操作阻塞了代码的执行，降低了程序的执行效率。而Node.js采用非阻塞型I/O机制，执行了访问数据库的代码之后将立即执行后面的代码，把数据库返回结果的处理代码放在回调函数中执行，从而提高程序的执行效率。</p>\n</li>\n<li><p>事件环机制<br>在Node.js中，在一个时刻只能执行一个事件回调函数，但是在执行一个事件回调函数的中途可以转而处理其他事件（包括触发新的事件，声明该事件的回调函数等），然后返回继续执行原事件回调函数，这种处理机制称为事件环机制。</p>\n</li>\n</ol>\n<h3 id=\"Node-js适合开发的应用程序\"><a href=\"#Node-js适合开发的应用程序\" class=\"headerlink\" title=\"Node.js适合开发的应用程序\"></a>Node.js适合开发的应用程序</h3><blockquote>\n<p>当应用程序需要处理大量并发的输入/输出，而在向客户端发出响应之前，应用程序内部并不需要进行非常复杂的处理的时候。</p>\n</blockquote>\n<ol>\n<li>聊天服务器:存在大量用户与聊天服务器之间的并发连接，而服务器本身并不存在非常复杂的处理。</li>\n<li>综合服务类网站或电子商务网站的服务器。</li>\n</ol>\n<h3 id=\"示例应用程序\"><a href=\"#示例应用程序\" class=\"headerlink\" title=\"示例应用程序\"></a>示例应用程序</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 引入http模块</span><br><span class=\"line\">const http = require(&apos;http&apos;);</span><br><span class=\"line\">// createServer方法创建用于接受HTTP客户端请求并响应的HTTP服务器应用程序</span><br><span class=\"line\">http.createServer(function(req,res) &#123;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  req:客户端请求对象，res:服务端所做出的响应对象。</span><br><span class=\"line\"> *  响应状态码定义200，内容类型text/html。</span><br><span class=\"line\"> *  定义utf-8为了在浏览器中显示中文</span><br><span class=\"line\"> *  通过响应对象的end方法输出一行HTMl代码并结束响应流</span><br><span class=\"line\"> */</span><br><span class=\"line\">    res.writeHead(200,(&apos;Content-Type&apos;:&apos;text-html&apos;));</span><br><span class=\"line\">    res.write(&apos;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;/head&gt;&apos;)</span><br><span class=\"line\">    res.end(&apos;hello word&apos;)</span><br><span class=\"line\">&#125;).listen(8081);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"Node-js概述\"><a href=\"#Node-js概述\" class=\"headerlink\" title=\"Node.js概述\"></a>Node.js概述</h3>","more":"<h3 id=\"Node-js概述-1\"><a href=\"#Node-js概述-1\" class=\"headerlink\" title=\"Node.js概述\"></a>Node.js概述</h3><blockquote>\n<p>Node.js的首要目标是提供一种简单的、用于创建高性能服务器及可在该服务器中运行的各种应用程序的开发工具。</p>\n</blockquote>\n<h4 id=\"实现高性能的服务器\"><a href=\"#实现高性能的服务器\" class=\"headerlink\" title=\"实现高性能的服务器\"></a>实现高性能的服务器</h4><ol>\n<li>Node.js运行的是高性能 V8 JavaScript脚本语言，该语言是一种可以运行在服务端的JavaScript脚本语言。V8 JavaScript 引擎是由Google公司使用C++语言开发的一种高性能JavaScript引擎。不止在浏览器中运行，Node.js将其转用在了服务器中，提供了各种不同用途的API。</li>\n<li>意味开发者编写的高端JavaScript脚本代码与开发者编写的低端的C语言具有非常相近的执行效率。</li>\n</ol>\n<h4 id=\"非阻塞型I-O及事件环机制\"><a href=\"#非阻塞型I-O及事件环机制\" class=\"headerlink\" title=\"非阻塞型I/O及事件环机制\"></a>非阻塞型I/O及事件环机制</h4><ol>\n<li><p>非阻塞型I/O<br>例如在传统的单线程处理机制中，执行了访问数据库的代码之后，整个线程都将暂停下来，等待数据库返回的查询结果之后才能继续执行其后面的代码，I/O操作阻塞了代码的执行，降低了程序的执行效率。而Node.js采用非阻塞型I/O机制，执行了访问数据库的代码之后将立即执行后面的代码，把数据库返回结果的处理代码放在回调函数中执行，从而提高程序的执行效率。</p>\n</li>\n<li><p>事件环机制<br>在Node.js中，在一个时刻只能执行一个事件回调函数，但是在执行一个事件回调函数的中途可以转而处理其他事件（包括触发新的事件，声明该事件的回调函数等），然后返回继续执行原事件回调函数，这种处理机制称为事件环机制。</p>\n</li>\n</ol>\n<h3 id=\"Node-js适合开发的应用程序\"><a href=\"#Node-js适合开发的应用程序\" class=\"headerlink\" title=\"Node.js适合开发的应用程序\"></a>Node.js适合开发的应用程序</h3><blockquote>\n<p>当应用程序需要处理大量并发的输入/输出，而在向客户端发出响应之前，应用程序内部并不需要进行非常复杂的处理的时候。</p>\n</blockquote>\n<ol>\n<li>聊天服务器:存在大量用户与聊天服务器之间的并发连接，而服务器本身并不存在非常复杂的处理。</li>\n<li>综合服务类网站或电子商务网站的服务器。</li>\n</ol>\n<h3 id=\"示例应用程序\"><a href=\"#示例应用程序\" class=\"headerlink\" title=\"示例应用程序\"></a>示例应用程序</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 引入http模块</span><br><span class=\"line\">const http = require(&apos;http&apos;);</span><br><span class=\"line\">// createServer方法创建用于接受HTTP客户端请求并响应的HTTP服务器应用程序</span><br><span class=\"line\">http.createServer(function(req,res) &#123;</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *  req:客户端请求对象，res:服务端所做出的响应对象。</span><br><span class=\"line\"> *  响应状态码定义200，内容类型text/html。</span><br><span class=\"line\"> *  定义utf-8为了在浏览器中显示中文</span><br><span class=\"line\"> *  通过响应对象的end方法输出一行HTMl代码并结束响应流</span><br><span class=\"line\"> */</span><br><span class=\"line\">    res.writeHead(200,(&apos;Content-Type&apos;:&apos;text-html&apos;));</span><br><span class=\"line\">    res.write(&apos;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;/head&gt;&apos;)</span><br><span class=\"line\">    res.end(&apos;hello word&apos;)</span><br><span class=\"line\">&#125;).listen(8081);</span><br></pre></td></tr></table></figure>"},{"title":"TypeScript","date":"2019-03-09T00:47:56.000Z","_content":"### TypeScript\n<!-- more -->\n\n### TypeScipt介绍\n> TypeScript 是 JavaScript 的类型的超集，它可以编译成纯 JavaScript。编译出来的 JavaScript 可以运行在任何浏览器上。TypeScript 编译工具可以运行在任何服务器和任何系统上。TypeScript 是开源的。\n\nTypeScript 是 JavaScript 的一个超集，主要提供了类型系统和对 ES6 的支持，它由 微软 开发。\n\n### TS 好处\n1.代码的可维护性。类型系统实际上是最好的文档。\n2.非常包容，TS是JS的超集。\n3.活跃的社区。\n\n### Hello TypeScript\n```\nfunction sayHello(person:string) {\n    return 'Hello,' + person;\n}\nlet user = 'Tom';\n```\n编译成.js文件\n```\nfunction sayHello(person) {\n    return 'Hello, ' + person;\n}\nvar user = 'Tom';\nconsole.log(sayHello(user));\n```\n使用 : 指定变量的类型，: 的前后有没有空格都可以。\n","source":"_posts/1-ts.md","raw":"---\ntitle: TypeScript\ndate: 2019-03-09 08:47:56\ntags: ['TypeScript']\ncategories: TypeScript\n---\n### TypeScript\n<!-- more -->\n\n### TypeScipt介绍\n> TypeScript 是 JavaScript 的类型的超集，它可以编译成纯 JavaScript。编译出来的 JavaScript 可以运行在任何浏览器上。TypeScript 编译工具可以运行在任何服务器和任何系统上。TypeScript 是开源的。\n\nTypeScript 是 JavaScript 的一个超集，主要提供了类型系统和对 ES6 的支持，它由 微软 开发。\n\n### TS 好处\n1.代码的可维护性。类型系统实际上是最好的文档。\n2.非常包容，TS是JS的超集。\n3.活跃的社区。\n\n### Hello TypeScript\n```\nfunction sayHello(person:string) {\n    return 'Hello,' + person;\n}\nlet user = 'Tom';\n```\n编译成.js文件\n```\nfunction sayHello(person) {\n    return 'Hello, ' + person;\n}\nvar user = 'Tom';\nconsole.log(sayHello(user));\n```\n使用 : 指定变量的类型，: 的前后有没有空格都可以。\n","slug":"1-ts","published":1,"updated":"2019-03-09T00:54:36.204Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq41d0004he6jsoq84sr7","content":"<h3 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h3><a id=\"more\"></a>\n<h3 id=\"TypeScipt介绍\"><a href=\"#TypeScipt介绍\" class=\"headerlink\" title=\"TypeScipt介绍\"></a>TypeScipt介绍</h3><blockquote>\n<p>TypeScript 是 JavaScript 的类型的超集，它可以编译成纯 JavaScript。编译出来的 JavaScript 可以运行在任何浏览器上。TypeScript 编译工具可以运行在任何服务器和任何系统上。TypeScript 是开源的。</p>\n</blockquote>\n<p>TypeScript 是 JavaScript 的一个超集，主要提供了类型系统和对 ES6 的支持，它由 微软 开发。</p>\n<h3 id=\"TS-好处\"><a href=\"#TS-好处\" class=\"headerlink\" title=\"TS 好处\"></a>TS 好处</h3><p>1.代码的可维护性。类型系统实际上是最好的文档。<br>2.非常包容，TS是JS的超集。<br>3.活跃的社区。</p>\n<h3 id=\"Hello-TypeScript\"><a href=\"#Hello-TypeScript\" class=\"headerlink\" title=\"Hello TypeScript\"></a>Hello TypeScript</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sayHello(person:string) &#123;</span><br><span class=\"line\">    return &apos;Hello,&apos; + person;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let user = &apos;Tom&apos;;</span><br></pre></td></tr></table></figure>\n<p>编译成.js文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sayHello(person) &#123;</span><br><span class=\"line\">    return &apos;Hello, &apos; + person;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var user = &apos;Tom&apos;;</span><br><span class=\"line\">console.log(sayHello(user));</span><br></pre></td></tr></table></figure></p>\n<p>使用 : 指定变量的类型，: 的前后有没有空格都可以。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h3>","more":"<h3 id=\"TypeScipt介绍\"><a href=\"#TypeScipt介绍\" class=\"headerlink\" title=\"TypeScipt介绍\"></a>TypeScipt介绍</h3><blockquote>\n<p>TypeScript 是 JavaScript 的类型的超集，它可以编译成纯 JavaScript。编译出来的 JavaScript 可以运行在任何浏览器上。TypeScript 编译工具可以运行在任何服务器和任何系统上。TypeScript 是开源的。</p>\n</blockquote>\n<p>TypeScript 是 JavaScript 的一个超集，主要提供了类型系统和对 ES6 的支持，它由 微软 开发。</p>\n<h3 id=\"TS-好处\"><a href=\"#TS-好处\" class=\"headerlink\" title=\"TS 好处\"></a>TS 好处</h3><p>1.代码的可维护性。类型系统实际上是最好的文档。<br>2.非常包容，TS是JS的超集。<br>3.活跃的社区。</p>\n<h3 id=\"Hello-TypeScript\"><a href=\"#Hello-TypeScript\" class=\"headerlink\" title=\"Hello TypeScript\"></a>Hello TypeScript</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sayHello(person:string) &#123;</span><br><span class=\"line\">    return &apos;Hello,&apos; + person;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let user = &apos;Tom&apos;;</span><br></pre></td></tr></table></figure>\n<p>编译成.js文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sayHello(person) &#123;</span><br><span class=\"line\">    return &apos;Hello, &apos; + person;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var user = &apos;Tom&apos;;</span><br><span class=\"line\">console.log(sayHello(user));</span><br></pre></td></tr></table></figure></p>\n<p>使用 : 指定变量的类型，: 的前后有没有空格都可以。</p>"},{"title":"提升和作用域闭包","date":"2019-03-31T16:00:00.000Z","_content":"### 提升和作用域闭包\n<!-- more -->\n\n### 提升\n> 这意味着无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。\n可以将这个过程形象地想象成所有的声明（变量和函数）都会被“移动”到各自作用域的\n最顶端，这个过程被称为提升。\n> 声明本身会被提升，而包括函数表达式的赋值在内的赋值操作并不会提升。 \n要注意避免重复声明，特别是当普通的  var 声明和函数声明混合在一起的时候，否则会引 \n起很多危险的问题！\n\n```\na = 2;\nvar a;\nconsole.log(a) //2\n------------------\n进行如下处理\nvar a;\na = 2;\n变量出现的位置被“移动”到了最上面，这个过程就叫做提升\n```\n变量和函数在内的所有声明都会在任何代码被执行前首先被处理。JavaScript实际会将其看两个声明：var a;和a = 2;第一个定义声明是在编译阶段进行，第二个赋值声明会被留在原地等待执行阶段。\n\n```\nfoo()\nfunction foo() {\n    console.log(a) //undefined\n    var a = 2;\n}\n--------------\n进行如下处理\nfunction foo() {\n    var a;\n    console.log(a) //undefined\n    a = 2;\n}\nfoo()\n```\nfoo函数声明被提升了，但函数表达式却不会被提升。\n```\nfoo() //TypeError\nvar foo = function bar() {\n    //...\n}\n```\n即使是具名函数表达式，名称标识符在赋值之前也无法在所在作用域中使用。\n\n```\nfoo() //1\nvar foo;\nfunction foo() {\n    console.log(1)\n}\nfoo = function() {\n    console.log(2)\n}\n-----------\n进行如下处理\nfunction foo() {\n    console.log(1)\n}\nfoo() //1\nfoo = function() {\n    console.log(2)\n}\n```\n函数声明和变量都会被提升，函数首先被提升，然后才是变量。后面的函数声明还可以覆盖前面的函数声明\n\n```\nfoo() //3\n\nfunction foo() {\n    console.log(1)\n}\n\nvar foo = function() {\n    console.log(2)\n}\n\nfunction foo() {\n    console.log(3)\n}\n```\n\n### 作用域闭包\n> 闭包就是能够读取其他函数内部变量的函数。由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成\"定义在一个函数内部的函数\"。在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。\n\n```\nfunction foo() {\n    var a = 2;\n    function bar() {\n        console.log(a)\n    }\n    return bar\n}\nvar baz = bar();\nbaz(); //2\n```\n函数baz()能够访问foo()的内部作用域。将bar()函数本身当作一个值类型进行传递。而闭包的“神奇”之处正是可以阻止这件事情的发生。事实上内部作用域依然存在，因此 \n没有被回收。谁在使用这个内部作用域？原来是  bar() 本身在使用。bar()拥有foo()内部作用域的闭包，该作用域一直存活,bar()本身在使用。bar() 依然持有对该作用域的引用，而这个引用就叫作闭包。\n\n","source":"_posts/2-JS-tishenghebibao.md","raw":"---\ntitle: 提升和作用域闭包\ndate: 2019-04-1 \ntags: ['你不知道的JavaScript']\ncategories: 你不知道的JavaScript\n---\n### 提升和作用域闭包\n<!-- more -->\n\n### 提升\n> 这意味着无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。\n可以将这个过程形象地想象成所有的声明（变量和函数）都会被“移动”到各自作用域的\n最顶端，这个过程被称为提升。\n> 声明本身会被提升，而包括函数表达式的赋值在内的赋值操作并不会提升。 \n要注意避免重复声明，特别是当普通的  var 声明和函数声明混合在一起的时候，否则会引 \n起很多危险的问题！\n\n```\na = 2;\nvar a;\nconsole.log(a) //2\n------------------\n进行如下处理\nvar a;\na = 2;\n变量出现的位置被“移动”到了最上面，这个过程就叫做提升\n```\n变量和函数在内的所有声明都会在任何代码被执行前首先被处理。JavaScript实际会将其看两个声明：var a;和a = 2;第一个定义声明是在编译阶段进行，第二个赋值声明会被留在原地等待执行阶段。\n\n```\nfoo()\nfunction foo() {\n    console.log(a) //undefined\n    var a = 2;\n}\n--------------\n进行如下处理\nfunction foo() {\n    var a;\n    console.log(a) //undefined\n    a = 2;\n}\nfoo()\n```\nfoo函数声明被提升了，但函数表达式却不会被提升。\n```\nfoo() //TypeError\nvar foo = function bar() {\n    //...\n}\n```\n即使是具名函数表达式，名称标识符在赋值之前也无法在所在作用域中使用。\n\n```\nfoo() //1\nvar foo;\nfunction foo() {\n    console.log(1)\n}\nfoo = function() {\n    console.log(2)\n}\n-----------\n进行如下处理\nfunction foo() {\n    console.log(1)\n}\nfoo() //1\nfoo = function() {\n    console.log(2)\n}\n```\n函数声明和变量都会被提升，函数首先被提升，然后才是变量。后面的函数声明还可以覆盖前面的函数声明\n\n```\nfoo() //3\n\nfunction foo() {\n    console.log(1)\n}\n\nvar foo = function() {\n    console.log(2)\n}\n\nfunction foo() {\n    console.log(3)\n}\n```\n\n### 作用域闭包\n> 闭包就是能够读取其他函数内部变量的函数。由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成\"定义在一个函数内部的函数\"。在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。\n\n```\nfunction foo() {\n    var a = 2;\n    function bar() {\n        console.log(a)\n    }\n    return bar\n}\nvar baz = bar();\nbaz(); //2\n```\n函数baz()能够访问foo()的内部作用域。将bar()函数本身当作一个值类型进行传递。而闭包的“神奇”之处正是可以阻止这件事情的发生。事实上内部作用域依然存在，因此 \n没有被回收。谁在使用这个内部作用域？原来是  bar() 本身在使用。bar()拥有foo()内部作用域的闭包，该作用域一直存活,bar()本身在使用。bar() 依然持有对该作用域的引用，而这个引用就叫作闭包。\n\n","slug":"2-JS-tishenghebibao","published":1,"updated":"2019-04-01T13:48:24.012Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq41e0005he6jkdheiqxc","content":"<h3 id=\"提升和作用域闭包\"><a href=\"#提升和作用域闭包\" class=\"headerlink\" title=\"提升和作用域闭包\"></a>提升和作用域闭包</h3><a id=\"more\"></a>\n<h3 id=\"提升\"><a href=\"#提升\" class=\"headerlink\" title=\"提升\"></a>提升</h3><blockquote>\n<p>这意味着无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。<br>可以将这个过程形象地想象成所有的声明（变量和函数）都会被“移动”到各自作用域的<br>最顶端，这个过程被称为提升。<br>声明本身会被提升，而包括函数表达式的赋值在内的赋值操作并不会提升。<br>要注意避免重复声明，特别是当普通的  var 声明和函数声明混合在一起的时候，否则会引<br>起很多危险的问题！</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 2;</span><br><span class=\"line\">var a;</span><br><span class=\"line\">console.log(a) //2</span><br><span class=\"line\">------------------</span><br><span class=\"line\">进行如下处理</span><br><span class=\"line\">var a;</span><br><span class=\"line\">a = 2;</span><br><span class=\"line\">变量出现的位置被“移动”到了最上面，这个过程就叫做提升</span><br></pre></td></tr></table></figure>\n<p>变量和函数在内的所有声明都会在任何代码被执行前首先被处理。JavaScript实际会将其看两个声明：var a;和a = 2;第一个定义声明是在编译阶段进行，第二个赋值声明会被留在原地等待执行阶段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo()</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    console.log(a) //undefined</span><br><span class=\"line\">    var a = 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--------------</span><br><span class=\"line\">进行如下处理</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    var a;</span><br><span class=\"line\">    console.log(a) //undefined</span><br><span class=\"line\">    a = 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n<p>foo函数声明被提升了，但函数表达式却不会被提升。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo() //TypeError</span><br><span class=\"line\">var foo = function bar() &#123;</span><br><span class=\"line\">    //...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>即使是具名函数表达式，名称标识符在赋值之前也无法在所在作用域中使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo() //1</span><br><span class=\"line\">var foo;</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    console.log(1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo = function() &#123;</span><br><span class=\"line\">    console.log(2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-----------</span><br><span class=\"line\">进行如下处理</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    console.log(1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo() //1</span><br><span class=\"line\">foo = function() &#123;</span><br><span class=\"line\">    console.log(2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>函数声明和变量都会被提升，函数首先被提升，然后才是变量。后面的函数声明还可以覆盖前面的函数声明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo() //3</span><br><span class=\"line\"></span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    console.log(1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var foo = function() &#123;</span><br><span class=\"line\">    console.log(2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    console.log(3)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"作用域闭包\"><a href=\"#作用域闭包\" class=\"headerlink\" title=\"作用域闭包\"></a>作用域闭包</h3><blockquote>\n<p>闭包就是能够读取其他函数内部变量的函数。由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”。在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    var a = 2;</span><br><span class=\"line\">    function bar() &#123;</span><br><span class=\"line\">        console.log(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return bar</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var baz = bar();</span><br><span class=\"line\">baz(); //2</span><br></pre></td></tr></table></figure>\n<p>函数baz()能够访问foo()的内部作用域。将bar()函数本身当作一个值类型进行传递。而闭包的“神奇”之处正是可以阻止这件事情的发生。事实上内部作用域依然存在，因此<br>没有被回收。谁在使用这个内部作用域？原来是  bar() 本身在使用。bar()拥有foo()内部作用域的闭包，该作用域一直存活,bar()本身在使用。bar() 依然持有对该作用域的引用，而这个引用就叫作闭包。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"提升和作用域闭包\"><a href=\"#提升和作用域闭包\" class=\"headerlink\" title=\"提升和作用域闭包\"></a>提升和作用域闭包</h3>","more":"<h3 id=\"提升\"><a href=\"#提升\" class=\"headerlink\" title=\"提升\"></a>提升</h3><blockquote>\n<p>这意味着无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。<br>可以将这个过程形象地想象成所有的声明（变量和函数）都会被“移动”到各自作用域的<br>最顶端，这个过程被称为提升。<br>声明本身会被提升，而包括函数表达式的赋值在内的赋值操作并不会提升。<br>要注意避免重复声明，特别是当普通的  var 声明和函数声明混合在一起的时候，否则会引<br>起很多危险的问题！</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 2;</span><br><span class=\"line\">var a;</span><br><span class=\"line\">console.log(a) //2</span><br><span class=\"line\">------------------</span><br><span class=\"line\">进行如下处理</span><br><span class=\"line\">var a;</span><br><span class=\"line\">a = 2;</span><br><span class=\"line\">变量出现的位置被“移动”到了最上面，这个过程就叫做提升</span><br></pre></td></tr></table></figure>\n<p>变量和函数在内的所有声明都会在任何代码被执行前首先被处理。JavaScript实际会将其看两个声明：var a;和a = 2;第一个定义声明是在编译阶段进行，第二个赋值声明会被留在原地等待执行阶段。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo()</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    console.log(a) //undefined</span><br><span class=\"line\">    var a = 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--------------</span><br><span class=\"line\">进行如下处理</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    var a;</span><br><span class=\"line\">    console.log(a) //undefined</span><br><span class=\"line\">    a = 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo()</span><br></pre></td></tr></table></figure>\n<p>foo函数声明被提升了，但函数表达式却不会被提升。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo() //TypeError</span><br><span class=\"line\">var foo = function bar() &#123;</span><br><span class=\"line\">    //...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>即使是具名函数表达式，名称标识符在赋值之前也无法在所在作用域中使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo() //1</span><br><span class=\"line\">var foo;</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    console.log(1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo = function() &#123;</span><br><span class=\"line\">    console.log(2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-----------</span><br><span class=\"line\">进行如下处理</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    console.log(1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">foo() //1</span><br><span class=\"line\">foo = function() &#123;</span><br><span class=\"line\">    console.log(2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>函数声明和变量都会被提升，函数首先被提升，然后才是变量。后面的函数声明还可以覆盖前面的函数声明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo() //3</span><br><span class=\"line\"></span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    console.log(1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var foo = function() &#123;</span><br><span class=\"line\">    console.log(2)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    console.log(3)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"作用域闭包\"><a href=\"#作用域闭包\" class=\"headerlink\" title=\"作用域闭包\"></a>作用域闭包</h3><blockquote>\n<p>闭包就是能够读取其他函数内部变量的函数。由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”。在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    var a = 2;</span><br><span class=\"line\">    function bar() &#123;</span><br><span class=\"line\">        console.log(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return bar</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var baz = bar();</span><br><span class=\"line\">baz(); //2</span><br></pre></td></tr></table></figure>\n<p>函数baz()能够访问foo()的内部作用域。将bar()函数本身当作一个值类型进行传递。而闭包的“神奇”之处正是可以阻止这件事情的发生。事实上内部作用域依然存在，因此<br>没有被回收。谁在使用这个内部作用域？原来是  bar() 本身在使用。bar()拥有foo()内部作用域的闭包，该作用域一直存活,bar()本身在使用。bar() 依然持有对该作用域的引用，而这个引用就叫作闭包。</p>"},{"title":"原始数据类型","date":"2019-03-09T01:01:32.000Z","_content":"### 原始数据类型\n<!-- more -->\n\n### 原始数据类型\n1.JS的类型分为两种，原始数据类型和对象类型。\n2.原始数据类型分为五种，布尔值、数值、字符串、null、undefind、以及ES6中的新类型Symbol。\n\n### TypeScript使用原始类型\n1.布尔值\n```\nlet isDone: boolean = false;\n\n// 编译通过\n// 后面约定，未强调编译错误的代码片段，默认为编译通过\n```\n2.数值\n```\nlet decLiteral: number = 6;\n```\n\n3.字符串\n```\nlet myName:string = 'Tom';\n```\n4.空值\nJavaScript 没有空值（Void）的概念，在 TypeScript 中，可以用 void 表示没有任何返回值的函数：\n```\nfunction alertName(): void {\n    alert('My name is Tom')\n}\n```\n声明一个 void 类型的变量没有什么用，因为你只能将它赋值为 undefined 和 null：\n```\nlet unusable: void = undefined;\n```\n\n5.Null 和 Undefined\n在 TypeScript 中，可以使用 null 和 undefined 来定义这两个原始数据类型：\n```\nlet u: undefined = undefined;\nlet n: null = null;\n```\nundefined 类型的变量只能被赋值为 undefined，null 类型的变量只能被赋值为 null。\n与 void 的区别是，undefined 和 null 是所有类型的子类型。也就是说 undefined 类型的变量，可以赋值给 number 类型的变量：\n```\n// 这样不会报错\nlet num: number = undefined; \nlet u: undefined;\nlet num: number = u;\n```\n而 void 类型的变量不能赋值给 number 类型的变量：\n```\nlet u: void;\nlet num: number = u;\n\n// index.ts(2,5): error TS2322: Type 'void' is not assignable to type 'number'.\n```\n\n\n","source":"_posts/2-ts-primitive-data-type.md","raw":"---\ntitle: 原始数据类型\ndate: 2019-03-09 09:01:32\ntags: ['TypeScript']\ncategories: TypeScript\n---\n### 原始数据类型\n<!-- more -->\n\n### 原始数据类型\n1.JS的类型分为两种，原始数据类型和对象类型。\n2.原始数据类型分为五种，布尔值、数值、字符串、null、undefind、以及ES6中的新类型Symbol。\n\n### TypeScript使用原始类型\n1.布尔值\n```\nlet isDone: boolean = false;\n\n// 编译通过\n// 后面约定，未强调编译错误的代码片段，默认为编译通过\n```\n2.数值\n```\nlet decLiteral: number = 6;\n```\n\n3.字符串\n```\nlet myName:string = 'Tom';\n```\n4.空值\nJavaScript 没有空值（Void）的概念，在 TypeScript 中，可以用 void 表示没有任何返回值的函数：\n```\nfunction alertName(): void {\n    alert('My name is Tom')\n}\n```\n声明一个 void 类型的变量没有什么用，因为你只能将它赋值为 undefined 和 null：\n```\nlet unusable: void = undefined;\n```\n\n5.Null 和 Undefined\n在 TypeScript 中，可以使用 null 和 undefined 来定义这两个原始数据类型：\n```\nlet u: undefined = undefined;\nlet n: null = null;\n```\nundefined 类型的变量只能被赋值为 undefined，null 类型的变量只能被赋值为 null。\n与 void 的区别是，undefined 和 null 是所有类型的子类型。也就是说 undefined 类型的变量，可以赋值给 number 类型的变量：\n```\n// 这样不会报错\nlet num: number = undefined; \nlet u: undefined;\nlet num: number = u;\n```\n而 void 类型的变量不能赋值给 number 类型的变量：\n```\nlet u: void;\nlet num: number = u;\n\n// index.ts(2,5): error TS2322: Type 'void' is not assignable to type 'number'.\n```\n\n\n","slug":"2-ts-primitive-data-type","published":1,"updated":"2019-03-09T01:10:44.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq41g0006he6jfgzni2e9","content":"<h3 id=\"原始数据类型\"><a href=\"#原始数据类型\" class=\"headerlink\" title=\"原始数据类型\"></a>原始数据类型</h3><a id=\"more\"></a>\n<h3 id=\"原始数据类型-1\"><a href=\"#原始数据类型-1\" class=\"headerlink\" title=\"原始数据类型\"></a>原始数据类型</h3><p>1.JS的类型分为两种，原始数据类型和对象类型。<br>2.原始数据类型分为五种，布尔值、数值、字符串、null、undefind、以及ES6中的新类型Symbol。</p>\n<h3 id=\"TypeScript使用原始类型\"><a href=\"#TypeScript使用原始类型\" class=\"headerlink\" title=\"TypeScript使用原始类型\"></a>TypeScript使用原始类型</h3><p>1.布尔值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let isDone: boolean = false;</span><br><span class=\"line\"></span><br><span class=\"line\">// 编译通过</span><br><span class=\"line\">// 后面约定，未强调编译错误的代码片段，默认为编译通过</span><br></pre></td></tr></table></figure></p>\n<p>2.数值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let decLiteral: number = 6;</span><br></pre></td></tr></table></figure></p>\n<p>3.字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let myName:string = &apos;Tom&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>4.空值<br>JavaScript 没有空值（Void）的概念，在 TypeScript 中，可以用 void 表示没有任何返回值的函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function alertName(): void &#123;</span><br><span class=\"line\">    alert(&apos;My name is Tom&apos;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>声明一个 void 类型的变量没有什么用，因为你只能将它赋值为 undefined 和 null：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let unusable: void = undefined;</span><br></pre></td></tr></table></figure></p>\n<p>5.Null 和 Undefined<br>在 TypeScript 中，可以使用 null 和 undefined 来定义这两个原始数据类型：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let u: undefined = undefined;</span><br><span class=\"line\">let n: null = null;</span><br></pre></td></tr></table></figure></p>\n<p>undefined 类型的变量只能被赋值为 undefined，null 类型的变量只能被赋值为 null。<br>与 void 的区别是，undefined 和 null 是所有类型的子类型。也就是说 undefined 类型的变量，可以赋值给 number 类型的变量：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 这样不会报错</span><br><span class=\"line\">let num: number = undefined; </span><br><span class=\"line\">let u: undefined;</span><br><span class=\"line\">let num: number = u;</span><br></pre></td></tr></table></figure></p>\n<p>而 void 类型的变量不能赋值给 number 类型的变量：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let u: void;</span><br><span class=\"line\">let num: number = u;</span><br><span class=\"line\"></span><br><span class=\"line\">// index.ts(2,5): error TS2322: Type &apos;void&apos; is not assignable to type &apos;number&apos;.</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"原始数据类型\"><a href=\"#原始数据类型\" class=\"headerlink\" title=\"原始数据类型\"></a>原始数据类型</h3>","more":"<h3 id=\"原始数据类型-1\"><a href=\"#原始数据类型-1\" class=\"headerlink\" title=\"原始数据类型\"></a>原始数据类型</h3><p>1.JS的类型分为两种，原始数据类型和对象类型。<br>2.原始数据类型分为五种，布尔值、数值、字符串、null、undefind、以及ES6中的新类型Symbol。</p>\n<h3 id=\"TypeScript使用原始类型\"><a href=\"#TypeScript使用原始类型\" class=\"headerlink\" title=\"TypeScript使用原始类型\"></a>TypeScript使用原始类型</h3><p>1.布尔值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let isDone: boolean = false;</span><br><span class=\"line\"></span><br><span class=\"line\">// 编译通过</span><br><span class=\"line\">// 后面约定，未强调编译错误的代码片段，默认为编译通过</span><br></pre></td></tr></table></figure></p>\n<p>2.数值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let decLiteral: number = 6;</span><br></pre></td></tr></table></figure></p>\n<p>3.字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let myName:string = &apos;Tom&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>4.空值<br>JavaScript 没有空值（Void）的概念，在 TypeScript 中，可以用 void 表示没有任何返回值的函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function alertName(): void &#123;</span><br><span class=\"line\">    alert(&apos;My name is Tom&apos;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>声明一个 void 类型的变量没有什么用，因为你只能将它赋值为 undefined 和 null：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let unusable: void = undefined;</span><br></pre></td></tr></table></figure></p>\n<p>5.Null 和 Undefined<br>在 TypeScript 中，可以使用 null 和 undefined 来定义这两个原始数据类型：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let u: undefined = undefined;</span><br><span class=\"line\">let n: null = null;</span><br></pre></td></tr></table></figure></p>\n<p>undefined 类型的变量只能被赋值为 undefined，null 类型的变量只能被赋值为 null。<br>与 void 的区别是，undefined 和 null 是所有类型的子类型。也就是说 undefined 类型的变量，可以赋值给 number 类型的变量：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 这样不会报错</span><br><span class=\"line\">let num: number = undefined; </span><br><span class=\"line\">let u: undefined;</span><br><span class=\"line\">let num: number = u;</span><br></pre></td></tr></table></figure></p>\n<p>而 void 类型的变量不能赋值给 number 类型的变量：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let u: void;</span><br><span class=\"line\">let num: number = u;</span><br><span class=\"line\"></span><br><span class=\"line\">// index.ts(2,5): error TS2322: Type &apos;void&apos; is not assignable to type &apos;number&apos;.</span><br></pre></td></tr></table></figure></p>"},{"title":"this","date":"2019-04-01T16:00:00.000Z","_content":"### 关于this\n<!-- more -->\n\n> this 既不指向函数自身也不指向函数的词法作用域。this 实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。\n\n### this是什么\n当一个函数被调用时，会创建一个活动记录（有时候也称为执行上下文）。这个记录会包 \n含函数在哪里被调用（调用栈）、函数的调用方法、传入的参数等信息。this 就是记录的 \n其中一个属性，会在函数执行的过程中用到。\n\n### this绑定\n1.默认绑定\n```\nfunction foo() {\n    console.log(this.a)\n}\nvar a = 2;\nfoo() //2\n```\n调用foo()，this.a被解析成全局变量a。函数调用时应用了this的默认绑定,this指向全局对象。\n如何判断默认绑定？在代码中，foo() 是直接使用不带任何修饰的函数引用进行调用的，因此只能使用 \n默认绑定，无法应用其他规则。\n严格模式下this是undefined。\n\n2.隐式绑定\n```\nfunction foo() {\n    console.log(this)\n}\nvar obj = {\n    a: 2,\n    foo:foo\n}\nvar a  = 3;\nobj.foo() //2\n```\nfoo()是被当作引用属性添加到 obj 中的。\n调用位置会使用obj上下文引用函数，foo()调用时指向obj对象，隐式规则会把函数调用中的this绑定到这个上下文对象\n\n3.显式绑定\n```\nfunction foo() { \n    console.log( this.a ); \n} \nvar obj = { \n    a:2 \n}; \nvar a = 3;\nfoo.call( obj ); // 2\n```\n通过  foo.call(..)，我们可以在调用  foo 时强制把它的  this 绑定到  obj 上。\n从  this 绑定的角度来说，call(..) 和  apply(..) 是一样的，它们的区别体现 \n在其他的参数上。\n\n4.new绑定\n使用 new 来调用函数，或者说发生构造函数调用时，会自动执行下面的操作。\n1.创建（或者说构造）一个全新的对象。 \n2.这个新对象会被执行  [[ 原型  ]] 连接。 \n3.这个新对象会绑定到函数调用的 this。 \n4.如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象。\n\n---\n```\nfunction foo(a) { \n    this.a = a; \n} \nvar bar = new foo(2); \nconsole.log( bar.a ); // 2\n```\n使用  new 来调用  foo(..) 时，我们会构造一个新对象并把它绑定到  foo(..) 调用中的  this \n上。new 是最后一种可以影响函数调用时  this 绑定行为的方法，我们称之为  new 绑定。\n\n### 箭头函数\n> 箭头函数根据外层（函数或者全局）作用域来决定 this。 \n\n```\nfunction foo() { \n    // 返回一个箭头函数 \n    return (a) => { \n        //this 继承自foo() \n        console.log( this.a ); \n    }; \n} \nvar obj1 = { \n    a:2 \n};\nvar obj2 = { \n    a:3\n};\nvar bar = foo.call(obj1)\nbar.call(obj2) //2 不是3\n```\n箭头函数会捕获调用时foo()到this,foo()的this绑定obj1，this也绑定到obj1。\n箭头函数的绑定无法被修改\n\n### 判断this\n1.  函数是否在 new 中调用（new 绑定）？如果是的话  this 绑定的是新创建的对象。 \n    var bar = new foo() \n2.  函数是否通过  call、apply（显式绑定）或者硬绑定调用？如果是的话，this 绑定的是指定的对象。\n    var bar = foo.call(obj2) \n3.  函数是否在某个上下文对象中调用（隐式绑定）？如果是的话，this 绑定的是那个上下文对象。  \n    var bar = obj1.foo() \n4.  如果都不是的话，使用默认绑定。如果在严格模式下，就绑定到 undefined，否则绑定到全局对象。 \n    var bar = foo()\n\n","source":"_posts/3-JS-this.md","raw":"---\ntitle: this\ndate: 2019-04-02\ntags: ['你不知道的JavaScript']\ncategories: 你不知道的JavaScript\n---\n### 关于this\n<!-- more -->\n\n> this 既不指向函数自身也不指向函数的词法作用域。this 实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。\n\n### this是什么\n当一个函数被调用时，会创建一个活动记录（有时候也称为执行上下文）。这个记录会包 \n含函数在哪里被调用（调用栈）、函数的调用方法、传入的参数等信息。this 就是记录的 \n其中一个属性，会在函数执行的过程中用到。\n\n### this绑定\n1.默认绑定\n```\nfunction foo() {\n    console.log(this.a)\n}\nvar a = 2;\nfoo() //2\n```\n调用foo()，this.a被解析成全局变量a。函数调用时应用了this的默认绑定,this指向全局对象。\n如何判断默认绑定？在代码中，foo() 是直接使用不带任何修饰的函数引用进行调用的，因此只能使用 \n默认绑定，无法应用其他规则。\n严格模式下this是undefined。\n\n2.隐式绑定\n```\nfunction foo() {\n    console.log(this)\n}\nvar obj = {\n    a: 2,\n    foo:foo\n}\nvar a  = 3;\nobj.foo() //2\n```\nfoo()是被当作引用属性添加到 obj 中的。\n调用位置会使用obj上下文引用函数，foo()调用时指向obj对象，隐式规则会把函数调用中的this绑定到这个上下文对象\n\n3.显式绑定\n```\nfunction foo() { \n    console.log( this.a ); \n} \nvar obj = { \n    a:2 \n}; \nvar a = 3;\nfoo.call( obj ); // 2\n```\n通过  foo.call(..)，我们可以在调用  foo 时强制把它的  this 绑定到  obj 上。\n从  this 绑定的角度来说，call(..) 和  apply(..) 是一样的，它们的区别体现 \n在其他的参数上。\n\n4.new绑定\n使用 new 来调用函数，或者说发生构造函数调用时，会自动执行下面的操作。\n1.创建（或者说构造）一个全新的对象。 \n2.这个新对象会被执行  [[ 原型  ]] 连接。 \n3.这个新对象会绑定到函数调用的 this。 \n4.如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象。\n\n---\n```\nfunction foo(a) { \n    this.a = a; \n} \nvar bar = new foo(2); \nconsole.log( bar.a ); // 2\n```\n使用  new 来调用  foo(..) 时，我们会构造一个新对象并把它绑定到  foo(..) 调用中的  this \n上。new 是最后一种可以影响函数调用时  this 绑定行为的方法，我们称之为  new 绑定。\n\n### 箭头函数\n> 箭头函数根据外层（函数或者全局）作用域来决定 this。 \n\n```\nfunction foo() { \n    // 返回一个箭头函数 \n    return (a) => { \n        //this 继承自foo() \n        console.log( this.a ); \n    }; \n} \nvar obj1 = { \n    a:2 \n};\nvar obj2 = { \n    a:3\n};\nvar bar = foo.call(obj1)\nbar.call(obj2) //2 不是3\n```\n箭头函数会捕获调用时foo()到this,foo()的this绑定obj1，this也绑定到obj1。\n箭头函数的绑定无法被修改\n\n### 判断this\n1.  函数是否在 new 中调用（new 绑定）？如果是的话  this 绑定的是新创建的对象。 \n    var bar = new foo() \n2.  函数是否通过  call、apply（显式绑定）或者硬绑定调用？如果是的话，this 绑定的是指定的对象。\n    var bar = foo.call(obj2) \n3.  函数是否在某个上下文对象中调用（隐式绑定）？如果是的话，this 绑定的是那个上下文对象。  \n    var bar = obj1.foo() \n4.  如果都不是的话，使用默认绑定。如果在严格模式下，就绑定到 undefined，否则绑定到全局对象。 \n    var bar = foo()\n\n","slug":"3-JS-this","published":1,"updated":"2019-04-02T11:13:27.854Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq41i000ahe6j2sloq7ei","content":"<h3 id=\"关于this\"><a href=\"#关于this\" class=\"headerlink\" title=\"关于this\"></a>关于this</h3><a id=\"more\"></a>\n<blockquote>\n<p>this 既不指向函数自身也不指向函数的词法作用域。this 实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。</p>\n</blockquote>\n<h3 id=\"this是什么\"><a href=\"#this是什么\" class=\"headerlink\" title=\"this是什么\"></a>this是什么</h3><p>当一个函数被调用时，会创建一个活动记录（有时候也称为执行上下文）。这个记录会包<br>含函数在哪里被调用（调用栈）、函数的调用方法、传入的参数等信息。this 就是记录的<br>其中一个属性，会在函数执行的过程中用到。</p>\n<h3 id=\"this绑定\"><a href=\"#this绑定\" class=\"headerlink\" title=\"this绑定\"></a>this绑定</h3><p>1.默认绑定<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    console.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = 2;</span><br><span class=\"line\">foo() //2</span><br></pre></td></tr></table></figure></p>\n<p>调用foo()，this.a被解析成全局变量a。函数调用时应用了this的默认绑定,this指向全局对象。<br>如何判断默认绑定？在代码中，foo() 是直接使用不带任何修饰的函数引用进行调用的，因此只能使用<br>默认绑定，无法应用其他规则。<br>严格模式下this是undefined。</p>\n<p>2.隐式绑定<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    console.log(this)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">    a: 2,</span><br><span class=\"line\">    foo:foo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a  = 3;</span><br><span class=\"line\">obj.foo() //2</span><br></pre></td></tr></table></figure></p>\n<p>foo()是被当作引用属性添加到 obj 中的。<br>调用位置会使用obj上下文引用函数，foo()调用时指向obj对象，隐式规则会把函数调用中的this绑定到这个上下文对象</p>\n<p>3.显式绑定<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123; </span><br><span class=\"line\">    console.log( this.a ); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">var obj = &#123; </span><br><span class=\"line\">    a:2 </span><br><span class=\"line\">&#125;; </span><br><span class=\"line\">var a = 3;</span><br><span class=\"line\">foo.call( obj ); // 2</span><br></pre></td></tr></table></figure></p>\n<p>通过  foo.call(..)，我们可以在调用  foo 时强制把它的  this 绑定到  obj 上。<br>从  this 绑定的角度来说，call(..) 和  apply(..) 是一样的，它们的区别体现<br>在其他的参数上。</p>\n<p>4.new绑定<br>使用 new 来调用函数，或者说发生构造函数调用时，会自动执行下面的操作。<br>1.创建（或者说构造）一个全新的对象。<br>2.这个新对象会被执行  [[ 原型  ]] 连接。<br>3.这个新对象会绑定到函数调用的 this。<br>4.如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象。</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(a) &#123; </span><br><span class=\"line\">    this.a = a; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">var bar = new foo(2); </span><br><span class=\"line\">console.log( bar.a ); // 2</span><br></pre></td></tr></table></figure>\n<p>使用  new 来调用  foo(..) 时，我们会构造一个新对象并把它绑定到  foo(..) 调用中的  this<br>上。new 是最后一种可以影响函数调用时  this 绑定行为的方法，我们称之为  new 绑定。</p>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><blockquote>\n<p>箭头函数根据外层（函数或者全局）作用域来决定 this。 </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123; </span><br><span class=\"line\">    // 返回一个箭头函数 </span><br><span class=\"line\">    return (a) =&gt; &#123; </span><br><span class=\"line\">        //this 继承自foo() </span><br><span class=\"line\">        console.log( this.a ); </span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">var obj1 = &#123; </span><br><span class=\"line\">    a:2 </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var obj2 = &#123; </span><br><span class=\"line\">    a:3</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var bar = foo.call(obj1)</span><br><span class=\"line\">bar.call(obj2) //2 不是3</span><br></pre></td></tr></table></figure>\n<p>箭头函数会捕获调用时foo()到this,foo()的this绑定obj1，this也绑定到obj1。<br>箭头函数的绑定无法被修改</p>\n<h3 id=\"判断this\"><a href=\"#判断this\" class=\"headerlink\" title=\"判断this\"></a>判断this</h3><ol>\n<li>函数是否在 new 中调用（new 绑定）？如果是的话  this 绑定的是新创建的对象。<br>var bar = new foo() </li>\n<li>函数是否通过  call、apply（显式绑定）或者硬绑定调用？如果是的话，this 绑定的是指定的对象。<br>var bar = foo.call(obj2) </li>\n<li>函数是否在某个上下文对象中调用（隐式绑定）？如果是的话，this 绑定的是那个上下文对象。<br>var bar = obj1.foo() </li>\n<li>如果都不是的话，使用默认绑定。如果在严格模式下，就绑定到 undefined，否则绑定到全局对象。<br>var bar = foo()</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"关于this\"><a href=\"#关于this\" class=\"headerlink\" title=\"关于this\"></a>关于this</h3>","more":"<blockquote>\n<p>this 既不指向函数自身也不指向函数的词法作用域。this 实际上是在函数被调用时发生的绑定，它指向什么完全取决于函数在哪里被调用。</p>\n</blockquote>\n<h3 id=\"this是什么\"><a href=\"#this是什么\" class=\"headerlink\" title=\"this是什么\"></a>this是什么</h3><p>当一个函数被调用时，会创建一个活动记录（有时候也称为执行上下文）。这个记录会包<br>含函数在哪里被调用（调用栈）、函数的调用方法、传入的参数等信息。this 就是记录的<br>其中一个属性，会在函数执行的过程中用到。</p>\n<h3 id=\"this绑定\"><a href=\"#this绑定\" class=\"headerlink\" title=\"this绑定\"></a>this绑定</h3><p>1.默认绑定<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    console.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a = 2;</span><br><span class=\"line\">foo() //2</span><br></pre></td></tr></table></figure></p>\n<p>调用foo()，this.a被解析成全局变量a。函数调用时应用了this的默认绑定,this指向全局对象。<br>如何判断默认绑定？在代码中，foo() 是直接使用不带任何修饰的函数引用进行调用的，因此只能使用<br>默认绑定，无法应用其他规则。<br>严格模式下this是undefined。</p>\n<p>2.隐式绑定<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    console.log(this)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">    a: 2,</span><br><span class=\"line\">    foo:foo</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var a  = 3;</span><br><span class=\"line\">obj.foo() //2</span><br></pre></td></tr></table></figure></p>\n<p>foo()是被当作引用属性添加到 obj 中的。<br>调用位置会使用obj上下文引用函数，foo()调用时指向obj对象，隐式规则会把函数调用中的this绑定到这个上下文对象</p>\n<p>3.显式绑定<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123; </span><br><span class=\"line\">    console.log( this.a ); </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">var obj = &#123; </span><br><span class=\"line\">    a:2 </span><br><span class=\"line\">&#125;; </span><br><span class=\"line\">var a = 3;</span><br><span class=\"line\">foo.call( obj ); // 2</span><br></pre></td></tr></table></figure></p>\n<p>通过  foo.call(..)，我们可以在调用  foo 时强制把它的  this 绑定到  obj 上。<br>从  this 绑定的角度来说，call(..) 和  apply(..) 是一样的，它们的区别体现<br>在其他的参数上。</p>\n<p>4.new绑定<br>使用 new 来调用函数，或者说发生构造函数调用时，会自动执行下面的操作。<br>1.创建（或者说构造）一个全新的对象。<br>2.这个新对象会被执行  [[ 原型  ]] 连接。<br>3.这个新对象会绑定到函数调用的 this。<br>4.如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象。</p>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo(a) &#123; </span><br><span class=\"line\">    this.a = a; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">var bar = new foo(2); </span><br><span class=\"line\">console.log( bar.a ); // 2</span><br></pre></td></tr></table></figure>\n<p>使用  new 来调用  foo(..) 时，我们会构造一个新对象并把它绑定到  foo(..) 调用中的  this<br>上。new 是最后一种可以影响函数调用时  this 绑定行为的方法，我们称之为  new 绑定。</p>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><blockquote>\n<p>箭头函数根据外层（函数或者全局）作用域来决定 this。 </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123; </span><br><span class=\"line\">    // 返回一个箭头函数 </span><br><span class=\"line\">    return (a) =&gt; &#123; </span><br><span class=\"line\">        //this 继承自foo() </span><br><span class=\"line\">        console.log( this.a ); </span><br><span class=\"line\">    &#125;; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">var obj1 = &#123; </span><br><span class=\"line\">    a:2 </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var obj2 = &#123; </span><br><span class=\"line\">    a:3</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var bar = foo.call(obj1)</span><br><span class=\"line\">bar.call(obj2) //2 不是3</span><br></pre></td></tr></table></figure>\n<p>箭头函数会捕获调用时foo()到this,foo()的this绑定obj1，this也绑定到obj1。<br>箭头函数的绑定无法被修改</p>\n<h3 id=\"判断this\"><a href=\"#判断this\" class=\"headerlink\" title=\"判断this\"></a>判断this</h3><ol>\n<li>函数是否在 new 中调用（new 绑定）？如果是的话  this 绑定的是新创建的对象。<br>var bar = new foo() </li>\n<li>函数是否通过  call、apply（显式绑定）或者硬绑定调用？如果是的话，this 绑定的是指定的对象。<br>var bar = foo.call(obj2) </li>\n<li>函数是否在某个上下文对象中调用（隐式绑定）？如果是的话，this 绑定的是那个上下文对象。<br>var bar = obj1.foo() </li>\n<li>如果都不是的话，使用默认绑定。如果在严格模式下，就绑定到 undefined，否则绑定到全局对象。<br>var bar = foo()</li>\n</ol>"},{"title":"任意值Any","date":"2019-03-09T01:14:46.000Z","_content":"### 任意值Any\n<!-- more -->\n\n### 任意值Any\n任意值（Any）用来表示允许赋值为任意类型。\n1.如果是一个普通类型，在赋值过程中改变类型是不被允许的。\n2.如果是一个any类型,则允许被赋值为任意类型。\n```\nlet myFavoriteNumber:any = 'seven';\nmyFavoriteNumber = 7;\n```\n\n### 任意值的属性和方法\n1. 在任意值上访问任何属性都是允许的：\n2. 也允许调用任何方法：\n```\nlet anyThing: any = 'hello';\nconsole.log(anyThing.myName);\n\nlet anyThing: any = 'Tom';\nanyThing.setName('Jerry');\n```\n\n### 未声明类型的变量\n变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型：\n```\nlet something;\nsomething = 'seven';\n```\n\n","source":"_posts/3-ts-any.md","raw":"---\ntitle: 任意值Any\ndate: 2019-03-09 09:14:46\ntags: ['TypeScript']\ncategories: TypeScript\n---\n### 任意值Any\n<!-- more -->\n\n### 任意值Any\n任意值（Any）用来表示允许赋值为任意类型。\n1.如果是一个普通类型，在赋值过程中改变类型是不被允许的。\n2.如果是一个any类型,则允许被赋值为任意类型。\n```\nlet myFavoriteNumber:any = 'seven';\nmyFavoriteNumber = 7;\n```\n\n### 任意值的属性和方法\n1. 在任意值上访问任何属性都是允许的：\n2. 也允许调用任何方法：\n```\nlet anyThing: any = 'hello';\nconsole.log(anyThing.myName);\n\nlet anyThing: any = 'Tom';\nanyThing.setName('Jerry');\n```\n\n### 未声明类型的变量\n变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型：\n```\nlet something;\nsomething = 'seven';\n```\n\n","slug":"3-ts-any","published":1,"updated":"2019-03-09T01:19:56.750Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq41j000che6jqi903pgg","content":"<h3 id=\"任意值Any\"><a href=\"#任意值Any\" class=\"headerlink\" title=\"任意值Any\"></a>任意值Any</h3><a id=\"more\"></a>\n<h3 id=\"任意值Any-1\"><a href=\"#任意值Any-1\" class=\"headerlink\" title=\"任意值Any\"></a>任意值Any</h3><p>任意值（Any）用来表示允许赋值为任意类型。<br>1.如果是一个普通类型，在赋值过程中改变类型是不被允许的。<br>2.如果是一个any类型,则允许被赋值为任意类型。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let myFavoriteNumber:any = &apos;seven&apos;;</span><br><span class=\"line\">myFavoriteNumber = 7;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"任意值的属性和方法\"><a href=\"#任意值的属性和方法\" class=\"headerlink\" title=\"任意值的属性和方法\"></a>任意值的属性和方法</h3><ol>\n<li>在任意值上访问任何属性都是允许的：</li>\n<li>也允许调用任何方法：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let anyThing: any = &apos;hello&apos;;</span><br><span class=\"line\">console.log(anyThing.myName);</span><br><span class=\"line\"></span><br><span class=\"line\">let anyThing: any = &apos;Tom&apos;;</span><br><span class=\"line\">anyThing.setName(&apos;Jerry&apos;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"未声明类型的变量\"><a href=\"#未声明类型的变量\" class=\"headerlink\" title=\"未声明类型的变量\"></a>未声明类型的变量</h3><p>变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let something;</span><br><span class=\"line\">something = &apos;seven&apos;;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"任意值Any\"><a href=\"#任意值Any\" class=\"headerlink\" title=\"任意值Any\"></a>任意值Any</h3>","more":"<h3 id=\"任意值Any-1\"><a href=\"#任意值Any-1\" class=\"headerlink\" title=\"任意值Any\"></a>任意值Any</h3><p>任意值（Any）用来表示允许赋值为任意类型。<br>1.如果是一个普通类型，在赋值过程中改变类型是不被允许的。<br>2.如果是一个any类型,则允许被赋值为任意类型。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let myFavoriteNumber:any = &apos;seven&apos;;</span><br><span class=\"line\">myFavoriteNumber = 7;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"任意值的属性和方法\"><a href=\"#任意值的属性和方法\" class=\"headerlink\" title=\"任意值的属性和方法\"></a>任意值的属性和方法</h3><ol>\n<li>在任意值上访问任何属性都是允许的：</li>\n<li>也允许调用任何方法：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let anyThing: any = &apos;hello&apos;;</span><br><span class=\"line\">console.log(anyThing.myName);</span><br><span class=\"line\"></span><br><span class=\"line\">let anyThing: any = &apos;Tom&apos;;</span><br><span class=\"line\">anyThing.setName(&apos;Jerry&apos;);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"未声明类型的变量\"><a href=\"#未声明类型的变量\" class=\"headerlink\" title=\"未声明类型的变量\"></a>未声明类型的变量</h3><p>变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let something;</span><br><span class=\"line\">something = &apos;seven&apos;;</span><br></pre></td></tr></table></figure></p>"},{"title":"对象的类型——接口","date":"2019-03-09T01:27:54.000Z","_content":"### 对象的类型(interfacer)\n<!-- more -->\n\n### 什么是接口\n对行为的抽象，而具体如何行动需要由类去实现。TypeScript 中的接口是一个非常灵活的概念，除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状（Shape）」进行描述。\n```\n//定义接口\ninterface Person {\n    name:string;\n    age: number;\n}\n\n//定义一个变量，类型是Person。约束了 tom 的形状必须和接口 Person 一致。接口少了一些属性是不允许的，多一些属性也是不允许的。\nlet tom:Person = {\n    name: 'Tom',\n    age: 25\n}\n```\n\n### 可选属性\n有时不需要匹配所有的属性，可以用可选属性。定义属性key后面加? 如key?\n```\n//定义接口\ninterface Person {\n    name:string;\n    age？: number;\n}\n\n//这时仍然不允许添加未定义的属性：\nlet tom: Person = {\n    name: 'Tom'\n};\n```\n\n### 任意属性\n1.使用 [propName: string] 定义了任意属性取 string 类型的值。\n2.一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集，负责报错。\n\n```\ninterface Person {\n    name: string;\n    age?: number;\n    [propName: string]: any;\n}\n\nlet tom: Person = {\n    name: 'Tom',\n    gender: 'male'\n};\n```\n```\n//报错\ninterface Person {\n    name: string;\n    age?: number;\n    [propName: string]: string;\n}\n\nlet tom: Person = {\n    name: 'Tom',\n    age: 25,\n    gender: 'male'\n};\n```\n因为可选属性age的值是number,number 不是 string 的子属性，所以报错了。\n\n### 可读属性\n1.readonly 定义只读属性：\n2.注意，只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候：\n```\n//报错\ninterface Person {\n    readonly id: number;\n    name: string;\n    age?: number;\n    [propName: string]: any;\n}\n\nlet tom: Person = {\n    id: 89757,\n    name: 'Tom',\n    gender: 'male'\n};\n\ntom.id = 9527;\n```\n使用 readonly 定义的属性 id 初始化后，又被赋值了，所以报错了。\n\n```\ninterface Person {\n    readonly id: number;\n    name: string;\n    age?: number;\n    [propName: string]: any;\n}\n\nlet tom: Person = {\n    name: 'Tom',\n    gender: 'male'\n};\n\ntom.id = 89757;\n```\n报错如下：\n1. tom 进行赋值的时候，没有给 id 赋值。\n2.  tom.id 赋值的时候，由于它是只读属性","source":"_posts/4-ts-interfaces.md","raw":"---\ntitle: 对象的类型——接口\ndate: 2019-03-09 09:27:54\ntags: ['TypeScript']\ncategories: TypeScript\n---\n### 对象的类型(interfacer)\n<!-- more -->\n\n### 什么是接口\n对行为的抽象，而具体如何行动需要由类去实现。TypeScript 中的接口是一个非常灵活的概念，除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状（Shape）」进行描述。\n```\n//定义接口\ninterface Person {\n    name:string;\n    age: number;\n}\n\n//定义一个变量，类型是Person。约束了 tom 的形状必须和接口 Person 一致。接口少了一些属性是不允许的，多一些属性也是不允许的。\nlet tom:Person = {\n    name: 'Tom',\n    age: 25\n}\n```\n\n### 可选属性\n有时不需要匹配所有的属性，可以用可选属性。定义属性key后面加? 如key?\n```\n//定义接口\ninterface Person {\n    name:string;\n    age？: number;\n}\n\n//这时仍然不允许添加未定义的属性：\nlet tom: Person = {\n    name: 'Tom'\n};\n```\n\n### 任意属性\n1.使用 [propName: string] 定义了任意属性取 string 类型的值。\n2.一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集，负责报错。\n\n```\ninterface Person {\n    name: string;\n    age?: number;\n    [propName: string]: any;\n}\n\nlet tom: Person = {\n    name: 'Tom',\n    gender: 'male'\n};\n```\n```\n//报错\ninterface Person {\n    name: string;\n    age?: number;\n    [propName: string]: string;\n}\n\nlet tom: Person = {\n    name: 'Tom',\n    age: 25,\n    gender: 'male'\n};\n```\n因为可选属性age的值是number,number 不是 string 的子属性，所以报错了。\n\n### 可读属性\n1.readonly 定义只读属性：\n2.注意，只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候：\n```\n//报错\ninterface Person {\n    readonly id: number;\n    name: string;\n    age?: number;\n    [propName: string]: any;\n}\n\nlet tom: Person = {\n    id: 89757,\n    name: 'Tom',\n    gender: 'male'\n};\n\ntom.id = 9527;\n```\n使用 readonly 定义的属性 id 初始化后，又被赋值了，所以报错了。\n\n```\ninterface Person {\n    readonly id: number;\n    name: string;\n    age?: number;\n    [propName: string]: any;\n}\n\nlet tom: Person = {\n    name: 'Tom',\n    gender: 'male'\n};\n\ntom.id = 89757;\n```\n报错如下：\n1. tom 进行赋值的时候，没有给 id 赋值。\n2.  tom.id 赋值的时候，由于它是只读属性","slug":"4-ts-interfaces","published":1,"updated":"2019-03-09T01:48:13.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq41l000hhe6j1po2b8ih","content":"<h3 id=\"对象的类型-interfacer\"><a href=\"#对象的类型-interfacer\" class=\"headerlink\" title=\"对象的类型(interfacer)\"></a>对象的类型(interfacer)</h3><a id=\"more\"></a>\n<h3 id=\"什么是接口\"><a href=\"#什么是接口\" class=\"headerlink\" title=\"什么是接口\"></a>什么是接口</h3><p>对行为的抽象，而具体如何行动需要由类去实现。TypeScript 中的接口是一个非常灵活的概念，除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状（Shape）」进行描述。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义接口</span><br><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    name:string;</span><br><span class=\"line\">    age: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//定义一个变量，类型是Person。约束了 tom 的形状必须和接口 Person 一致。接口少了一些属性是不允许的，多一些属性也是不允许的。</span><br><span class=\"line\">let tom:Person = &#123;</span><br><span class=\"line\">    name: &apos;Tom&apos;,</span><br><span class=\"line\">    age: 25</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"可选属性\"><a href=\"#可选属性\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h3><p>有时不需要匹配所有的属性，可以用可选属性。定义属性key后面加? 如key?<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义接口</span><br><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    name:string;</span><br><span class=\"line\">    age？: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//这时仍然不允许添加未定义的属性：</span><br><span class=\"line\">let tom: Person = &#123;</span><br><span class=\"line\">    name: &apos;Tom&apos;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"任意属性\"><a href=\"#任意属性\" class=\"headerlink\" title=\"任意属性\"></a>任意属性</h3><p>1.使用 [propName: string] 定义了任意属性取 string 类型的值。<br>2.一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集，负责报错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    name: string;</span><br><span class=\"line\">    age?: number;</span><br><span class=\"line\">    [propName: string]: any;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let tom: Person = &#123;</span><br><span class=\"line\">    name: &apos;Tom&apos;,</span><br><span class=\"line\">    gender: &apos;male&apos;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//报错</span><br><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    name: string;</span><br><span class=\"line\">    age?: number;</span><br><span class=\"line\">    [propName: string]: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let tom: Person = &#123;</span><br><span class=\"line\">    name: &apos;Tom&apos;,</span><br><span class=\"line\">    age: 25,</span><br><span class=\"line\">    gender: &apos;male&apos;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>因为可选属性age的值是number,number 不是 string 的子属性，所以报错了。</p>\n<h3 id=\"可读属性\"><a href=\"#可读属性\" class=\"headerlink\" title=\"可读属性\"></a>可读属性</h3><p>1.readonly 定义只读属性：<br>2.注意，只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//报错</span><br><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    readonly id: number;</span><br><span class=\"line\">    name: string;</span><br><span class=\"line\">    age?: number;</span><br><span class=\"line\">    [propName: string]: any;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let tom: Person = &#123;</span><br><span class=\"line\">    id: 89757,</span><br><span class=\"line\">    name: &apos;Tom&apos;,</span><br><span class=\"line\">    gender: &apos;male&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">tom.id = 9527;</span><br></pre></td></tr></table></figure></p>\n<p>使用 readonly 定义的属性 id 初始化后，又被赋值了，所以报错了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    readonly id: number;</span><br><span class=\"line\">    name: string;</span><br><span class=\"line\">    age?: number;</span><br><span class=\"line\">    [propName: string]: any;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let tom: Person = &#123;</span><br><span class=\"line\">    name: &apos;Tom&apos;,</span><br><span class=\"line\">    gender: &apos;male&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">tom.id = 89757;</span><br></pre></td></tr></table></figure>\n<p>报错如下：</p>\n<ol>\n<li>tom 进行赋值的时候，没有给 id 赋值。</li>\n<li>tom.id 赋值的时候，由于它是只读属性</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"对象的类型-interfacer\"><a href=\"#对象的类型-interfacer\" class=\"headerlink\" title=\"对象的类型(interfacer)\"></a>对象的类型(interfacer)</h3>","more":"<h3 id=\"什么是接口\"><a href=\"#什么是接口\" class=\"headerlink\" title=\"什么是接口\"></a>什么是接口</h3><p>对行为的抽象，而具体如何行动需要由类去实现。TypeScript 中的接口是一个非常灵活的概念，除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状（Shape）」进行描述。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义接口</span><br><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    name:string;</span><br><span class=\"line\">    age: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//定义一个变量，类型是Person。约束了 tom 的形状必须和接口 Person 一致。接口少了一些属性是不允许的，多一些属性也是不允许的。</span><br><span class=\"line\">let tom:Person = &#123;</span><br><span class=\"line\">    name: &apos;Tom&apos;,</span><br><span class=\"line\">    age: 25</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"可选属性\"><a href=\"#可选属性\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h3><p>有时不需要匹配所有的属性，可以用可选属性。定义属性key后面加? 如key?<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义接口</span><br><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    name:string;</span><br><span class=\"line\">    age？: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//这时仍然不允许添加未定义的属性：</span><br><span class=\"line\">let tom: Person = &#123;</span><br><span class=\"line\">    name: &apos;Tom&apos;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"任意属性\"><a href=\"#任意属性\" class=\"headerlink\" title=\"任意属性\"></a>任意属性</h3><p>1.使用 [propName: string] 定义了任意属性取 string 类型的值。<br>2.一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集，负责报错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    name: string;</span><br><span class=\"line\">    age?: number;</span><br><span class=\"line\">    [propName: string]: any;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let tom: Person = &#123;</span><br><span class=\"line\">    name: &apos;Tom&apos;,</span><br><span class=\"line\">    gender: &apos;male&apos;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//报错</span><br><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    name: string;</span><br><span class=\"line\">    age?: number;</span><br><span class=\"line\">    [propName: string]: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let tom: Person = &#123;</span><br><span class=\"line\">    name: &apos;Tom&apos;,</span><br><span class=\"line\">    age: 25,</span><br><span class=\"line\">    gender: &apos;male&apos;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>因为可选属性age的值是number,number 不是 string 的子属性，所以报错了。</p>\n<h3 id=\"可读属性\"><a href=\"#可读属性\" class=\"headerlink\" title=\"可读属性\"></a>可读属性</h3><p>1.readonly 定义只读属性：<br>2.注意，只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//报错</span><br><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    readonly id: number;</span><br><span class=\"line\">    name: string;</span><br><span class=\"line\">    age?: number;</span><br><span class=\"line\">    [propName: string]: any;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let tom: Person = &#123;</span><br><span class=\"line\">    id: 89757,</span><br><span class=\"line\">    name: &apos;Tom&apos;,</span><br><span class=\"line\">    gender: &apos;male&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">tom.id = 9527;</span><br></pre></td></tr></table></figure></p>\n<p>使用 readonly 定义的属性 id 初始化后，又被赋值了，所以报错了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface Person &#123;</span><br><span class=\"line\">    readonly id: number;</span><br><span class=\"line\">    name: string;</span><br><span class=\"line\">    age?: number;</span><br><span class=\"line\">    [propName: string]: any;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let tom: Person = &#123;</span><br><span class=\"line\">    name: &apos;Tom&apos;,</span><br><span class=\"line\">    gender: &apos;male&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">tom.id = 89757;</span><br></pre></td></tr></table></figure>\n<p>报错如下：</p>\n<ol>\n<li>tom 进行赋值的时候，没有给 id 赋值。</li>\n<li>tom.id 赋值的时候，由于它是只读属性</li>\n</ol>"},{"title":"Node.js的数据存储","date":"2019-06-11T16:00:00.000Z","_content":"\n### Node.js的数据存储\n<!-- more -->\n\n### nodejs连接mysql\n下载：npm i mysql \n配置mysql的环境\n```\nconfig/db.js\n//环境参数\nconst env = process.env.NODE_ENV\n\n// 配置\nlet MYSQL_CONF\n\n/** \n *  通过进程获取环境变量，开发和线上不同环境到配置\n */\n\n //开发\nif (env === 'dev') {\n   // mysql\n    MYSQL_CONF = {\n\t\thost: '127.0.0.1',\n\t\tuser: 'root',\n\t\tpassword: '',\n\t\tport: '3306',\n\t\tdatabase: 'myblog'\n\t} \n}\n\n//线上\nif (env === 'production') {\n    // mysql\n\tMYSQL_CONF = {\n\t\thost: '127.0.0.1',\n\t\tuser: 'root',\n\t\tpassword: '',\n\t\tport: '3306',\n\t\tdatabase: 'myblog'\n\t}\n}\n\nmodule.exports = {\n    MYSQL_CONF,\n}\n```\n对mysql进行promise封装处理\n```\nmysql.js\n\nconst mysql = require('mysql');\nconst { MYSQL_CONF }  = require('../config/db');\n\nconst con = mysql.createConnection(MYSQL_CONF)\n\n//开始连接\ncon.connect()\n\n//统一执行sql的函数\nfunction exec(sql) {\n    const promise = new Promise((resolve,reject) => {\n        con.query(sql,(err,result) => {\n            if (err) {\n                reject(err)\n                return\n            }\n            resolve(result)\n        })\n    })\n\n    return promise\n}\n\nmodule.exports = {\n    exec\n}\n```\n\n### cookie和session\n#### 什么是cookie\n1. 存储在浏览器的一段字符串（最大5kb）\n2. 跨域不共享\n3. 格式如k1=v1，因此可以存储结构化数据\n4. 每次发送http请求，会将请求域的cookie一起发送给server\n5. server可以修改cookie并返回给浏览器\n6. 浏览器中也可以通过js修改cookie（有限制）\n\n#### js操作cookie，浏览器中查看cookie\n1. Network的Request Headers\n2. Application\n3. document.cookie\n\n#### serve端操作cookie，实现登录验证\n1. 查看cookie\n2. 修改cookie\n3. 实现登录验证\n\n#### session的问题\n1. 进程内存有限，访问量过大，内存暴增怎么办？\n2. 正式线上是多进程，进程之间内存无法共享\n\n#### redis\n1. web server最常用的缓存数据库，数据存放在内存中\n2. 相比于mysql，访问速度快（内存和硬盘不是一个数量级的）\n3. 但是成本更高，可存储的数据量更小（内存的硬伤）\n```\n下载：brew install redis\n启动：redis-server\n主机域和端口：redis-cli\n设置redis：set name value\n获取redis：get name\n查看redis：keys *\n删除redis：del name\n```\n\n\n### nginx反向代理\n> 用到nginx做代理，让前后端同域\n![image](/images/nginx.png)\n#### 介绍\n1. 高性能的web服务器，开源免费\n2. 一般用于做静态服务，负载均衡\n3. 反向代理\n\n#### 安装配置\n1. Mac: brew install nginx\n2. Mac: /usr/local/etc/nginx/nginx.conf\n3. 测试配置文件格式是否正确 nginx -t\n4. 启动 nginx，重启 nginx -s reload\n5. 停止 nginx -s stop\n```\n//打开配置文件\nsudo vi /usr/local/etc/nginx/nginx.conf\n\n//nginx反向代理的配置，本地服务\nlocation / {\n    proxy_pass http://localhost:8081;\n}\n\n//nginx反向代理的配置，接口地址\nlocation /api/ {\n    proxy_pass http://localhost:8000;\n    proxy_set_header Host $host;\n}\n```\n\n### 安全\n1. sql注入：窃取数据库内容\n2. XSS攻击：窃取前端的cookie内容\n3. 密码加密：保障用户信息安全\n","source":"_posts/Node-tool.md","raw":"---\ntitle: Node.js的数据存储\ndate: 2019-06-12\ntags: ['Node.js']\ncategories: Node.js\n---\n\n### Node.js的数据存储\n<!-- more -->\n\n### nodejs连接mysql\n下载：npm i mysql \n配置mysql的环境\n```\nconfig/db.js\n//环境参数\nconst env = process.env.NODE_ENV\n\n// 配置\nlet MYSQL_CONF\n\n/** \n *  通过进程获取环境变量，开发和线上不同环境到配置\n */\n\n //开发\nif (env === 'dev') {\n   // mysql\n    MYSQL_CONF = {\n\t\thost: '127.0.0.1',\n\t\tuser: 'root',\n\t\tpassword: '',\n\t\tport: '3306',\n\t\tdatabase: 'myblog'\n\t} \n}\n\n//线上\nif (env === 'production') {\n    // mysql\n\tMYSQL_CONF = {\n\t\thost: '127.0.0.1',\n\t\tuser: 'root',\n\t\tpassword: '',\n\t\tport: '3306',\n\t\tdatabase: 'myblog'\n\t}\n}\n\nmodule.exports = {\n    MYSQL_CONF,\n}\n```\n对mysql进行promise封装处理\n```\nmysql.js\n\nconst mysql = require('mysql');\nconst { MYSQL_CONF }  = require('../config/db');\n\nconst con = mysql.createConnection(MYSQL_CONF)\n\n//开始连接\ncon.connect()\n\n//统一执行sql的函数\nfunction exec(sql) {\n    const promise = new Promise((resolve,reject) => {\n        con.query(sql,(err,result) => {\n            if (err) {\n                reject(err)\n                return\n            }\n            resolve(result)\n        })\n    })\n\n    return promise\n}\n\nmodule.exports = {\n    exec\n}\n```\n\n### cookie和session\n#### 什么是cookie\n1. 存储在浏览器的一段字符串（最大5kb）\n2. 跨域不共享\n3. 格式如k1=v1，因此可以存储结构化数据\n4. 每次发送http请求，会将请求域的cookie一起发送给server\n5. server可以修改cookie并返回给浏览器\n6. 浏览器中也可以通过js修改cookie（有限制）\n\n#### js操作cookie，浏览器中查看cookie\n1. Network的Request Headers\n2. Application\n3. document.cookie\n\n#### serve端操作cookie，实现登录验证\n1. 查看cookie\n2. 修改cookie\n3. 实现登录验证\n\n#### session的问题\n1. 进程内存有限，访问量过大，内存暴增怎么办？\n2. 正式线上是多进程，进程之间内存无法共享\n\n#### redis\n1. web server最常用的缓存数据库，数据存放在内存中\n2. 相比于mysql，访问速度快（内存和硬盘不是一个数量级的）\n3. 但是成本更高，可存储的数据量更小（内存的硬伤）\n```\n下载：brew install redis\n启动：redis-server\n主机域和端口：redis-cli\n设置redis：set name value\n获取redis：get name\n查看redis：keys *\n删除redis：del name\n```\n\n\n### nginx反向代理\n> 用到nginx做代理，让前后端同域\n![image](/images/nginx.png)\n#### 介绍\n1. 高性能的web服务器，开源免费\n2. 一般用于做静态服务，负载均衡\n3. 反向代理\n\n#### 安装配置\n1. Mac: brew install nginx\n2. Mac: /usr/local/etc/nginx/nginx.conf\n3. 测试配置文件格式是否正确 nginx -t\n4. 启动 nginx，重启 nginx -s reload\n5. 停止 nginx -s stop\n```\n//打开配置文件\nsudo vi /usr/local/etc/nginx/nginx.conf\n\n//nginx反向代理的配置，本地服务\nlocation / {\n    proxy_pass http://localhost:8081;\n}\n\n//nginx反向代理的配置，接口地址\nlocation /api/ {\n    proxy_pass http://localhost:8000;\n    proxy_set_header Host $host;\n}\n```\n\n### 安全\n1. sql注入：窃取数据库内容\n2. XSS攻击：窃取前端的cookie内容\n3. 密码加密：保障用户信息安全\n","slug":"Node-tool","published":1,"updated":"2019-06-15T04:15:33.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq41m000khe6jeb0xm7s5","content":"<h3 id=\"Node-js的数据存储\"><a href=\"#Node-js的数据存储\" class=\"headerlink\" title=\"Node.js的数据存储\"></a>Node.js的数据存储</h3><a id=\"more\"></a>\n<h3 id=\"nodejs连接mysql\"><a href=\"#nodejs连接mysql\" class=\"headerlink\" title=\"nodejs连接mysql\"></a>nodejs连接mysql</h3><p>下载：npm i mysql<br>配置mysql的环境<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config/db.js</span><br><span class=\"line\">//环境参数</span><br><span class=\"line\">const env = process.env.NODE_ENV</span><br><span class=\"line\"></span><br><span class=\"line\">// 配置</span><br><span class=\"line\">let MYSQL_CONF</span><br><span class=\"line\"></span><br><span class=\"line\">/** </span><br><span class=\"line\"> *  通过进程获取环境变量，开发和线上不同环境到配置</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\"> //开发</span><br><span class=\"line\">if (env === &apos;dev&apos;) &#123;</span><br><span class=\"line\">   // mysql</span><br><span class=\"line\">    MYSQL_CONF = &#123;</span><br><span class=\"line\">\t\thost: &apos;127.0.0.1&apos;,</span><br><span class=\"line\">\t\tuser: &apos;root&apos;,</span><br><span class=\"line\">\t\tpassword: &apos;&apos;,</span><br><span class=\"line\">\t\tport: &apos;3306&apos;,</span><br><span class=\"line\">\t\tdatabase: &apos;myblog&apos;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//线上</span><br><span class=\"line\">if (env === &apos;production&apos;) &#123;</span><br><span class=\"line\">    // mysql</span><br><span class=\"line\">\tMYSQL_CONF = &#123;</span><br><span class=\"line\">\t\thost: &apos;127.0.0.1&apos;,</span><br><span class=\"line\">\t\tuser: &apos;root&apos;,</span><br><span class=\"line\">\t\tpassword: &apos;&apos;,</span><br><span class=\"line\">\t\tport: &apos;3306&apos;,</span><br><span class=\"line\">\t\tdatabase: &apos;myblog&apos;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    MYSQL_CONF,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对mysql进行promise封装处理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql.js</span><br><span class=\"line\"></span><br><span class=\"line\">const mysql = require(&apos;mysql&apos;);</span><br><span class=\"line\">const &#123; MYSQL_CONF &#125;  = require(&apos;../config/db&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">const con = mysql.createConnection(MYSQL_CONF)</span><br><span class=\"line\"></span><br><span class=\"line\">//开始连接</span><br><span class=\"line\">con.connect()</span><br><span class=\"line\"></span><br><span class=\"line\">//统一执行sql的函数</span><br><span class=\"line\">function exec(sql) &#123;</span><br><span class=\"line\">    const promise = new Promise((resolve,reject) =&gt; &#123;</span><br><span class=\"line\">        con.query(sql,(err,result) =&gt; &#123;</span><br><span class=\"line\">            if (err) &#123;</span><br><span class=\"line\">                reject(err)</span><br><span class=\"line\">                return</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            resolve(result)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    return promise</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    exec</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"cookie和session\"><a href=\"#cookie和session\" class=\"headerlink\" title=\"cookie和session\"></a>cookie和session</h3><h4 id=\"什么是cookie\"><a href=\"#什么是cookie\" class=\"headerlink\" title=\"什么是cookie\"></a>什么是cookie</h4><ol>\n<li>存储在浏览器的一段字符串（最大5kb）</li>\n<li>跨域不共享</li>\n<li>格式如k1=v1，因此可以存储结构化数据</li>\n<li>每次发送http请求，会将请求域的cookie一起发送给server</li>\n<li>server可以修改cookie并返回给浏览器</li>\n<li>浏览器中也可以通过js修改cookie（有限制）</li>\n</ol>\n<h4 id=\"js操作cookie，浏览器中查看cookie\"><a href=\"#js操作cookie，浏览器中查看cookie\" class=\"headerlink\" title=\"js操作cookie，浏览器中查看cookie\"></a>js操作cookie，浏览器中查看cookie</h4><ol>\n<li>Network的Request Headers</li>\n<li>Application</li>\n<li>document.cookie</li>\n</ol>\n<h4 id=\"serve端操作cookie，实现登录验证\"><a href=\"#serve端操作cookie，实现登录验证\" class=\"headerlink\" title=\"serve端操作cookie，实现登录验证\"></a>serve端操作cookie，实现登录验证</h4><ol>\n<li>查看cookie</li>\n<li>修改cookie</li>\n<li>实现登录验证</li>\n</ol>\n<h4 id=\"session的问题\"><a href=\"#session的问题\" class=\"headerlink\" title=\"session的问题\"></a>session的问题</h4><ol>\n<li>进程内存有限，访问量过大，内存暴增怎么办？</li>\n<li>正式线上是多进程，进程之间内存无法共享</li>\n</ol>\n<h4 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h4><ol>\n<li>web server最常用的缓存数据库，数据存放在内存中</li>\n<li>相比于mysql，访问速度快（内存和硬盘不是一个数量级的）</li>\n<li>但是成本更高，可存储的数据量更小（内存的硬伤）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载：brew install redis</span><br><span class=\"line\">启动：redis-server</span><br><span class=\"line\">主机域和端口：redis-cli</span><br><span class=\"line\">设置redis：set name value</span><br><span class=\"line\">获取redis：get name</span><br><span class=\"line\">查看redis：keys *</span><br><span class=\"line\">删除redis：del name</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"nginx反向代理\"><a href=\"#nginx反向代理\" class=\"headerlink\" title=\"nginx反向代理\"></a>nginx反向代理</h3><blockquote>\n<p>用到nginx做代理，让前后端同域<br><img src=\"/images/nginx.png\" alt=\"image\"></p>\n</blockquote>\n<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><ol>\n<li>高性能的web服务器，开源免费</li>\n<li>一般用于做静态服务，负载均衡</li>\n<li>反向代理</li>\n</ol>\n<h4 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h4><ol>\n<li>Mac: brew install nginx</li>\n<li>Mac: /usr/local/etc/nginx/nginx.conf</li>\n<li>测试配置文件格式是否正确 nginx -t</li>\n<li>启动 nginx，重启 nginx -s reload</li>\n<li>停止 nginx -s stop<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//打开配置文件</span><br><span class=\"line\">sudo vi /usr/local/etc/nginx/nginx.conf</span><br><span class=\"line\"></span><br><span class=\"line\">//nginx反向代理的配置，本地服务</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">    proxy_pass http://localhost:8081;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//nginx反向代理的配置，接口地址</span><br><span class=\"line\">location /api/ &#123;</span><br><span class=\"line\">    proxy_pass http://localhost:8000;</span><br><span class=\"line\">    proxy_set_header Host $host;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h3><ol>\n<li>sql注入：窃取数据库内容</li>\n<li>XSS攻击：窃取前端的cookie内容</li>\n<li>密码加密：保障用户信息安全</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"Node-js的数据存储\"><a href=\"#Node-js的数据存储\" class=\"headerlink\" title=\"Node.js的数据存储\"></a>Node.js的数据存储</h3>","more":"<h3 id=\"nodejs连接mysql\"><a href=\"#nodejs连接mysql\" class=\"headerlink\" title=\"nodejs连接mysql\"></a>nodejs连接mysql</h3><p>下载：npm i mysql<br>配置mysql的环境<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config/db.js</span><br><span class=\"line\">//环境参数</span><br><span class=\"line\">const env = process.env.NODE_ENV</span><br><span class=\"line\"></span><br><span class=\"line\">// 配置</span><br><span class=\"line\">let MYSQL_CONF</span><br><span class=\"line\"></span><br><span class=\"line\">/** </span><br><span class=\"line\"> *  通过进程获取环境变量，开发和线上不同环境到配置</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\"> //开发</span><br><span class=\"line\">if (env === &apos;dev&apos;) &#123;</span><br><span class=\"line\">   // mysql</span><br><span class=\"line\">    MYSQL_CONF = &#123;</span><br><span class=\"line\">\t\thost: &apos;127.0.0.1&apos;,</span><br><span class=\"line\">\t\tuser: &apos;root&apos;,</span><br><span class=\"line\">\t\tpassword: &apos;&apos;,</span><br><span class=\"line\">\t\tport: &apos;3306&apos;,</span><br><span class=\"line\">\t\tdatabase: &apos;myblog&apos;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//线上</span><br><span class=\"line\">if (env === &apos;production&apos;) &#123;</span><br><span class=\"line\">    // mysql</span><br><span class=\"line\">\tMYSQL_CONF = &#123;</span><br><span class=\"line\">\t\thost: &apos;127.0.0.1&apos;,</span><br><span class=\"line\">\t\tuser: &apos;root&apos;,</span><br><span class=\"line\">\t\tpassword: &apos;&apos;,</span><br><span class=\"line\">\t\tport: &apos;3306&apos;,</span><br><span class=\"line\">\t\tdatabase: &apos;myblog&apos;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    MYSQL_CONF,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>对mysql进行promise封装处理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql.js</span><br><span class=\"line\"></span><br><span class=\"line\">const mysql = require(&apos;mysql&apos;);</span><br><span class=\"line\">const &#123; MYSQL_CONF &#125;  = require(&apos;../config/db&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">const con = mysql.createConnection(MYSQL_CONF)</span><br><span class=\"line\"></span><br><span class=\"line\">//开始连接</span><br><span class=\"line\">con.connect()</span><br><span class=\"line\"></span><br><span class=\"line\">//统一执行sql的函数</span><br><span class=\"line\">function exec(sql) &#123;</span><br><span class=\"line\">    const promise = new Promise((resolve,reject) =&gt; &#123;</span><br><span class=\"line\">        con.query(sql,(err,result) =&gt; &#123;</span><br><span class=\"line\">            if (err) &#123;</span><br><span class=\"line\">                reject(err)</span><br><span class=\"line\">                return</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            resolve(result)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    return promise</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    exec</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"cookie和session\"><a href=\"#cookie和session\" class=\"headerlink\" title=\"cookie和session\"></a>cookie和session</h3><h4 id=\"什么是cookie\"><a href=\"#什么是cookie\" class=\"headerlink\" title=\"什么是cookie\"></a>什么是cookie</h4><ol>\n<li>存储在浏览器的一段字符串（最大5kb）</li>\n<li>跨域不共享</li>\n<li>格式如k1=v1，因此可以存储结构化数据</li>\n<li>每次发送http请求，会将请求域的cookie一起发送给server</li>\n<li>server可以修改cookie并返回给浏览器</li>\n<li>浏览器中也可以通过js修改cookie（有限制）</li>\n</ol>\n<h4 id=\"js操作cookie，浏览器中查看cookie\"><a href=\"#js操作cookie，浏览器中查看cookie\" class=\"headerlink\" title=\"js操作cookie，浏览器中查看cookie\"></a>js操作cookie，浏览器中查看cookie</h4><ol>\n<li>Network的Request Headers</li>\n<li>Application</li>\n<li>document.cookie</li>\n</ol>\n<h4 id=\"serve端操作cookie，实现登录验证\"><a href=\"#serve端操作cookie，实现登录验证\" class=\"headerlink\" title=\"serve端操作cookie，实现登录验证\"></a>serve端操作cookie，实现登录验证</h4><ol>\n<li>查看cookie</li>\n<li>修改cookie</li>\n<li>实现登录验证</li>\n</ol>\n<h4 id=\"session的问题\"><a href=\"#session的问题\" class=\"headerlink\" title=\"session的问题\"></a>session的问题</h4><ol>\n<li>进程内存有限，访问量过大，内存暴增怎么办？</li>\n<li>正式线上是多进程，进程之间内存无法共享</li>\n</ol>\n<h4 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h4><ol>\n<li>web server最常用的缓存数据库，数据存放在内存中</li>\n<li>相比于mysql，访问速度快（内存和硬盘不是一个数量级的）</li>\n<li>但是成本更高，可存储的数据量更小（内存的硬伤）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载：brew install redis</span><br><span class=\"line\">启动：redis-server</span><br><span class=\"line\">主机域和端口：redis-cli</span><br><span class=\"line\">设置redis：set name value</span><br><span class=\"line\">获取redis：get name</span><br><span class=\"line\">查看redis：keys *</span><br><span class=\"line\">删除redis：del name</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"nginx反向代理\"><a href=\"#nginx反向代理\" class=\"headerlink\" title=\"nginx反向代理\"></a>nginx反向代理</h3><blockquote>\n<p>用到nginx做代理，让前后端同域<br><img src=\"/images/nginx.png\" alt=\"image\"></p>\n</blockquote>\n<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><ol>\n<li>高性能的web服务器，开源免费</li>\n<li>一般用于做静态服务，负载均衡</li>\n<li>反向代理</li>\n</ol>\n<h4 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h4><ol>\n<li>Mac: brew install nginx</li>\n<li>Mac: /usr/local/etc/nginx/nginx.conf</li>\n<li>测试配置文件格式是否正确 nginx -t</li>\n<li>启动 nginx，重启 nginx -s reload</li>\n<li>停止 nginx -s stop<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//打开配置文件</span><br><span class=\"line\">sudo vi /usr/local/etc/nginx/nginx.conf</span><br><span class=\"line\"></span><br><span class=\"line\">//nginx反向代理的配置，本地服务</span><br><span class=\"line\">location / &#123;</span><br><span class=\"line\">    proxy_pass http://localhost:8081;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//nginx反向代理的配置，接口地址</span><br><span class=\"line\">location /api/ &#123;</span><br><span class=\"line\">    proxy_pass http://localhost:8000;</span><br><span class=\"line\">    proxy_set_header Host $host;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h3><ol>\n<li>sql注入：窃取数据库内容</li>\n<li>XSS攻击：窃取前端的cookie内容</li>\n<li>密码加密：保障用户信息安全</li>\n</ol>"},{"title":"PM2","date":"2019-06-14T16:00:00.000Z","_content":"\n### PM2\n<!-- more -->\n\n### 客户端和服务端\n![image](/images/node-serve.png)\n\n### 线上环境\n1. 服务器稳定性\n2. 充分利用服务器硬件资源，以便提高性能\n3. 线上日志记录\n\n#### PM2核心价值\n1. 进程守护，系统崩溃自动重启\n2. 启动多进程，充分利用CPU和内存\n3. 自带日志记录功能\n\n#### PM2介绍\n1. 下载安装\n\n```\n全局安装\nnpm i pm2 -g \n\n查看版本\npm2 --version\n\n查看控制台启动的列表\npm2 list\n\n重启 使用文件名或id\npm2 resstart <AppName>/<id>\n\n停止\npm2 stop <AppName>/<id>\n\n删除\npm2 delete <AppName>/<id>\n\n查看基本信息\npm2 info <AppName>/<id>\n\n查看进程日志\npm2 log <AppName>/<id>\n\n监控CPU和内存信息\npm2 monit <AppName>/<id>\n```\n\n2. 基本使用\n\n```\npackage.json\n\npm2启动项目里的app.js文件，如果是express和koa2 则为bin/www\n\"prd\": \"cross-env NODE_ENV==product pm2 start app.js\"\n```\n\n#### PM2进程守护和配置\n1. 遇到进程崩溃，会自动重启\n\n2. 新建PM2配置文件\n\n```\npm2.conf.json\n\n{\n  \"apps\": {\n    \"name\": \"pm2-test-server\", //名字随便写\n    \"script\": \"app.js\", //启动文件，express是bin/www\n    \"watch\": true, //监听文件变化，自动重启\n    \"ignore-watch\": [\n      \"node_modules\",\n      \"logs\"\n    ], //不需要监听的文件\n    \"instances\": 4, //电脑的CPU\n    \"error_file\": \"logs/err.log\", //错误日志的路径\n    \"out_file\": \"logs/out.log\", //console.log打印\n    \"log-date-format\": \"YYYY-MM-DD HH:mm:ss\", //日志每行都标志时间\n  }\n}\n\npackage.json\n\"prd\": \"cross-env NODE_ENV==product pm2 start pm2.conf.json\"\n```\n\n#### PM2多进程\n1. 为何使用多进程\n单个进程的内存是受限的\n\n2. 多进程和redis\n多进程之间，内存无法共享\n多进程访问一个redis，实现数据共享","source":"_posts/PM2.md","raw":"---\ntitle: PM2\ndate: 2019-06-15\ntags: ['Node.js']\ncategories: Node.js\n---\n\n### PM2\n<!-- more -->\n\n### 客户端和服务端\n![image](/images/node-serve.png)\n\n### 线上环境\n1. 服务器稳定性\n2. 充分利用服务器硬件资源，以便提高性能\n3. 线上日志记录\n\n#### PM2核心价值\n1. 进程守护，系统崩溃自动重启\n2. 启动多进程，充分利用CPU和内存\n3. 自带日志记录功能\n\n#### PM2介绍\n1. 下载安装\n\n```\n全局安装\nnpm i pm2 -g \n\n查看版本\npm2 --version\n\n查看控制台启动的列表\npm2 list\n\n重启 使用文件名或id\npm2 resstart <AppName>/<id>\n\n停止\npm2 stop <AppName>/<id>\n\n删除\npm2 delete <AppName>/<id>\n\n查看基本信息\npm2 info <AppName>/<id>\n\n查看进程日志\npm2 log <AppName>/<id>\n\n监控CPU和内存信息\npm2 monit <AppName>/<id>\n```\n\n2. 基本使用\n\n```\npackage.json\n\npm2启动项目里的app.js文件，如果是express和koa2 则为bin/www\n\"prd\": \"cross-env NODE_ENV==product pm2 start app.js\"\n```\n\n#### PM2进程守护和配置\n1. 遇到进程崩溃，会自动重启\n\n2. 新建PM2配置文件\n\n```\npm2.conf.json\n\n{\n  \"apps\": {\n    \"name\": \"pm2-test-server\", //名字随便写\n    \"script\": \"app.js\", //启动文件，express是bin/www\n    \"watch\": true, //监听文件变化，自动重启\n    \"ignore-watch\": [\n      \"node_modules\",\n      \"logs\"\n    ], //不需要监听的文件\n    \"instances\": 4, //电脑的CPU\n    \"error_file\": \"logs/err.log\", //错误日志的路径\n    \"out_file\": \"logs/out.log\", //console.log打印\n    \"log-date-format\": \"YYYY-MM-DD HH:mm:ss\", //日志每行都标志时间\n  }\n}\n\npackage.json\n\"prd\": \"cross-env NODE_ENV==product pm2 start pm2.conf.json\"\n```\n\n#### PM2多进程\n1. 为何使用多进程\n单个进程的内存是受限的\n\n2. 多进程和redis\n多进程之间，内存无法共享\n多进程访问一个redis，实现数据共享","slug":"PM2","published":1,"updated":"2019-06-15T04:20:55.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq41r000phe6jnlo7ayd6","content":"<h3 id=\"PM2\"><a href=\"#PM2\" class=\"headerlink\" title=\"PM2\"></a>PM2</h3><a id=\"more\"></a>\n<h3 id=\"客户端和服务端\"><a href=\"#客户端和服务端\" class=\"headerlink\" title=\"客户端和服务端\"></a>客户端和服务端</h3><p><img src=\"/images/node-serve.png\" alt=\"image\"></p>\n<h3 id=\"线上环境\"><a href=\"#线上环境\" class=\"headerlink\" title=\"线上环境\"></a>线上环境</h3><ol>\n<li>服务器稳定性</li>\n<li>充分利用服务器硬件资源，以便提高性能</li>\n<li>线上日志记录</li>\n</ol>\n<h4 id=\"PM2核心价值\"><a href=\"#PM2核心价值\" class=\"headerlink\" title=\"PM2核心价值\"></a>PM2核心价值</h4><ol>\n<li>进程守护，系统崩溃自动重启</li>\n<li>启动多进程，充分利用CPU和内存</li>\n<li>自带日志记录功能</li>\n</ol>\n<h4 id=\"PM2介绍\"><a href=\"#PM2介绍\" class=\"headerlink\" title=\"PM2介绍\"></a>PM2介绍</h4><ol>\n<li>下载安装</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局安装</span><br><span class=\"line\">npm i pm2 -g </span><br><span class=\"line\"></span><br><span class=\"line\">查看版本</span><br><span class=\"line\">pm2 --version</span><br><span class=\"line\"></span><br><span class=\"line\">查看控制台启动的列表</span><br><span class=\"line\">pm2 list</span><br><span class=\"line\"></span><br><span class=\"line\">重启 使用文件名或id</span><br><span class=\"line\">pm2 resstart &lt;AppName&gt;/&lt;id&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">停止</span><br><span class=\"line\">pm2 stop &lt;AppName&gt;/&lt;id&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">删除</span><br><span class=\"line\">pm2 delete &lt;AppName&gt;/&lt;id&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">查看基本信息</span><br><span class=\"line\">pm2 info &lt;AppName&gt;/&lt;id&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">查看进程日志</span><br><span class=\"line\">pm2 log &lt;AppName&gt;/&lt;id&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">监控CPU和内存信息</span><br><span class=\"line\">pm2 monit &lt;AppName&gt;/&lt;id&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>基本使用</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package.json</span><br><span class=\"line\"></span><br><span class=\"line\">pm2启动项目里的app.js文件，如果是express和koa2 则为bin/www</span><br><span class=\"line\">&quot;prd&quot;: &quot;cross-env NODE_ENV==product pm2 start app.js&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"PM2进程守护和配置\"><a href=\"#PM2进程守护和配置\" class=\"headerlink\" title=\"PM2进程守护和配置\"></a>PM2进程守护和配置</h4><ol>\n<li><p>遇到进程崩溃，会自动重启</p>\n</li>\n<li><p>新建PM2配置文件</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2.conf.json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;apps&quot;: &#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;pm2-test-server&quot;, //名字随便写</span><br><span class=\"line\">    &quot;script&quot;: &quot;app.js&quot;, //启动文件，express是bin/www</span><br><span class=\"line\">    &quot;watch&quot;: true, //监听文件变化，自动重启</span><br><span class=\"line\">    &quot;ignore-watch&quot;: [</span><br><span class=\"line\">      &quot;node_modules&quot;,</span><br><span class=\"line\">      &quot;logs&quot;</span><br><span class=\"line\">    ], //不需要监听的文件</span><br><span class=\"line\">    &quot;instances&quot;: 4, //电脑的CPU</span><br><span class=\"line\">    &quot;error_file&quot;: &quot;logs/err.log&quot;, //错误日志的路径</span><br><span class=\"line\">    &quot;out_file&quot;: &quot;logs/out.log&quot;, //console.log打印</span><br><span class=\"line\">    &quot;log-date-format&quot;: &quot;YYYY-MM-DD HH:mm:ss&quot;, //日志每行都标志时间</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">package.json</span><br><span class=\"line\">&quot;prd&quot;: &quot;cross-env NODE_ENV==product pm2 start pm2.conf.json&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"PM2多进程\"><a href=\"#PM2多进程\" class=\"headerlink\" title=\"PM2多进程\"></a>PM2多进程</h4><ol>\n<li><p>为何使用多进程<br>单个进程的内存是受限的</p>\n</li>\n<li><p>多进程和redis<br>多进程之间，内存无法共享<br>多进程访问一个redis，实现数据共享</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"PM2\"><a href=\"#PM2\" class=\"headerlink\" title=\"PM2\"></a>PM2</h3>","more":"<h3 id=\"客户端和服务端\"><a href=\"#客户端和服务端\" class=\"headerlink\" title=\"客户端和服务端\"></a>客户端和服务端</h3><p><img src=\"/images/node-serve.png\" alt=\"image\"></p>\n<h3 id=\"线上环境\"><a href=\"#线上环境\" class=\"headerlink\" title=\"线上环境\"></a>线上环境</h3><ol>\n<li>服务器稳定性</li>\n<li>充分利用服务器硬件资源，以便提高性能</li>\n<li>线上日志记录</li>\n</ol>\n<h4 id=\"PM2核心价值\"><a href=\"#PM2核心价值\" class=\"headerlink\" title=\"PM2核心价值\"></a>PM2核心价值</h4><ol>\n<li>进程守护，系统崩溃自动重启</li>\n<li>启动多进程，充分利用CPU和内存</li>\n<li>自带日志记录功能</li>\n</ol>\n<h4 id=\"PM2介绍\"><a href=\"#PM2介绍\" class=\"headerlink\" title=\"PM2介绍\"></a>PM2介绍</h4><ol>\n<li>下载安装</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局安装</span><br><span class=\"line\">npm i pm2 -g </span><br><span class=\"line\"></span><br><span class=\"line\">查看版本</span><br><span class=\"line\">pm2 --version</span><br><span class=\"line\"></span><br><span class=\"line\">查看控制台启动的列表</span><br><span class=\"line\">pm2 list</span><br><span class=\"line\"></span><br><span class=\"line\">重启 使用文件名或id</span><br><span class=\"line\">pm2 resstart &lt;AppName&gt;/&lt;id&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">停止</span><br><span class=\"line\">pm2 stop &lt;AppName&gt;/&lt;id&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">删除</span><br><span class=\"line\">pm2 delete &lt;AppName&gt;/&lt;id&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">查看基本信息</span><br><span class=\"line\">pm2 info &lt;AppName&gt;/&lt;id&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">查看进程日志</span><br><span class=\"line\">pm2 log &lt;AppName&gt;/&lt;id&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">监控CPU和内存信息</span><br><span class=\"line\">pm2 monit &lt;AppName&gt;/&lt;id&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>基本使用</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package.json</span><br><span class=\"line\"></span><br><span class=\"line\">pm2启动项目里的app.js文件，如果是express和koa2 则为bin/www</span><br><span class=\"line\">&quot;prd&quot;: &quot;cross-env NODE_ENV==product pm2 start app.js&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"PM2进程守护和配置\"><a href=\"#PM2进程守护和配置\" class=\"headerlink\" title=\"PM2进程守护和配置\"></a>PM2进程守护和配置</h4><ol>\n<li><p>遇到进程崩溃，会自动重启</p>\n</li>\n<li><p>新建PM2配置文件</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2.conf.json</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;apps&quot;: &#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;pm2-test-server&quot;, //名字随便写</span><br><span class=\"line\">    &quot;script&quot;: &quot;app.js&quot;, //启动文件，express是bin/www</span><br><span class=\"line\">    &quot;watch&quot;: true, //监听文件变化，自动重启</span><br><span class=\"line\">    &quot;ignore-watch&quot;: [</span><br><span class=\"line\">      &quot;node_modules&quot;,</span><br><span class=\"line\">      &quot;logs&quot;</span><br><span class=\"line\">    ], //不需要监听的文件</span><br><span class=\"line\">    &quot;instances&quot;: 4, //电脑的CPU</span><br><span class=\"line\">    &quot;error_file&quot;: &quot;logs/err.log&quot;, //错误日志的路径</span><br><span class=\"line\">    &quot;out_file&quot;: &quot;logs/out.log&quot;, //console.log打印</span><br><span class=\"line\">    &quot;log-date-format&quot;: &quot;YYYY-MM-DD HH:mm:ss&quot;, //日志每行都标志时间</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">package.json</span><br><span class=\"line\">&quot;prd&quot;: &quot;cross-env NODE_ENV==product pm2 start pm2.conf.json&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"PM2多进程\"><a href=\"#PM2多进程\" class=\"headerlink\" title=\"PM2多进程\"></a>PM2多进程</h4><ol>\n<li><p>为何使用多进程<br>单个进程的内存是受限的</p>\n</li>\n<li><p>多进程和redis<br>多进程之间，内存无法共享<br>多进程访问一个redis，实现数据共享</p>\n</li>\n</ol>"},{"title":"JavaScript 的 async/await","date":"2018-12-27T16:00:00.000Z","_content":"\n\n\n### 什么是async、await\n<!-- more -->\n\nasync 是“异步”的简写，而 await 可以认为是 async wait 的简写。所以应该很好理解 async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。\n\n### async\n1.async用法，它作为一个关键字放到函数前面，用于表示函数是一个异步函数，因为async就是异步的意思， 异步函数也就意味着该函数的执行不会阻塞后面代码的执行。 写一个async 函数\n```\nasync function test() {\n    return \"hello world\"\n}\n```\n2.语法就是在函数前面加上async关键字，用来表示它是异步的，怎么调用呢？async 函数也是函数，平时我们怎么使用函数就怎么使用它，直接加括号调用就可以了，为了表示它没有阻塞它后面代码的执行。\n```\nconsole.log(test())\n//输出的是一个Promisea对象\n\nPromise\n__proto__: Promise\n[[PromiseStatus]]: \"resolved\"\n[[PromiseValue]]: \"hell\"\n```\n\n3.async 函数返回的是一个 Promise 对象。从文档中也可以得到这个信息。async 函数（包含函数语句、函数表达式、Lambda表达式）会返回一个 Promise 对象，如果在函数中 return 一个直接量，async 会把这个直接量通过 Promise.resolve() 封装成 Promise 对象。\n\n### await\n1.一般来说，都认为 await 是在等待一个 async 函数完成。不过按语法说明，await 等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值（换句话说，就是没有特殊限定）。\n\n2.async函数返回的是一个Promise对象，所以await可以用于等待一个async函数的返回值，await就是等待async的返回值。\n\n```\nfunction test1() {\n    reuturn \"test1\"\n}\nfunction test2() {\n    reuturn \"test2\"\n}\nasync function test() {\n    const v1 = await test1();\n    const v2 = await test2();\n}\ntest()\n```\n\n3.async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。\n\n### async/await 干了啥\n1.async会将其后的函数的返回值封装成一个Promise对象，而await会等待这个Promise完成，并将其resolve的结果返回出来。\n\n2.async/await 的优势在于处理 then 链，单一的 Promise 链并不能发现 async/await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了\n```\n/**\n * 传入参数 n，表示这个函数执行的时间（毫秒）\n * 执行的结果是 n + 200，这个值将用于下一步骤\n */\nfunction takeLongTime(n) {\n    return new Promise(resolve => {\n        setTimeout(() => resolve(n + 200), n);\n    });\n}\n\nfunction step1(n) {\n    console.log(`step1 with ${n}`);\n    return takeLongTime(n);\n}\n\nfunction step2(n) {\n    console.log(`step2 with ${n}`);\n    return takeLongTime(n);\n}\n\nfunction step3(n) {\n    console.log(`step3 with ${n}`);\n    return takeLongTime(n);\n}\n```\n\n现在用 Promise 方式来实现这三个步骤的处理\n```\nfunction doIt() {\n    console.time(\"doIt\");\n    const time1 = 300;\n    step1(time1)\n        .then(time2 => step2(time2))\n        .then(time3 => step3(time3))\n        .then(result => {\n            console.log(`result is ${result}`);\n            console.timeEnd(\"doIt\");\n        });\n}\n\ndoIt();\n```\n\n用 async/await 来实现\n```\nasync function doIt() {\n    console.time(\"doIt\");\n    const time1 = 300;\n    const time2 = await step1(time1);\n    const time3 = await step2(time2);\n    const result = await step3(time3);\n    console.log(`result is ${result}`);\n    console.timeEnd(\"doIt\");\n}\n\ndoIt();\n```\n\n### 捕捉错误\n既然.then(..)不用写了，那么.catch(..)也不用写，可以直接用标准的try catch语法捕捉错误。\n```\nconst start = async function () {\n    try {\n        console.log('start');\n        await sleep(3000); // 这里得到了一个返回错误\n        \n        // 所以以下代码不会被执行了\n        console.log('end');\n    } catch (err) {\n        console.log(err); // 这里捕捉到错误 `error`\n    }\n};\n```\n\n\n","source":"_posts/async.md","raw":"---\ntitle: JavaScript 的 async/await\ndate: 2018-12-28 \ntags: ['JavaScript']\ncategories: JavaScript\n---\n\n\n\n### 什么是async、await\n<!-- more -->\n\nasync 是“异步”的简写，而 await 可以认为是 async wait 的简写。所以应该很好理解 async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。\n\n### async\n1.async用法，它作为一个关键字放到函数前面，用于表示函数是一个异步函数，因为async就是异步的意思， 异步函数也就意味着该函数的执行不会阻塞后面代码的执行。 写一个async 函数\n```\nasync function test() {\n    return \"hello world\"\n}\n```\n2.语法就是在函数前面加上async关键字，用来表示它是异步的，怎么调用呢？async 函数也是函数，平时我们怎么使用函数就怎么使用它，直接加括号调用就可以了，为了表示它没有阻塞它后面代码的执行。\n```\nconsole.log(test())\n//输出的是一个Promisea对象\n\nPromise\n__proto__: Promise\n[[PromiseStatus]]: \"resolved\"\n[[PromiseValue]]: \"hell\"\n```\n\n3.async 函数返回的是一个 Promise 对象。从文档中也可以得到这个信息。async 函数（包含函数语句、函数表达式、Lambda表达式）会返回一个 Promise 对象，如果在函数中 return 一个直接量，async 会把这个直接量通过 Promise.resolve() 封装成 Promise 对象。\n\n### await\n1.一般来说，都认为 await 是在等待一个 async 函数完成。不过按语法说明，await 等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值（换句话说，就是没有特殊限定）。\n\n2.async函数返回的是一个Promise对象，所以await可以用于等待一个async函数的返回值，await就是等待async的返回值。\n\n```\nfunction test1() {\n    reuturn \"test1\"\n}\nfunction test2() {\n    reuturn \"test2\"\n}\nasync function test() {\n    const v1 = await test1();\n    const v2 = await test2();\n}\ntest()\n```\n\n3.async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。\n\n### async/await 干了啥\n1.async会将其后的函数的返回值封装成一个Promise对象，而await会等待这个Promise完成，并将其resolve的结果返回出来。\n\n2.async/await 的优势在于处理 then 链，单一的 Promise 链并不能发现 async/await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了\n```\n/**\n * 传入参数 n，表示这个函数执行的时间（毫秒）\n * 执行的结果是 n + 200，这个值将用于下一步骤\n */\nfunction takeLongTime(n) {\n    return new Promise(resolve => {\n        setTimeout(() => resolve(n + 200), n);\n    });\n}\n\nfunction step1(n) {\n    console.log(`step1 with ${n}`);\n    return takeLongTime(n);\n}\n\nfunction step2(n) {\n    console.log(`step2 with ${n}`);\n    return takeLongTime(n);\n}\n\nfunction step3(n) {\n    console.log(`step3 with ${n}`);\n    return takeLongTime(n);\n}\n```\n\n现在用 Promise 方式来实现这三个步骤的处理\n```\nfunction doIt() {\n    console.time(\"doIt\");\n    const time1 = 300;\n    step1(time1)\n        .then(time2 => step2(time2))\n        .then(time3 => step3(time3))\n        .then(result => {\n            console.log(`result is ${result}`);\n            console.timeEnd(\"doIt\");\n        });\n}\n\ndoIt();\n```\n\n用 async/await 来实现\n```\nasync function doIt() {\n    console.time(\"doIt\");\n    const time1 = 300;\n    const time2 = await step1(time1);\n    const time3 = await step2(time2);\n    const result = await step3(time3);\n    console.log(`result is ${result}`);\n    console.timeEnd(\"doIt\");\n}\n\ndoIt();\n```\n\n### 捕捉错误\n既然.then(..)不用写了，那么.catch(..)也不用写，可以直接用标准的try catch语法捕捉错误。\n```\nconst start = async function () {\n    try {\n        console.log('start');\n        await sleep(3000); // 这里得到了一个返回错误\n        \n        // 所以以下代码不会被执行了\n        console.log('end');\n    } catch (err) {\n        console.log(err); // 这里捕捉到错误 `error`\n    }\n};\n```\n\n\n","slug":"async","published":1,"updated":"2018-12-28T14:06:13.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq41s000she6j0n1f4ly2","content":"<h3 id=\"什么是async、await\"><a href=\"#什么是async、await\" class=\"headerlink\" title=\"什么是async、await\"></a>什么是async、await</h3><a id=\"more\"></a>\n<p>async 是“异步”的简写，而 await 可以认为是 async wait 的简写。所以应该很好理解 async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。</p>\n<h3 id=\"async\"><a href=\"#async\" class=\"headerlink\" title=\"async\"></a>async</h3><p>1.async用法，它作为一个关键字放到函数前面，用于表示函数是一个异步函数，因为async就是异步的意思， 异步函数也就意味着该函数的执行不会阻塞后面代码的执行。 写一个async 函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function test() &#123;</span><br><span class=\"line\">    return &quot;hello world&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.语法就是在函数前面加上async关键字，用来表示它是异步的，怎么调用呢？async 函数也是函数，平时我们怎么使用函数就怎么使用它，直接加括号调用就可以了，为了表示它没有阻塞它后面代码的执行。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(test())</span><br><span class=\"line\">//输出的是一个Promisea对象</span><br><span class=\"line\"></span><br><span class=\"line\">Promise</span><br><span class=\"line\">__proto__: Promise</span><br><span class=\"line\">[[PromiseStatus]]: &quot;resolved&quot;</span><br><span class=\"line\">[[PromiseValue]]: &quot;hell&quot;</span><br></pre></td></tr></table></figure></p>\n<p>3.async 函数返回的是一个 Promise 对象。从文档中也可以得到这个信息。async 函数（包含函数语句、函数表达式、Lambda表达式）会返回一个 Promise 对象，如果在函数中 return 一个直接量，async 会把这个直接量通过 Promise.resolve() 封装成 Promise 对象。</p>\n<h3 id=\"await\"><a href=\"#await\" class=\"headerlink\" title=\"await\"></a>await</h3><p>1.一般来说，都认为 await 是在等待一个 async 函数完成。不过按语法说明，await 等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值（换句话说，就是没有特殊限定）。</p>\n<p>2.async函数返回的是一个Promise对象，所以await可以用于等待一个async函数的返回值，await就是等待async的返回值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test1() &#123;</span><br><span class=\"line\">    reuturn &quot;test1&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function test2() &#123;</span><br><span class=\"line\">    reuturn &quot;test2&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">async function test() &#123;</span><br><span class=\"line\">    const v1 = await test1();</span><br><span class=\"line\">    const v2 = await test2();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test()</span><br></pre></td></tr></table></figure>\n<p>3.async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。</p>\n<h3 id=\"async-await-干了啥\"><a href=\"#async-await-干了啥\" class=\"headerlink\" title=\"async/await 干了啥\"></a>async/await 干了啥</h3><p>1.async会将其后的函数的返回值封装成一个Promise对象，而await会等待这个Promise完成，并将其resolve的结果返回出来。</p>\n<p>2.async/await 的优势在于处理 then 链，单一的 Promise 链并不能发现 async/await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 传入参数 n，表示这个函数执行的时间（毫秒）</span><br><span class=\"line\"> * 执行的结果是 n + 200，这个值将用于下一步骤</span><br><span class=\"line\"> */</span><br><span class=\"line\">function takeLongTime(n) &#123;</span><br><span class=\"line\">    return new Promise(resolve =&gt; &#123;</span><br><span class=\"line\">        setTimeout(() =&gt; resolve(n + 200), n);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function step1(n) &#123;</span><br><span class=\"line\">    console.log(`step1 with $&#123;n&#125;`);</span><br><span class=\"line\">    return takeLongTime(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function step2(n) &#123;</span><br><span class=\"line\">    console.log(`step2 with $&#123;n&#125;`);</span><br><span class=\"line\">    return takeLongTime(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function step3(n) &#123;</span><br><span class=\"line\">    console.log(`step3 with $&#123;n&#125;`);</span><br><span class=\"line\">    return takeLongTime(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在用 Promise 方式来实现这三个步骤的处理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function doIt() &#123;</span><br><span class=\"line\">    console.time(&quot;doIt&quot;);</span><br><span class=\"line\">    const time1 = 300;</span><br><span class=\"line\">    step1(time1)</span><br><span class=\"line\">        .then(time2 =&gt; step2(time2))</span><br><span class=\"line\">        .then(time3 =&gt; step3(time3))</span><br><span class=\"line\">        .then(result =&gt; &#123;</span><br><span class=\"line\">            console.log(`result is $&#123;result&#125;`);</span><br><span class=\"line\">            console.timeEnd(&quot;doIt&quot;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">doIt();</span><br></pre></td></tr></table></figure></p>\n<p>用 async/await 来实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function doIt() &#123;</span><br><span class=\"line\">    console.time(&quot;doIt&quot;);</span><br><span class=\"line\">    const time1 = 300;</span><br><span class=\"line\">    const time2 = await step1(time1);</span><br><span class=\"line\">    const time3 = await step2(time2);</span><br><span class=\"line\">    const result = await step3(time3);</span><br><span class=\"line\">    console.log(`result is $&#123;result&#125;`);</span><br><span class=\"line\">    console.timeEnd(&quot;doIt&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">doIt();</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"捕捉错误\"><a href=\"#捕捉错误\" class=\"headerlink\" title=\"捕捉错误\"></a>捕捉错误</h3><p>既然.then(..)不用写了，那么.catch(..)也不用写，可以直接用标准的try catch语法捕捉错误。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const start = async function () &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        console.log(&apos;start&apos;);</span><br><span class=\"line\">        await sleep(3000); // 这里得到了一个返回错误</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 所以以下代码不会被执行了</span><br><span class=\"line\">        console.log(&apos;end&apos;);</span><br><span class=\"line\">    &#125; catch (err) &#123;</span><br><span class=\"line\">        console.log(err); // 这里捕捉到错误 `error`</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"什么是async、await\"><a href=\"#什么是async、await\" class=\"headerlink\" title=\"什么是async、await\"></a>什么是async、await</h3>","more":"<p>async 是“异步”的简写，而 await 可以认为是 async wait 的简写。所以应该很好理解 async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。</p>\n<h3 id=\"async\"><a href=\"#async\" class=\"headerlink\" title=\"async\"></a>async</h3><p>1.async用法，它作为一个关键字放到函数前面，用于表示函数是一个异步函数，因为async就是异步的意思， 异步函数也就意味着该函数的执行不会阻塞后面代码的执行。 写一个async 函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function test() &#123;</span><br><span class=\"line\">    return &quot;hello world&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.语法就是在函数前面加上async关键字，用来表示它是异步的，怎么调用呢？async 函数也是函数，平时我们怎么使用函数就怎么使用它，直接加括号调用就可以了，为了表示它没有阻塞它后面代码的执行。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(test())</span><br><span class=\"line\">//输出的是一个Promisea对象</span><br><span class=\"line\"></span><br><span class=\"line\">Promise</span><br><span class=\"line\">__proto__: Promise</span><br><span class=\"line\">[[PromiseStatus]]: &quot;resolved&quot;</span><br><span class=\"line\">[[PromiseValue]]: &quot;hell&quot;</span><br></pre></td></tr></table></figure></p>\n<p>3.async 函数返回的是一个 Promise 对象。从文档中也可以得到这个信息。async 函数（包含函数语句、函数表达式、Lambda表达式）会返回一个 Promise 对象，如果在函数中 return 一个直接量，async 会把这个直接量通过 Promise.resolve() 封装成 Promise 对象。</p>\n<h3 id=\"await\"><a href=\"#await\" class=\"headerlink\" title=\"await\"></a>await</h3><p>1.一般来说，都认为 await 是在等待一个 async 函数完成。不过按语法说明，await 等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值（换句话说，就是没有特殊限定）。</p>\n<p>2.async函数返回的是一个Promise对象，所以await可以用于等待一个async函数的返回值，await就是等待async的返回值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test1() &#123;</span><br><span class=\"line\">    reuturn &quot;test1&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function test2() &#123;</span><br><span class=\"line\">    reuturn &quot;test2&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">async function test() &#123;</span><br><span class=\"line\">    const v1 = await test1();</span><br><span class=\"line\">    const v2 = await test2();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test()</span><br></pre></td></tr></table></figure>\n<p>3.async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。</p>\n<h3 id=\"async-await-干了啥\"><a href=\"#async-await-干了啥\" class=\"headerlink\" title=\"async/await 干了啥\"></a>async/await 干了啥</h3><p>1.async会将其后的函数的返回值封装成一个Promise对象，而await会等待这个Promise完成，并将其resolve的结果返回出来。</p>\n<p>2.async/await 的优势在于处理 then 链，单一的 Promise 链并不能发现 async/await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 传入参数 n，表示这个函数执行的时间（毫秒）</span><br><span class=\"line\"> * 执行的结果是 n + 200，这个值将用于下一步骤</span><br><span class=\"line\"> */</span><br><span class=\"line\">function takeLongTime(n) &#123;</span><br><span class=\"line\">    return new Promise(resolve =&gt; &#123;</span><br><span class=\"line\">        setTimeout(() =&gt; resolve(n + 200), n);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function step1(n) &#123;</span><br><span class=\"line\">    console.log(`step1 with $&#123;n&#125;`);</span><br><span class=\"line\">    return takeLongTime(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function step2(n) &#123;</span><br><span class=\"line\">    console.log(`step2 with $&#123;n&#125;`);</span><br><span class=\"line\">    return takeLongTime(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function step3(n) &#123;</span><br><span class=\"line\">    console.log(`step3 with $&#123;n&#125;`);</span><br><span class=\"line\">    return takeLongTime(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在用 Promise 方式来实现这三个步骤的处理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function doIt() &#123;</span><br><span class=\"line\">    console.time(&quot;doIt&quot;);</span><br><span class=\"line\">    const time1 = 300;</span><br><span class=\"line\">    step1(time1)</span><br><span class=\"line\">        .then(time2 =&gt; step2(time2))</span><br><span class=\"line\">        .then(time3 =&gt; step3(time3))</span><br><span class=\"line\">        .then(result =&gt; &#123;</span><br><span class=\"line\">            console.log(`result is $&#123;result&#125;`);</span><br><span class=\"line\">            console.timeEnd(&quot;doIt&quot;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">doIt();</span><br></pre></td></tr></table></figure></p>\n<p>用 async/await 来实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">async function doIt() &#123;</span><br><span class=\"line\">    console.time(&quot;doIt&quot;);</span><br><span class=\"line\">    const time1 = 300;</span><br><span class=\"line\">    const time2 = await step1(time1);</span><br><span class=\"line\">    const time3 = await step2(time2);</span><br><span class=\"line\">    const result = await step3(time3);</span><br><span class=\"line\">    console.log(`result is $&#123;result&#125;`);</span><br><span class=\"line\">    console.timeEnd(&quot;doIt&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">doIt();</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"捕捉错误\"><a href=\"#捕捉错误\" class=\"headerlink\" title=\"捕捉错误\"></a>捕捉错误</h3><p>既然.then(..)不用写了，那么.catch(..)也不用写，可以直接用标准的try catch语法捕捉错误。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const start = async function () &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        console.log(&apos;start&apos;);</span><br><span class=\"line\">        await sleep(3000); // 这里得到了一个返回错误</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 所以以下代码不会被执行了</span><br><span class=\"line\">        console.log(&apos;end&apos;);</span><br><span class=\"line\">    &#125; catch (err) &#123;</span><br><span class=\"line\">        console.log(err); // 这里捕捉到错误 `error`</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>"},{"title":"axios","date":"2019-04-17T12:32:49.000Z","_content":"\n### axios封装\n<!-- more -->\n\n```\nrequest.js\n\nimport _axios from 'axios';\nimport qs from  'qs';\n\n//新建一个 axios 实例\nconst axios = _axios.create({\n    //当在开发模式下,baseURL等于null,使用本地的localhost,设置本地代理解决跨域\n    baseURL:process.env.NODE_ENV=='development'?null:'http://xxx.xx.xx:8080/',\n    transformRequest:[function(data){       \n        data = qs.stringify(data);\n        return data\n    }],\n    headers:{\n        'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    transformResponse: [function (data) {\n        // 对 data 进行任意转换处理\n        let _data = JSON.parse(data);\n        return _data;\n    }],\n    withCredentials:true,  // 表示跨域请求时是否需要使用凭证\n    timeout: 5000,  // 如果请求话费了超过 `timeout` 的时间，请求将被中断\n})\naxios.defaults.withCredentials = true\n\n// 添加请求拦截器\naxios.interceptors.request.use(\n    config => {  \n        //在发送请求之前做些什么\n        // if (token) {\n        //     config.headers['X-Token'] = getToken()\n        // }\n        return config\n    },\n    error => {\n        // 对请求错误做些什么\n        console.log('err' + error) // for debug\n        return Promise.reject(error)\n    }\n)\n\n// 添加响应拦截器\naxios.interceptors.response.use(\n  response => {\n    //对响应数据做点什么\n    const res = response.data\n    //如果自定义代码不是20000，则被判断为错误。统一处理接口报错\n    if (res.code !== 20000) {\n      return Promise.reject(res.message || 'error')\n    } else {\n      return response\n    }\n  },\n  error => {\n    //对响应错误做点什么\n    console.log('err' + error) // for debug\n    return Promise.reject(error)\n  }\n)\nexport default axios;\n```\n\n```\n//api.js\n\nimport http from request.js\n\n//get\n\nexport const getGet = ({id}) => {\n    let params = { ID }\n    return http.get('url',params)\n}\n\n//post\nexport const getPost = ({id}) => {\n    let data = { ID }\n    return http.post('url',data)\n}\n```\n","source":"_posts/axios.md","raw":"---\ntitle: axios\ndate: 2019-04-17 20:32:49\ntags: [\"vue\"]\ncategories: vue\n---\n\n### axios封装\n<!-- more -->\n\n```\nrequest.js\n\nimport _axios from 'axios';\nimport qs from  'qs';\n\n//新建一个 axios 实例\nconst axios = _axios.create({\n    //当在开发模式下,baseURL等于null,使用本地的localhost,设置本地代理解决跨域\n    baseURL:process.env.NODE_ENV=='development'?null:'http://xxx.xx.xx:8080/',\n    transformRequest:[function(data){       \n        data = qs.stringify(data);\n        return data\n    }],\n    headers:{\n        'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    transformResponse: [function (data) {\n        // 对 data 进行任意转换处理\n        let _data = JSON.parse(data);\n        return _data;\n    }],\n    withCredentials:true,  // 表示跨域请求时是否需要使用凭证\n    timeout: 5000,  // 如果请求话费了超过 `timeout` 的时间，请求将被中断\n})\naxios.defaults.withCredentials = true\n\n// 添加请求拦截器\naxios.interceptors.request.use(\n    config => {  \n        //在发送请求之前做些什么\n        // if (token) {\n        //     config.headers['X-Token'] = getToken()\n        // }\n        return config\n    },\n    error => {\n        // 对请求错误做些什么\n        console.log('err' + error) // for debug\n        return Promise.reject(error)\n    }\n)\n\n// 添加响应拦截器\naxios.interceptors.response.use(\n  response => {\n    //对响应数据做点什么\n    const res = response.data\n    //如果自定义代码不是20000，则被判断为错误。统一处理接口报错\n    if (res.code !== 20000) {\n      return Promise.reject(res.message || 'error')\n    } else {\n      return response\n    }\n  },\n  error => {\n    //对响应错误做点什么\n    console.log('err' + error) // for debug\n    return Promise.reject(error)\n  }\n)\nexport default axios;\n```\n\n```\n//api.js\n\nimport http from request.js\n\n//get\n\nexport const getGet = ({id}) => {\n    let params = { ID }\n    return http.get('url',params)\n}\n\n//post\nexport const getPost = ({id}) => {\n    let data = { ID }\n    return http.post('url',data)\n}\n```\n","slug":"axios","published":1,"updated":"2019-04-17T14:36:45.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq41v000xhe6j38vwo1vz","content":"<h3 id=\"axios封装\"><a href=\"#axios封装\" class=\"headerlink\" title=\"axios封装\"></a>axios封装</h3><a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.js</span><br><span class=\"line\"></span><br><span class=\"line\">import _axios from &apos;axios&apos;;</span><br><span class=\"line\">import qs from  &apos;qs&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">//新建一个 axios 实例</span><br><span class=\"line\">const axios = _axios.create(&#123;</span><br><span class=\"line\">    //当在开发模式下,baseURL等于null,使用本地的localhost,设置本地代理解决跨域</span><br><span class=\"line\">    baseURL:process.env.NODE_ENV==&apos;development&apos;?null:&apos;http://xxx.xx.xx:8080/&apos;,</span><br><span class=\"line\">    transformRequest:[function(data)&#123;       </span><br><span class=\"line\">        data = qs.stringify(data);</span><br><span class=\"line\">        return data</span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    headers:&#123;</span><br><span class=\"line\">        &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    transformResponse: [function (data) &#123;</span><br><span class=\"line\">        // 对 data 进行任意转换处理</span><br><span class=\"line\">        let _data = JSON.parse(data);</span><br><span class=\"line\">        return _data;</span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    withCredentials:true,  // 表示跨域请求时是否需要使用凭证</span><br><span class=\"line\">    timeout: 5000,  // 如果请求话费了超过 `timeout` 的时间，请求将被中断</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">axios.defaults.withCredentials = true</span><br><span class=\"line\"></span><br><span class=\"line\">// 添加请求拦截器</span><br><span class=\"line\">axios.interceptors.request.use(</span><br><span class=\"line\">    config =&gt; &#123;  </span><br><span class=\"line\">        //在发送请求之前做些什么</span><br><span class=\"line\">        // if (token) &#123;</span><br><span class=\"line\">        //     config.headers[&apos;X-Token&apos;] = getToken()</span><br><span class=\"line\">        // &#125;</span><br><span class=\"line\">        return config</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    error =&gt; &#123;</span><br><span class=\"line\">        // 对请求错误做些什么</span><br><span class=\"line\">        console.log(&apos;err&apos; + error) // for debug</span><br><span class=\"line\">        return Promise.reject(error)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">// 添加响应拦截器</span><br><span class=\"line\">axios.interceptors.response.use(</span><br><span class=\"line\">  response =&gt; &#123;</span><br><span class=\"line\">    //对响应数据做点什么</span><br><span class=\"line\">    const res = response.data</span><br><span class=\"line\">    //如果自定义代码不是20000，则被判断为错误。统一处理接口报错</span><br><span class=\"line\">    if (res.code !== 20000) &#123;</span><br><span class=\"line\">      return Promise.reject(res.message || &apos;error&apos;)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      return response</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  error =&gt; &#123;</span><br><span class=\"line\">    //对响应错误做点什么</span><br><span class=\"line\">    console.log(&apos;err&apos; + error) // for debug</span><br><span class=\"line\">    return Promise.reject(error)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\">export default axios;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//api.js</span><br><span class=\"line\"></span><br><span class=\"line\">import http from request.js</span><br><span class=\"line\"></span><br><span class=\"line\">//get</span><br><span class=\"line\"></span><br><span class=\"line\">export const getGet = (&#123;id&#125;) =&gt; &#123;</span><br><span class=\"line\">    let params = &#123; ID &#125;</span><br><span class=\"line\">    return http.get(&apos;url&apos;,params)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//post</span><br><span class=\"line\">export const getPost = (&#123;id&#125;) =&gt; &#123;</span><br><span class=\"line\">    let data = &#123; ID &#125;</span><br><span class=\"line\">    return http.post(&apos;url&apos;,data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"axios封装\"><a href=\"#axios封装\" class=\"headerlink\" title=\"axios封装\"></a>axios封装</h3>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.js</span><br><span class=\"line\"></span><br><span class=\"line\">import _axios from &apos;axios&apos;;</span><br><span class=\"line\">import qs from  &apos;qs&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">//新建一个 axios 实例</span><br><span class=\"line\">const axios = _axios.create(&#123;</span><br><span class=\"line\">    //当在开发模式下,baseURL等于null,使用本地的localhost,设置本地代理解决跨域</span><br><span class=\"line\">    baseURL:process.env.NODE_ENV==&apos;development&apos;?null:&apos;http://xxx.xx.xx:8080/&apos;,</span><br><span class=\"line\">    transformRequest:[function(data)&#123;       </span><br><span class=\"line\">        data = qs.stringify(data);</span><br><span class=\"line\">        return data</span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    headers:&#123;</span><br><span class=\"line\">        &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    transformResponse: [function (data) &#123;</span><br><span class=\"line\">        // 对 data 进行任意转换处理</span><br><span class=\"line\">        let _data = JSON.parse(data);</span><br><span class=\"line\">        return _data;</span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    withCredentials:true,  // 表示跨域请求时是否需要使用凭证</span><br><span class=\"line\">    timeout: 5000,  // 如果请求话费了超过 `timeout` 的时间，请求将被中断</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">axios.defaults.withCredentials = true</span><br><span class=\"line\"></span><br><span class=\"line\">// 添加请求拦截器</span><br><span class=\"line\">axios.interceptors.request.use(</span><br><span class=\"line\">    config =&gt; &#123;  </span><br><span class=\"line\">        //在发送请求之前做些什么</span><br><span class=\"line\">        // if (token) &#123;</span><br><span class=\"line\">        //     config.headers[&apos;X-Token&apos;] = getToken()</span><br><span class=\"line\">        // &#125;</span><br><span class=\"line\">        return config</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    error =&gt; &#123;</span><br><span class=\"line\">        // 对请求错误做些什么</span><br><span class=\"line\">        console.log(&apos;err&apos; + error) // for debug</span><br><span class=\"line\">        return Promise.reject(error)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">// 添加响应拦截器</span><br><span class=\"line\">axios.interceptors.response.use(</span><br><span class=\"line\">  response =&gt; &#123;</span><br><span class=\"line\">    //对响应数据做点什么</span><br><span class=\"line\">    const res = response.data</span><br><span class=\"line\">    //如果自定义代码不是20000，则被判断为错误。统一处理接口报错</span><br><span class=\"line\">    if (res.code !== 20000) &#123;</span><br><span class=\"line\">      return Promise.reject(res.message || &apos;error&apos;)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      return response</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  error =&gt; &#123;</span><br><span class=\"line\">    //对响应错误做点什么</span><br><span class=\"line\">    console.log(&apos;err&apos; + error) // for debug</span><br><span class=\"line\">    return Promise.reject(error)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\">export default axios;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//api.js</span><br><span class=\"line\"></span><br><span class=\"line\">import http from request.js</span><br><span class=\"line\"></span><br><span class=\"line\">//get</span><br><span class=\"line\"></span><br><span class=\"line\">export const getGet = (&#123;id&#125;) =&gt; &#123;</span><br><span class=\"line\">    let params = &#123; ID &#125;</span><br><span class=\"line\">    return http.get(&apos;url&apos;,params)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//post</span><br><span class=\"line\">export const getPost = (&#123;id&#125;) =&gt; &#123;</span><br><span class=\"line\">    let data = &#123; ID &#125;</span><br><span class=\"line\">    return http.post(&apos;url&apos;,data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"为什么写博客","date":"2018-09-28T13:08:24.000Z","_content":"\n### 为什么坚持写博客?\n<!--more-->\n> 原因\n\n    这个博客是由我自己一点点去搭建的，其中也遇到了不少麻烦，特别是在域名解析部分。\n\n    为什么要去搭建一个博客呢？可以看看自己的轨迹，做过什么，不忘处心，不遗失自己。\n\n    之前一直有想在博客园去写博客，但发现自己写不出东西来～～～，总之就是下不了笔。\n\n    我自己搭建的博客就是想把自己对前端或其它领域某些知识点自己思考写出来，积累下来。\n    \n    有很多事情你以为你知道，其实你什么都不知道。\n\n> 我的理解\n\n    未来自己写博客的过程中，对某个知识点进行比较全的解析，怎么来的？用在哪里？了解其原理。\n\n    用心去写，希望在多年以后回过头来看，原来曾经自己写得这么“傻逼”。\n\n    这是第一篇文章，以后慢慢来写，因为菜，所以好好学习、天天向上。\n\n    下一篇想写个人博客的搭建！\n","source":"_posts/blog-start.md","raw":"---\ntitle: 为什么写博客\ndate: 2018-09-28 21:08:24\ntags: ['随笔']\ncategories: 随笔\n---\n\n### 为什么坚持写博客?\n<!--more-->\n> 原因\n\n    这个博客是由我自己一点点去搭建的，其中也遇到了不少麻烦，特别是在域名解析部分。\n\n    为什么要去搭建一个博客呢？可以看看自己的轨迹，做过什么，不忘处心，不遗失自己。\n\n    之前一直有想在博客园去写博客，但发现自己写不出东西来～～～，总之就是下不了笔。\n\n    我自己搭建的博客就是想把自己对前端或其它领域某些知识点自己思考写出来，积累下来。\n    \n    有很多事情你以为你知道，其实你什么都不知道。\n\n> 我的理解\n\n    未来自己写博客的过程中，对某个知识点进行比较全的解析，怎么来的？用在哪里？了解其原理。\n\n    用心去写，希望在多年以后回过头来看，原来曾经自己写得这么“傻逼”。\n\n    这是第一篇文章，以后慢慢来写，因为菜，所以好好学习、天天向上。\n\n    下一篇想写个人博客的搭建！\n","slug":"blog-start","published":1,"updated":"2018-09-28T13:36:54.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq41w0010he6jjd9eatqt","content":"<h3 id=\"为什么坚持写博客\"><a href=\"#为什么坚持写博客\" class=\"headerlink\" title=\"为什么坚持写博客?\"></a>为什么坚持写博客?</h3><a id=\"more\"></a>\n<blockquote>\n<p>原因</p>\n</blockquote>\n<pre><code>这个博客是由我自己一点点去搭建的，其中也遇到了不少麻烦，特别是在域名解析部分。\n\n为什么要去搭建一个博客呢？可以看看自己的轨迹，做过什么，不忘处心，不遗失自己。\n\n之前一直有想在博客园去写博客，但发现自己写不出东西来～～～，总之就是下不了笔。\n\n我自己搭建的博客就是想把自己对前端或其它领域某些知识点自己思考写出来，积累下来。\n\n有很多事情你以为你知道，其实你什么都不知道。\n</code></pre><blockquote>\n<p>我的理解</p>\n</blockquote>\n<pre><code>未来自己写博客的过程中，对某个知识点进行比较全的解析，怎么来的？用在哪里？了解其原理。\n\n用心去写，希望在多年以后回过头来看，原来曾经自己写得这么“傻逼”。\n\n这是第一篇文章，以后慢慢来写，因为菜，所以好好学习、天天向上。\n\n下一篇想写个人博客的搭建！\n</code></pre>","site":{"data":{}},"excerpt":"<h3 id=\"为什么坚持写博客\"><a href=\"#为什么坚持写博客\" class=\"headerlink\" title=\"为什么坚持写博客?\"></a>为什么坚持写博客?</h3>","more":"<blockquote>\n<p>原因</p>\n</blockquote>\n<pre><code>这个博客是由我自己一点点去搭建的，其中也遇到了不少麻烦，特别是在域名解析部分。\n\n为什么要去搭建一个博客呢？可以看看自己的轨迹，做过什么，不忘处心，不遗失自己。\n\n之前一直有想在博客园去写博客，但发现自己写不出东西来～～～，总之就是下不了笔。\n\n我自己搭建的博客就是想把自己对前端或其它领域某些知识点自己思考写出来，积累下来。\n\n有很多事情你以为你知道，其实你什么都不知道。\n</code></pre><blockquote>\n<p>我的理解</p>\n</blockquote>\n<pre><code>未来自己写博客的过程中，对某个知识点进行比较全的解析，怎么来的？用在哪里？了解其原理。\n\n用心去写，希望在多年以后回过头来看，原来曾经自己写得这么“傻逼”。\n\n这是第一篇文章，以后慢慢来写，因为菜，所以好好学习、天天向上。\n\n下一篇想写个人博客的搭建！\n</code></pre>"},{"title":"element上传图片el-upload","date":"2019-04-09T14:12:12.000Z","_content":"\n### element上传图片el-upload\n<!-- more -->\n### el-upload组件\n```\n<el-upload   \n    action=\"\"                                             \n    list-type=\"picture-card\"\n    :on-change=\"uploadChange\"\n    :file-list=\"fileList\"\n    :limit=\"5\"                          \n    :auto-upload=\"false\">                           \n    <i class=\"el-icon-plus\"></i>\n</el-upload>\n```\nlist-type:文件上传类型，如照片墙、单个上传照片\non-change:自定义上传图片\nfile-list:照片墙的数据\nlimit: 最大允许上传个数\nauto-upload:el-upload 会自动上传两次，false不自动上传\n\n### 获取base64\n```\nuploadChange(file,fileList) {\n    var reader = new FileReader();\n    reader.readAsDataURL(file.raw);\n    reader.onload = (e) =>{ \n        //reader.result获取base64\n        let imgStr = reader.result\n    }  \n}\n```\n","source":"_posts/ele-upload.md","raw":"---\ntitle: element上传图片el-upload\ndate: 2019-04-09 22:12:12\ntags: ['JavaScript']\ncategories: JavaScript\n---\n\n### element上传图片el-upload\n<!-- more -->\n### el-upload组件\n```\n<el-upload   \n    action=\"\"                                             \n    list-type=\"picture-card\"\n    :on-change=\"uploadChange\"\n    :file-list=\"fileList\"\n    :limit=\"5\"                          \n    :auto-upload=\"false\">                           \n    <i class=\"el-icon-plus\"></i>\n</el-upload>\n```\nlist-type:文件上传类型，如照片墙、单个上传照片\non-change:自定义上传图片\nfile-list:照片墙的数据\nlimit: 最大允许上传个数\nauto-upload:el-upload 会自动上传两次，false不自动上传\n\n### 获取base64\n```\nuploadChange(file,fileList) {\n    var reader = new FileReader();\n    reader.readAsDataURL(file.raw);\n    reader.onload = (e) =>{ \n        //reader.result获取base64\n        let imgStr = reader.result\n    }  \n}\n```\n","slug":"ele-upload","published":1,"updated":"2019-04-09T14:19:39.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq41x0015he6jswf4vynl","content":"<h3 id=\"element上传图片el-upload\"><a href=\"#element上传图片el-upload\" class=\"headerlink\" title=\"element上传图片el-upload\"></a>element上传图片el-upload</h3><a id=\"more\"></a>\n<h3 id=\"el-upload组件\"><a href=\"#el-upload组件\" class=\"headerlink\" title=\"el-upload组件\"></a>el-upload组件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-upload   </span><br><span class=\"line\">    action=&quot;&quot;                                             </span><br><span class=\"line\">    list-type=&quot;picture-card&quot;</span><br><span class=\"line\">    :on-change=&quot;uploadChange&quot;</span><br><span class=\"line\">    :file-list=&quot;fileList&quot;</span><br><span class=\"line\">    :limit=&quot;5&quot;                          </span><br><span class=\"line\">    :auto-upload=&quot;false&quot;&gt;                           </span><br><span class=\"line\">    &lt;i class=&quot;el-icon-plus&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">&lt;/el-upload&gt;</span><br></pre></td></tr></table></figure>\n<p>list-type:文件上传类型，如照片墙、单个上传照片<br>on-change:自定义上传图片<br>file-list:照片墙的数据<br>limit: 最大允许上传个数<br>auto-upload:el-upload 会自动上传两次，false不自动上传</p>\n<h3 id=\"获取base64\"><a href=\"#获取base64\" class=\"headerlink\" title=\"获取base64\"></a>获取base64</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uploadChange(file,fileList) &#123;</span><br><span class=\"line\">    var reader = new FileReader();</span><br><span class=\"line\">    reader.readAsDataURL(file.raw);</span><br><span class=\"line\">    reader.onload = (e) =&gt;&#123; </span><br><span class=\"line\">        //reader.result获取base64</span><br><span class=\"line\">        let imgStr = reader.result</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"element上传图片el-upload\"><a href=\"#element上传图片el-upload\" class=\"headerlink\" title=\"element上传图片el-upload\"></a>element上传图片el-upload</h3>","more":"<h3 id=\"el-upload组件\"><a href=\"#el-upload组件\" class=\"headerlink\" title=\"el-upload组件\"></a>el-upload组件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-upload   </span><br><span class=\"line\">    action=&quot;&quot;                                             </span><br><span class=\"line\">    list-type=&quot;picture-card&quot;</span><br><span class=\"line\">    :on-change=&quot;uploadChange&quot;</span><br><span class=\"line\">    :file-list=&quot;fileList&quot;</span><br><span class=\"line\">    :limit=&quot;5&quot;                          </span><br><span class=\"line\">    :auto-upload=&quot;false&quot;&gt;                           </span><br><span class=\"line\">    &lt;i class=&quot;el-icon-plus&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">&lt;/el-upload&gt;</span><br></pre></td></tr></table></figure>\n<p>list-type:文件上传类型，如照片墙、单个上传照片<br>on-change:自定义上传图片<br>file-list:照片墙的数据<br>limit: 最大允许上传个数<br>auto-upload:el-upload 会自动上传两次，false不自动上传</p>\n<h3 id=\"获取base64\"><a href=\"#获取base64\" class=\"headerlink\" title=\"获取base64\"></a>获取base64</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uploadChange(file,fileList) &#123;</span><br><span class=\"line\">    var reader = new FileReader();</span><br><span class=\"line\">    reader.readAsDataURL(file.raw);</span><br><span class=\"line\">    reader.onload = (e) =&gt;&#123; </span><br><span class=\"line\">        //reader.result获取base64</span><br><span class=\"line\">        let imgStr = reader.result</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"搭建个人博客","date":"2018-09-30T13:45:40.000Z","_content":"\n### hexo + github 搭建属于自己的个人博客\n<!-- more -->\n\n### 准备工作\n\n1.[node](https://nodejs.org/zh-cn/)：安装node，到官网下载，一路安装即可，在命令行输入node -v，出现版本号安装成功。\n\n2.[git](https://git-scm.com/)：一路安装即可，[教程](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n\n3.[github](https://github.com/)：程序员的交流网站，用来做博客的远程创库、域名、服务器。\n\n(Mac系统下载Homebrew，直接在终端进行下载，brew install git、brew install node)\n\n### 安装hexo框架\n\n``` bash\nnpm install -g hexo\n```\n\n### 初始化项目\n终端cd到一个选定的目录文件下(如新建一个文件夹blog)\n``` bash\nhexo init\n```\n查看blog文件下是否存在node_modules文件夹,不在则执行如下命令\n``` bash\nhexo install\n```\n开启hexo服务器，在浏览器打开网址http://localhost:4000，出现hexo页面\n```bash\nhexo s\n```\n\n### 创建github仓库\n\n1.打开github，注册账号，需要和电脑关联，在本地创建ssh key，可在百度输入github与本地电脑关联\n\n2.创建github仓库,点击+号(New repository),新建仓库，名为用户名.github.io固定写法。(用户名就是自己github的名字)\n\n3.Create repository创建仓库，其它不用选择\n\n4.cd到blog文件夹，打开配置文件_config.yml\n```bash\ndeploy:\n    type: git\n    repository: https://github.com/xxx/xxx.github.io.git\n    branch: master\n```\n你需要将repository后xxx换成你自己的用户名,浏览器输入xxx.github.io\n\n### 发布文章\ncd到blog文件夹，执行如下命令新建文章\n```bash\nhexo new \"postName\"\n```\n名为postName的文件夹在/blog/source/_posts下。\n\n编辑文章完成，终端cd到blog文件夹下，执行如下命令\n```bash\nhexo g\n```\n```bash\nhexo d\n```\n\n### 安装theme\n可以去搜索关于hexo的主题页，修饰自己的个人网站,在github上Clone or download地址\n终端cd到blog的目录下执行如下命令\n```bash\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n```\ncd到blog文件夹(每次部署文章的步骤)\n```bash\nhexo clean\n```\n```bash\nhexo g\n```\n```bash\nhexo d\n```\n至于更改theme内容，配置主题的网站，去修改blog/_config.yml文件和blog/themes/next/_config.yml，不要忘记冒号：加空格\n\n### 绑定个人域名\n1.想让自己的网站看起来更有个性，可以去万网购买喜欢的域名~~\n\n2.购买域名后，需要进行域名解析，之前先进行域名的实名验证，填写好信息，万网有详细的教程\n\n3.在blog/source建立CNAME的文件，没有后缀名，内容输入购买的域名，如www.xxx.com\n\n4.在万网对域名进行解析，进入解析设置，点击添加记录，需要添加4条记录\n```bash\n第一条记录：\n记录类型：A\n主机记录:www\n解析线路：默认\n记录值192.30.252.154\n```\n```\n第二条记录：\n记录类型：A\n主机记录:@\n解析线路：默认\n记录值192.30.252.154\n```\n```\n第三条记录：\n记录类型：A\n主机记录:www\n解析线路：默认\n记录值192.30.252.153\n```\n```\n第四条记录：\n记录类型：A\n主机记录:@\n解析线路：默认\n记录值192.30.252.153\n```\n\n### 总结和说明\nhexo + github搭建个人网站非常简单，主要在域名解析部分，当时各种解析添加记录都无法进行解析，这4条记录一定得添加好，绑定属于自己的域名。\n搭建属于自己的个人网站成就感满满，也希望自己一直坚持写博客，把自己遇到的问题和所做的收获一点一滴记录起来。明天是国庆节，国庆节快乐！！！\n\n\n\n\n\n\n\n\n    \n","source":"_posts/blog-construct.md","raw":"---\ntitle: 搭建个人博客\ndate: 2018-09-30 21:45:40\ntags: ['github']\ncategories: 随笔\n---\n\n### hexo + github 搭建属于自己的个人博客\n<!-- more -->\n\n### 准备工作\n\n1.[node](https://nodejs.org/zh-cn/)：安装node，到官网下载，一路安装即可，在命令行输入node -v，出现版本号安装成功。\n\n2.[git](https://git-scm.com/)：一路安装即可，[教程](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n\n3.[github](https://github.com/)：程序员的交流网站，用来做博客的远程创库、域名、服务器。\n\n(Mac系统下载Homebrew，直接在终端进行下载，brew install git、brew install node)\n\n### 安装hexo框架\n\n``` bash\nnpm install -g hexo\n```\n\n### 初始化项目\n终端cd到一个选定的目录文件下(如新建一个文件夹blog)\n``` bash\nhexo init\n```\n查看blog文件下是否存在node_modules文件夹,不在则执行如下命令\n``` bash\nhexo install\n```\n开启hexo服务器，在浏览器打开网址http://localhost:4000，出现hexo页面\n```bash\nhexo s\n```\n\n### 创建github仓库\n\n1.打开github，注册账号，需要和电脑关联，在本地创建ssh key，可在百度输入github与本地电脑关联\n\n2.创建github仓库,点击+号(New repository),新建仓库，名为用户名.github.io固定写法。(用户名就是自己github的名字)\n\n3.Create repository创建仓库，其它不用选择\n\n4.cd到blog文件夹，打开配置文件_config.yml\n```bash\ndeploy:\n    type: git\n    repository: https://github.com/xxx/xxx.github.io.git\n    branch: master\n```\n你需要将repository后xxx换成你自己的用户名,浏览器输入xxx.github.io\n\n### 发布文章\ncd到blog文件夹，执行如下命令新建文章\n```bash\nhexo new \"postName\"\n```\n名为postName的文件夹在/blog/source/_posts下。\n\n编辑文章完成，终端cd到blog文件夹下，执行如下命令\n```bash\nhexo g\n```\n```bash\nhexo d\n```\n\n### 安装theme\n可以去搜索关于hexo的主题页，修饰自己的个人网站,在github上Clone or download地址\n终端cd到blog的目录下执行如下命令\n```bash\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n```\ncd到blog文件夹(每次部署文章的步骤)\n```bash\nhexo clean\n```\n```bash\nhexo g\n```\n```bash\nhexo d\n```\n至于更改theme内容，配置主题的网站，去修改blog/_config.yml文件和blog/themes/next/_config.yml，不要忘记冒号：加空格\n\n### 绑定个人域名\n1.想让自己的网站看起来更有个性，可以去万网购买喜欢的域名~~\n\n2.购买域名后，需要进行域名解析，之前先进行域名的实名验证，填写好信息，万网有详细的教程\n\n3.在blog/source建立CNAME的文件，没有后缀名，内容输入购买的域名，如www.xxx.com\n\n4.在万网对域名进行解析，进入解析设置，点击添加记录，需要添加4条记录\n```bash\n第一条记录：\n记录类型：A\n主机记录:www\n解析线路：默认\n记录值192.30.252.154\n```\n```\n第二条记录：\n记录类型：A\n主机记录:@\n解析线路：默认\n记录值192.30.252.154\n```\n```\n第三条记录：\n记录类型：A\n主机记录:www\n解析线路：默认\n记录值192.30.252.153\n```\n```\n第四条记录：\n记录类型：A\n主机记录:@\n解析线路：默认\n记录值192.30.252.153\n```\n\n### 总结和说明\nhexo + github搭建个人网站非常简单，主要在域名解析部分，当时各种解析添加记录都无法进行解析，这4条记录一定得添加好，绑定属于自己的域名。\n搭建属于自己的个人网站成就感满满，也希望自己一直坚持写博客，把自己遇到的问题和所做的收获一点一滴记录起来。明天是国庆节，国庆节快乐！！！\n\n\n\n\n\n\n\n\n    \n","slug":"blog-construct","published":1,"updated":"2018-09-30T14:53:31.805Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq41z0018he6jcixjga7m","content":"<h3 id=\"hexo-github-搭建属于自己的个人博客\"><a href=\"#hexo-github-搭建属于自己的个人博客\" class=\"headerlink\" title=\"hexo + github 搭建属于自己的个人博客\"></a>hexo + github 搭建属于自己的个人博客</h3><a id=\"more\"></a>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>1.<a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">node</a>：安装node，到官网下载，一路安装即可，在命令行输入node -v，出现版本号安装成功。</p>\n<p>2.<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">git</a>：一路安装即可，<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">教程</a></p>\n<p>3.<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a>：程序员的交流网站，用来做博客的远程创库、域名、服务器。</p>\n<p>(Mac系统下载Homebrew，直接在终端进行下载，brew install git、brew install node)</p>\n<h3 id=\"安装hexo框架\"><a href=\"#安装hexo框架\" class=\"headerlink\" title=\"安装hexo框架\"></a>安装hexo框架</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><p>终端cd到一个选定的目录文件下(如新建一个文件夹blog)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure></p>\n<p>查看blog文件下是否存在node_modules文件夹,不在则执行如下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo install</span><br></pre></td></tr></table></figure></p>\n<p>开启hexo服务器，在浏览器打开网址<a href=\"http://localhost:4000，出现hexo页面\" target=\"_blank\" rel=\"noopener\">http://localhost:4000，出现hexo页面</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建github仓库\"><a href=\"#创建github仓库\" class=\"headerlink\" title=\"创建github仓库\"></a>创建github仓库</h3><p>1.打开github，注册账号，需要和电脑关联，在本地创建ssh key，可在百度输入github与本地电脑关联</p>\n<p>2.创建github仓库,点击+号(New repository),新建仓库，名为用户名.github.io固定写法。(用户名就是自己github的名字)</p>\n<p>3.Create repository创建仓库，其它不用选择</p>\n<p>4.cd到blog文件夹，打开配置文件_config.yml<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">    repository: https://github.com/xxx/xxx.github.io.git</span><br><span class=\"line\">    branch: master</span><br></pre></td></tr></table></figure></p>\n<p>你需要将repository后xxx换成你自己的用户名,浏览器输入xxx.github.io</p>\n<h3 id=\"发布文章\"><a href=\"#发布文章\" class=\"headerlink\" title=\"发布文章\"></a>发布文章</h3><p>cd到blog文件夹，执行如下命令新建文章<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">\"postName\"</span></span><br></pre></td></tr></table></figure></p>\n<p>名为postName的文件夹在/blog/source/_posts下。</p>\n<p>编辑文章完成，终端cd到blog文件夹下，执行如下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装theme\"><a href=\"#安装theme\" class=\"headerlink\" title=\"安装theme\"></a>安装theme</h3><p>可以去搜索关于hexo的主题页，修饰自己的个人网站,在github上Clone or download地址<br>终端cd到blog的目录下执行如下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p>\n<p>cd到blog文件夹(每次部署文章的步骤)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>至于更改theme内容，配置主题的网站，去修改blog/_config.yml文件和blog/themes/next/_config.yml，不要忘记冒号：加空格</p>\n<h3 id=\"绑定个人域名\"><a href=\"#绑定个人域名\" class=\"headerlink\" title=\"绑定个人域名\"></a>绑定个人域名</h3><p>1.想让自己的网站看起来更有个性，可以去万网购买喜欢的域名~~</p>\n<p>2.购买域名后，需要进行域名解析，之前先进行域名的实名验证，填写好信息，万网有详细的教程</p>\n<p>3.在blog/source建立CNAME的文件，没有后缀名，内容输入购买的域名，如<a href=\"http://www.xxx.com\" target=\"_blank\" rel=\"noopener\">www.xxx.com</a></p>\n<p>4.在万网对域名进行解析，进入解析设置，点击添加记录，需要添加4条记录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一条记录：</span><br><span class=\"line\">记录类型：A</span><br><span class=\"line\">主机记录:www</span><br><span class=\"line\">解析线路：默认</span><br><span class=\"line\">记录值192.30.252.154</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第二条记录：</span><br><span class=\"line\">记录类型：A</span><br><span class=\"line\">主机记录:@</span><br><span class=\"line\">解析线路：默认</span><br><span class=\"line\">记录值192.30.252.154</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第三条记录：</span><br><span class=\"line\">记录类型：A</span><br><span class=\"line\">主机记录:www</span><br><span class=\"line\">解析线路：默认</span><br><span class=\"line\">记录值192.30.252.153</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第四条记录：</span><br><span class=\"line\">记录类型：A</span><br><span class=\"line\">主机记录:@</span><br><span class=\"line\">解析线路：默认</span><br><span class=\"line\">记录值192.30.252.153</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结和说明\"><a href=\"#总结和说明\" class=\"headerlink\" title=\"总结和说明\"></a>总结和说明</h3><p>hexo + github搭建个人网站非常简单，主要在域名解析部分，当时各种解析添加记录都无法进行解析，这4条记录一定得添加好，绑定属于自己的域名。<br>搭建属于自己的个人网站成就感满满，也希望自己一直坚持写博客，把自己遇到的问题和所做的收获一点一滴记录起来。明天是国庆节，国庆节快乐！！！</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"hexo-github-搭建属于自己的个人博客\"><a href=\"#hexo-github-搭建属于自己的个人博客\" class=\"headerlink\" title=\"hexo + github 搭建属于自己的个人博客\"></a>hexo + github 搭建属于自己的个人博客</h3>","more":"<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>1.<a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">node</a>：安装node，到官网下载，一路安装即可，在命令行输入node -v，出现版本号安装成功。</p>\n<p>2.<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">git</a>：一路安装即可，<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">教程</a></p>\n<p>3.<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">github</a>：程序员的交流网站，用来做博客的远程创库、域名、服务器。</p>\n<p>(Mac系统下载Homebrew，直接在终端进行下载，brew install git、brew install node)</p>\n<h3 id=\"安装hexo框架\"><a href=\"#安装hexo框架\" class=\"headerlink\" title=\"安装hexo框架\"></a>安装hexo框架</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><p>终端cd到一个选定的目录文件下(如新建一个文件夹blog)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure></p>\n<p>查看blog文件下是否存在node_modules文件夹,不在则执行如下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo install</span><br></pre></td></tr></table></figure></p>\n<p>开启hexo服务器，在浏览器打开网址<a href=\"http://localhost:4000，出现hexo页面\" target=\"_blank\" rel=\"noopener\">http://localhost:4000，出现hexo页面</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建github仓库\"><a href=\"#创建github仓库\" class=\"headerlink\" title=\"创建github仓库\"></a>创建github仓库</h3><p>1.打开github，注册账号，需要和电脑关联，在本地创建ssh key，可在百度输入github与本地电脑关联</p>\n<p>2.创建github仓库,点击+号(New repository),新建仓库，名为用户名.github.io固定写法。(用户名就是自己github的名字)</p>\n<p>3.Create repository创建仓库，其它不用选择</p>\n<p>4.cd到blog文件夹，打开配置文件_config.yml<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">    repository: https://github.com/xxx/xxx.github.io.git</span><br><span class=\"line\">    branch: master</span><br></pre></td></tr></table></figure></p>\n<p>你需要将repository后xxx换成你自己的用户名,浏览器输入xxx.github.io</p>\n<h3 id=\"发布文章\"><a href=\"#发布文章\" class=\"headerlink\" title=\"发布文章\"></a>发布文章</h3><p>cd到blog文件夹，执行如下命令新建文章<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">\"postName\"</span></span><br></pre></td></tr></table></figure></p>\n<p>名为postName的文件夹在/blog/source/_posts下。</p>\n<p>编辑文章完成，终端cd到blog文件夹下，执行如下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装theme\"><a href=\"#安装theme\" class=\"headerlink\" title=\"安装theme\"></a>安装theme</h3><p>可以去搜索关于hexo的主题页，修饰自己的个人网站,在github上Clone or download地址<br>终端cd到blog的目录下执行如下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p>\n<p>cd到blog文件夹(每次部署文章的步骤)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>至于更改theme内容，配置主题的网站，去修改blog/_config.yml文件和blog/themes/next/_config.yml，不要忘记冒号：加空格</p>\n<h3 id=\"绑定个人域名\"><a href=\"#绑定个人域名\" class=\"headerlink\" title=\"绑定个人域名\"></a>绑定个人域名</h3><p>1.想让自己的网站看起来更有个性，可以去万网购买喜欢的域名~~</p>\n<p>2.购买域名后，需要进行域名解析，之前先进行域名的实名验证，填写好信息，万网有详细的教程</p>\n<p>3.在blog/source建立CNAME的文件，没有后缀名，内容输入购买的域名，如<a href=\"http://www.xxx.com\" target=\"_blank\" rel=\"noopener\">www.xxx.com</a></p>\n<p>4.在万网对域名进行解析，进入解析设置，点击添加记录，需要添加4条记录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一条记录：</span><br><span class=\"line\">记录类型：A</span><br><span class=\"line\">主机记录:www</span><br><span class=\"line\">解析线路：默认</span><br><span class=\"line\">记录值192.30.252.154</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第二条记录：</span><br><span class=\"line\">记录类型：A</span><br><span class=\"line\">主机记录:@</span><br><span class=\"line\">解析线路：默认</span><br><span class=\"line\">记录值192.30.252.154</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第三条记录：</span><br><span class=\"line\">记录类型：A</span><br><span class=\"line\">主机记录:www</span><br><span class=\"line\">解析线路：默认</span><br><span class=\"line\">记录值192.30.252.153</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第四条记录：</span><br><span class=\"line\">记录类型：A</span><br><span class=\"line\">主机记录:@</span><br><span class=\"line\">解析线路：默认</span><br><span class=\"line\">记录值192.30.252.153</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结和说明\"><a href=\"#总结和说明\" class=\"headerlink\" title=\"总结和说明\"></a>总结和说明</h3><p>hexo + github搭建个人网站非常简单，主要在域名解析部分，当时各种解析添加记录都无法进行解析，这4条记录一定得添加好，绑定属于自己的域名。<br>搭建属于自己的个人网站成就感满满，也希望自己一直坚持写博客，把自己遇到的问题和所做的收获一点一滴记录起来。明天是国庆节，国庆节快乐！！！</p>"},{"title":"express","date":"2019-06-13T10:18:51.000Z","_content":"\n### express使用\n<!-- more -->\n\n### 安装express\n1. npm install express-generator -g\n2. express express-test\n3. npm install\n4. npm start\n\n### 处理路由\napp.js引入并注册路由，根路由和子路由进行拼接\n```\nvar express = require('express');\nvar router = express.Router();\n\nrouter.get('/list', function(req, res, next) {\n  //res.json直接返回json，还可以设置头部是json\n  res.json({\n    errno: 0,\n    data: [1,2,3]\n  })\n});\nmodule.exports = router;\n```\n```\nvar express = require('express');\nvar router = express.Router();\n\nrouter.post('/login', function(req, res, next) {\n  const { username,password } = req.body\n  res.json({\n    errno: 0,\n    data: {\n      username,\n      password\n    }\n  })\n});\n\nmodule.exports = router;\n```\n\n### session和redis\n1. 配置redis\n2. connect-redis将session相关信息持久化\n3. 配置session\n\n```\nconst expressSession = require('express-session');\nconst RedisStore = require('connect-redis')(expressSession)\n\nconst redisClient = require('./db/redis')\nconst sessionStore = new RedisStore({\n  client: redisClient\n})\n\napp.use(expressSession({\n  name: 'session-name', // 这里是cookie的name，默认是connect.sid\n  secret: 'my_session_secret', // 建议使用 128 个字符的随机字符串\n  store: sessionStore,\n  cookie: {\n    path: '/', //默认配置，根目录，前端每个路由都可以用到\n    resave: true,\n    saveUninitialized: false,\n    httpOnly: true, //默认配置,前端无法修改cookie\n    maxAge: 24*60*60*1000 //传入时间段，24小时失效\n  }\n}))\n```\n\n### 中间件\n1. 中间件(middleware)是一个函数,他可以访问请求对象（request object(req)）,响应对象（response object(res)）和web应用中处于请求-响应循环\n2. app.use()就是通常所说的使用中间件\n\n```\nfunction middleware(req,res,next){\n  // 做该干的事\n\n  // 做完后调用下一个函数\n  next();\n}\n```\nnext()表示函数数组中的下一个函数\n\n### 中间件原理\n1. 创建个实例，app.use用来注册中间件，先收集起来\n2. 遇到http请求，根据path和method判断触发哪些\n3. 实现next机制，即上一个通过next触发下一个\n\n```\nlink-express.js\n\nconst http = require('http')\nconst slice = Array.prototype.slice\n\n/**  \n * 定义LikeExpress的class,存放中间件的变量\n * use，get，post都是中间件函数，统一放在register()处理，结果返回分别存入不同的数组\n * register()判断第一个参数，如果是字符串，说明是一个路由。不是字符串则为根路由。把path、stack放在info中，stack是一个数组\n * listen()创建server对象去监听，增加一个callback函数\n * callback函数返回一个回调函数，定义res.json函数设置类型，返回JSON字符串\n * 获取url,method。通过match函数去匹配中间件列表\n * match函数通过routes.all和method把可用的中间件找出来，放在stack中\n * 处理next机制\n * \n*/\n\nclass LikeExpress {\n  constructor() {\n    //存放中间件列表\n    this.routes = {\n      all: [], //存放app.use(...)的中间件\n      get: [],\n      post: []\n    }\n  }\n\n  register(path) {\n    const info = {}\n    \n    /**\n     * 传人的第一个参数可能是路由或一个中间件\n     * 如果是路由，后面则有多个中间件\n     * 如果是中间件,则第一个参数默认为根路径 \n     */ \n    if (typeof path === 'string') {\n      info.path = path\n      //从第二个参数开始，转换为数组，存入stack\n      info.stack = slice.call(arguments,1)\n    }else {\n      info.path = '/'\n      //从第一个参数开始，转换为数组，存入stack\n      info.stack = slice.call(arguments,0)\n    }\n    return info\n  }\n\n  //定义函数，表层输出的方法\n  use() {\n    //通过apply把当前函数的参数传入register(),并执行register()，返回info\n    const info = this.register.apply(this,arguments)\n    this.routes.all.push(info)\n  }\n\n  get() {\n    const info = this.register.apply(this,arguments)\n    this.routes.get.push(info)\n  }\n\n  post() {\n    const info = this.register.apply(this,arguments)\n    this.routes.post.push(info)\n  }\n\n  match(method,url) {\n    let stack = []\n    if (url === '/favicon.ico') {\n      return stack\n    }\n\n    //获取routes\n    let curRoutes = []\n    curRoutes = curRoutes.concat(this.routes.all)\n    curRoutes = curRoutes.concat(this.routes[method])\n\n    curRoutes.forEach(routeInfo => {\n      if (url.indexOf(routeInfo.path === 0)) {\n        stack = stack.concat(routeInfo.stack)\n      }\n    })\n    return stack\n  }\n\n  //核心的next机制\n  handle(req,res,stack) {\n    const next = () => {\n      //拿到第一个匹配的中间件\n      const middleware = stack.shift()\n      if (middleware) {\n        //执行中间件函数\n        middleware(req,res,next)\n      }\n    }\n  }\n\n  callback() {\n    return (req,res) => {\n      res.json = (data) => {\n        res.setHeader('Content-type','application/json')\n        res.end(JSON.stringify(data))\n      }\n      const url = req.url\n      const method = req.method.toLowerCase()\n\n      const resultList = this.match(method,url)\n      this.handle(req,res,resultList)\n    }\n  }\n\n  listen(...args) {\n    const server = http.createServer(this.callback())\n    server.listen(...args)\n  }\n}\n\n/**\n * 输出工厂函数\n */\nmodule.exports = () => {\n  return new LikeExpress()\n}\n```\n\n### 日志-morgan\n新建logs文件夹下的access.log\n判断不同的环境\n\n```\nconst ENV = process.env.NODE_ENV\nif (ENV !== 'production') {\n  app.use(logger('dev'))\n} else {\n  //线上环境\n  const logFileName = path.join(__dirname,'logs','access.log')\n  const writeStream = fs.createWriteStream(logFileName,{\n    flags: 'a'\n  })\n  app.use(logger('combined',{\n    stream: writeStream\n  }))\n}\n```","source":"_posts/express.md","raw":"---\ntitle: express\ndate: 2019-06-13 18:18:51\ntags: ['Node.js']\ncategories: Node.js\n---\n\n### express使用\n<!-- more -->\n\n### 安装express\n1. npm install express-generator -g\n2. express express-test\n3. npm install\n4. npm start\n\n### 处理路由\napp.js引入并注册路由，根路由和子路由进行拼接\n```\nvar express = require('express');\nvar router = express.Router();\n\nrouter.get('/list', function(req, res, next) {\n  //res.json直接返回json，还可以设置头部是json\n  res.json({\n    errno: 0,\n    data: [1,2,3]\n  })\n});\nmodule.exports = router;\n```\n```\nvar express = require('express');\nvar router = express.Router();\n\nrouter.post('/login', function(req, res, next) {\n  const { username,password } = req.body\n  res.json({\n    errno: 0,\n    data: {\n      username,\n      password\n    }\n  })\n});\n\nmodule.exports = router;\n```\n\n### session和redis\n1. 配置redis\n2. connect-redis将session相关信息持久化\n3. 配置session\n\n```\nconst expressSession = require('express-session');\nconst RedisStore = require('connect-redis')(expressSession)\n\nconst redisClient = require('./db/redis')\nconst sessionStore = new RedisStore({\n  client: redisClient\n})\n\napp.use(expressSession({\n  name: 'session-name', // 这里是cookie的name，默认是connect.sid\n  secret: 'my_session_secret', // 建议使用 128 个字符的随机字符串\n  store: sessionStore,\n  cookie: {\n    path: '/', //默认配置，根目录，前端每个路由都可以用到\n    resave: true,\n    saveUninitialized: false,\n    httpOnly: true, //默认配置,前端无法修改cookie\n    maxAge: 24*60*60*1000 //传入时间段，24小时失效\n  }\n}))\n```\n\n### 中间件\n1. 中间件(middleware)是一个函数,他可以访问请求对象（request object(req)）,响应对象（response object(res)）和web应用中处于请求-响应循环\n2. app.use()就是通常所说的使用中间件\n\n```\nfunction middleware(req,res,next){\n  // 做该干的事\n\n  // 做完后调用下一个函数\n  next();\n}\n```\nnext()表示函数数组中的下一个函数\n\n### 中间件原理\n1. 创建个实例，app.use用来注册中间件，先收集起来\n2. 遇到http请求，根据path和method判断触发哪些\n3. 实现next机制，即上一个通过next触发下一个\n\n```\nlink-express.js\n\nconst http = require('http')\nconst slice = Array.prototype.slice\n\n/**  \n * 定义LikeExpress的class,存放中间件的变量\n * use，get，post都是中间件函数，统一放在register()处理，结果返回分别存入不同的数组\n * register()判断第一个参数，如果是字符串，说明是一个路由。不是字符串则为根路由。把path、stack放在info中，stack是一个数组\n * listen()创建server对象去监听，增加一个callback函数\n * callback函数返回一个回调函数，定义res.json函数设置类型，返回JSON字符串\n * 获取url,method。通过match函数去匹配中间件列表\n * match函数通过routes.all和method把可用的中间件找出来，放在stack中\n * 处理next机制\n * \n*/\n\nclass LikeExpress {\n  constructor() {\n    //存放中间件列表\n    this.routes = {\n      all: [], //存放app.use(...)的中间件\n      get: [],\n      post: []\n    }\n  }\n\n  register(path) {\n    const info = {}\n    \n    /**\n     * 传人的第一个参数可能是路由或一个中间件\n     * 如果是路由，后面则有多个中间件\n     * 如果是中间件,则第一个参数默认为根路径 \n     */ \n    if (typeof path === 'string') {\n      info.path = path\n      //从第二个参数开始，转换为数组，存入stack\n      info.stack = slice.call(arguments,1)\n    }else {\n      info.path = '/'\n      //从第一个参数开始，转换为数组，存入stack\n      info.stack = slice.call(arguments,0)\n    }\n    return info\n  }\n\n  //定义函数，表层输出的方法\n  use() {\n    //通过apply把当前函数的参数传入register(),并执行register()，返回info\n    const info = this.register.apply(this,arguments)\n    this.routes.all.push(info)\n  }\n\n  get() {\n    const info = this.register.apply(this,arguments)\n    this.routes.get.push(info)\n  }\n\n  post() {\n    const info = this.register.apply(this,arguments)\n    this.routes.post.push(info)\n  }\n\n  match(method,url) {\n    let stack = []\n    if (url === '/favicon.ico') {\n      return stack\n    }\n\n    //获取routes\n    let curRoutes = []\n    curRoutes = curRoutes.concat(this.routes.all)\n    curRoutes = curRoutes.concat(this.routes[method])\n\n    curRoutes.forEach(routeInfo => {\n      if (url.indexOf(routeInfo.path === 0)) {\n        stack = stack.concat(routeInfo.stack)\n      }\n    })\n    return stack\n  }\n\n  //核心的next机制\n  handle(req,res,stack) {\n    const next = () => {\n      //拿到第一个匹配的中间件\n      const middleware = stack.shift()\n      if (middleware) {\n        //执行中间件函数\n        middleware(req,res,next)\n      }\n    }\n  }\n\n  callback() {\n    return (req,res) => {\n      res.json = (data) => {\n        res.setHeader('Content-type','application/json')\n        res.end(JSON.stringify(data))\n      }\n      const url = req.url\n      const method = req.method.toLowerCase()\n\n      const resultList = this.match(method,url)\n      this.handle(req,res,resultList)\n    }\n  }\n\n  listen(...args) {\n    const server = http.createServer(this.callback())\n    server.listen(...args)\n  }\n}\n\n/**\n * 输出工厂函数\n */\nmodule.exports = () => {\n  return new LikeExpress()\n}\n```\n\n### 日志-morgan\n新建logs文件夹下的access.log\n判断不同的环境\n\n```\nconst ENV = process.env.NODE_ENV\nif (ENV !== 'production') {\n  app.use(logger('dev'))\n} else {\n  //线上环境\n  const logFileName = path.join(__dirname,'logs','access.log')\n  const writeStream = fs.createWriteStream(logFileName,{\n    flags: 'a'\n  })\n  app.use(logger('combined',{\n    stream: writeStream\n  }))\n}\n```","slug":"express","published":1,"updated":"2019-06-13T10:21:30.413Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq421001dhe6jraawb6k1","content":"<h3 id=\"express使用\"><a href=\"#express使用\" class=\"headerlink\" title=\"express使用\"></a>express使用</h3><a id=\"more\"></a>\n<h3 id=\"安装express\"><a href=\"#安装express\" class=\"headerlink\" title=\"安装express\"></a>安装express</h3><ol>\n<li>npm install express-generator -g</li>\n<li>express express-test</li>\n<li>npm install</li>\n<li>npm start</li>\n</ol>\n<h3 id=\"处理路由\"><a href=\"#处理路由\" class=\"headerlink\" title=\"处理路由\"></a>处理路由</h3><p>app.js引入并注册路由，根路由和子路由进行拼接<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(&apos;/list&apos;, function(req, res, next) &#123;</span><br><span class=\"line\">  //res.json直接返回json，还可以设置头部是json</span><br><span class=\"line\">  res.json(&#123;</span><br><span class=\"line\">    errno: 0,</span><br><span class=\"line\">    data: [1,2,3]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">module.exports = router;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(&apos;/login&apos;, function(req, res, next) &#123;</span><br><span class=\"line\">  const &#123; username,password &#125; = req.body</span><br><span class=\"line\">  res.json(&#123;</span><br><span class=\"line\">    errno: 0,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      username,</span><br><span class=\"line\">      password</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = router;</span><br></pre></td></tr></table></figure>\n<h3 id=\"session和redis\"><a href=\"#session和redis\" class=\"headerlink\" title=\"session和redis\"></a>session和redis</h3><ol>\n<li>配置redis</li>\n<li>connect-redis将session相关信息持久化</li>\n<li>配置session</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const expressSession = require(&apos;express-session&apos;);</span><br><span class=\"line\">const RedisStore = require(&apos;connect-redis&apos;)(expressSession)</span><br><span class=\"line\"></span><br><span class=\"line\">const redisClient = require(&apos;./db/redis&apos;)</span><br><span class=\"line\">const sessionStore = new RedisStore(&#123;</span><br><span class=\"line\">  client: redisClient</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(expressSession(&#123;</span><br><span class=\"line\">  name: &apos;session-name&apos;, // 这里是cookie的name，默认是connect.sid</span><br><span class=\"line\">  secret: &apos;my_session_secret&apos;, // 建议使用 128 个字符的随机字符串</span><br><span class=\"line\">  store: sessionStore,</span><br><span class=\"line\">  cookie: &#123;</span><br><span class=\"line\">    path: &apos;/&apos;, //默认配置，根目录，前端每个路由都可以用到</span><br><span class=\"line\">    resave: true,</span><br><span class=\"line\">    saveUninitialized: false,</span><br><span class=\"line\">    httpOnly: true, //默认配置,前端无法修改cookie</span><br><span class=\"line\">    maxAge: 24*60*60*1000 //传入时间段，24小时失效</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n<h3 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h3><ol>\n<li>中间件(middleware)是一个函数,他可以访问请求对象（request object(req)）,响应对象（response object(res)）和web应用中处于请求-响应循环</li>\n<li>app.use()就是通常所说的使用中间件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function middleware(req,res,next)&#123;</span><br><span class=\"line\">  // 做该干的事</span><br><span class=\"line\"></span><br><span class=\"line\">  // 做完后调用下一个函数</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>next()表示函数数组中的下一个函数</p>\n<h3 id=\"中间件原理\"><a href=\"#中间件原理\" class=\"headerlink\" title=\"中间件原理\"></a>中间件原理</h3><ol>\n<li>创建个实例，app.use用来注册中间件，先收集起来</li>\n<li>遇到http请求，根据path和method判断触发哪些</li>\n<li>实现next机制，即上一个通过next触发下一个</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">link-express.js</span><br><span class=\"line\"></span><br><span class=\"line\">const http = require(&apos;http&apos;)</span><br><span class=\"line\">const slice = Array.prototype.slice</span><br><span class=\"line\"></span><br><span class=\"line\">/**  </span><br><span class=\"line\"> * 定义LikeExpress的class,存放中间件的变量</span><br><span class=\"line\"> * use，get，post都是中间件函数，统一放在register()处理，结果返回分别存入不同的数组</span><br><span class=\"line\"> * register()判断第一个参数，如果是字符串，说明是一个路由。不是字符串则为根路由。把path、stack放在info中，stack是一个数组</span><br><span class=\"line\"> * listen()创建server对象去监听，增加一个callback函数</span><br><span class=\"line\"> * callback函数返回一个回调函数，定义res.json函数设置类型，返回JSON字符串</span><br><span class=\"line\"> * 获取url,method。通过match函数去匹配中间件列表</span><br><span class=\"line\"> * match函数通过routes.all和method把可用的中间件找出来，放在stack中</span><br><span class=\"line\"> * 处理next机制</span><br><span class=\"line\"> * </span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">class LikeExpress &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    //存放中间件列表</span><br><span class=\"line\">    this.routes = &#123;</span><br><span class=\"line\">      all: [], //存放app.use(...)的中间件</span><br><span class=\"line\">      get: [],</span><br><span class=\"line\">      post: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  register(path) &#123;</span><br><span class=\"line\">    const info = &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 传人的第一个参数可能是路由或一个中间件</span><br><span class=\"line\">     * 如果是路由，后面则有多个中间件</span><br><span class=\"line\">     * 如果是中间件,则第一个参数默认为根路径 </span><br><span class=\"line\">     */ </span><br><span class=\"line\">    if (typeof path === &apos;string&apos;) &#123;</span><br><span class=\"line\">      info.path = path</span><br><span class=\"line\">      //从第二个参数开始，转换为数组，存入stack</span><br><span class=\"line\">      info.stack = slice.call(arguments,1)</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">      info.path = &apos;/&apos;</span><br><span class=\"line\">      //从第一个参数开始，转换为数组，存入stack</span><br><span class=\"line\">      info.stack = slice.call(arguments,0)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return info</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //定义函数，表层输出的方法</span><br><span class=\"line\">  use() &#123;</span><br><span class=\"line\">    //通过apply把当前函数的参数传入register(),并执行register()，返回info</span><br><span class=\"line\">    const info = this.register.apply(this,arguments)</span><br><span class=\"line\">    this.routes.all.push(info)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  get() &#123;</span><br><span class=\"line\">    const info = this.register.apply(this,arguments)</span><br><span class=\"line\">    this.routes.get.push(info)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  post() &#123;</span><br><span class=\"line\">    const info = this.register.apply(this,arguments)</span><br><span class=\"line\">    this.routes.post.push(info)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  match(method,url) &#123;</span><br><span class=\"line\">    let stack = []</span><br><span class=\"line\">    if (url === &apos;/favicon.ico&apos;) &#123;</span><br><span class=\"line\">      return stack</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取routes</span><br><span class=\"line\">    let curRoutes = []</span><br><span class=\"line\">    curRoutes = curRoutes.concat(this.routes.all)</span><br><span class=\"line\">    curRoutes = curRoutes.concat(this.routes[method])</span><br><span class=\"line\"></span><br><span class=\"line\">    curRoutes.forEach(routeInfo =&gt; &#123;</span><br><span class=\"line\">      if (url.indexOf(routeInfo.path === 0)) &#123;</span><br><span class=\"line\">        stack = stack.concat(routeInfo.stack)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    return stack</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //核心的next机制</span><br><span class=\"line\">  handle(req,res,stack) &#123;</span><br><span class=\"line\">    const next = () =&gt; &#123;</span><br><span class=\"line\">      //拿到第一个匹配的中间件</span><br><span class=\"line\">      const middleware = stack.shift()</span><br><span class=\"line\">      if (middleware) &#123;</span><br><span class=\"line\">        //执行中间件函数</span><br><span class=\"line\">        middleware(req,res,next)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  callback() &#123;</span><br><span class=\"line\">    return (req,res) =&gt; &#123;</span><br><span class=\"line\">      res.json = (data) =&gt; &#123;</span><br><span class=\"line\">        res.setHeader(&apos;Content-type&apos;,&apos;application/json&apos;)</span><br><span class=\"line\">        res.end(JSON.stringify(data))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      const url = req.url</span><br><span class=\"line\">      const method = req.method.toLowerCase()</span><br><span class=\"line\"></span><br><span class=\"line\">      const resultList = this.match(method,url)</span><br><span class=\"line\">      this.handle(req,res,resultList)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  listen(...args) &#123;</span><br><span class=\"line\">    const server = http.createServer(this.callback())</span><br><span class=\"line\">    server.listen(...args)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 输出工厂函数</span><br><span class=\"line\"> */</span><br><span class=\"line\">module.exports = () =&gt; &#123;</span><br><span class=\"line\">  return new LikeExpress()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"日志-morgan\"><a href=\"#日志-morgan\" class=\"headerlink\" title=\"日志-morgan\"></a>日志-morgan</h3><p>新建logs文件夹下的access.log<br>判断不同的环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const ENV = process.env.NODE_ENV</span><br><span class=\"line\">if (ENV !== &apos;production&apos;) &#123;</span><br><span class=\"line\">  app.use(logger(&apos;dev&apos;))</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  //线上环境</span><br><span class=\"line\">  const logFileName = path.join(__dirname,&apos;logs&apos;,&apos;access.log&apos;)</span><br><span class=\"line\">  const writeStream = fs.createWriteStream(logFileName,&#123;</span><br><span class=\"line\">    flags: &apos;a&apos;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  app.use(logger(&apos;combined&apos;,&#123;</span><br><span class=\"line\">    stream: writeStream</span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"express使用\"><a href=\"#express使用\" class=\"headerlink\" title=\"express使用\"></a>express使用</h3>","more":"<h3 id=\"安装express\"><a href=\"#安装express\" class=\"headerlink\" title=\"安装express\"></a>安装express</h3><ol>\n<li>npm install express-generator -g</li>\n<li>express express-test</li>\n<li>npm install</li>\n<li>npm start</li>\n</ol>\n<h3 id=\"处理路由\"><a href=\"#处理路由\" class=\"headerlink\" title=\"处理路由\"></a>处理路由</h3><p>app.js引入并注册路由，根路由和子路由进行拼接<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(&apos;/list&apos;, function(req, res, next) &#123;</span><br><span class=\"line\">  //res.json直接返回json，还可以设置头部是json</span><br><span class=\"line\">  res.json(&#123;</span><br><span class=\"line\">    errno: 0,</span><br><span class=\"line\">    data: [1,2,3]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">module.exports = router;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(&apos;/login&apos;, function(req, res, next) &#123;</span><br><span class=\"line\">  const &#123; username,password &#125; = req.body</span><br><span class=\"line\">  res.json(&#123;</span><br><span class=\"line\">    errno: 0,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      username,</span><br><span class=\"line\">      password</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = router;</span><br></pre></td></tr></table></figure>\n<h3 id=\"session和redis\"><a href=\"#session和redis\" class=\"headerlink\" title=\"session和redis\"></a>session和redis</h3><ol>\n<li>配置redis</li>\n<li>connect-redis将session相关信息持久化</li>\n<li>配置session</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const expressSession = require(&apos;express-session&apos;);</span><br><span class=\"line\">const RedisStore = require(&apos;connect-redis&apos;)(expressSession)</span><br><span class=\"line\"></span><br><span class=\"line\">const redisClient = require(&apos;./db/redis&apos;)</span><br><span class=\"line\">const sessionStore = new RedisStore(&#123;</span><br><span class=\"line\">  client: redisClient</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(expressSession(&#123;</span><br><span class=\"line\">  name: &apos;session-name&apos;, // 这里是cookie的name，默认是connect.sid</span><br><span class=\"line\">  secret: &apos;my_session_secret&apos;, // 建议使用 128 个字符的随机字符串</span><br><span class=\"line\">  store: sessionStore,</span><br><span class=\"line\">  cookie: &#123;</span><br><span class=\"line\">    path: &apos;/&apos;, //默认配置，根目录，前端每个路由都可以用到</span><br><span class=\"line\">    resave: true,</span><br><span class=\"line\">    saveUninitialized: false,</span><br><span class=\"line\">    httpOnly: true, //默认配置,前端无法修改cookie</span><br><span class=\"line\">    maxAge: 24*60*60*1000 //传入时间段，24小时失效</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n<h3 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h3><ol>\n<li>中间件(middleware)是一个函数,他可以访问请求对象（request object(req)）,响应对象（response object(res)）和web应用中处于请求-响应循环</li>\n<li>app.use()就是通常所说的使用中间件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function middleware(req,res,next)&#123;</span><br><span class=\"line\">  // 做该干的事</span><br><span class=\"line\"></span><br><span class=\"line\">  // 做完后调用下一个函数</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>next()表示函数数组中的下一个函数</p>\n<h3 id=\"中间件原理\"><a href=\"#中间件原理\" class=\"headerlink\" title=\"中间件原理\"></a>中间件原理</h3><ol>\n<li>创建个实例，app.use用来注册中间件，先收集起来</li>\n<li>遇到http请求，根据path和method判断触发哪些</li>\n<li>实现next机制，即上一个通过next触发下一个</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">link-express.js</span><br><span class=\"line\"></span><br><span class=\"line\">const http = require(&apos;http&apos;)</span><br><span class=\"line\">const slice = Array.prototype.slice</span><br><span class=\"line\"></span><br><span class=\"line\">/**  </span><br><span class=\"line\"> * 定义LikeExpress的class,存放中间件的变量</span><br><span class=\"line\"> * use，get，post都是中间件函数，统一放在register()处理，结果返回分别存入不同的数组</span><br><span class=\"line\"> * register()判断第一个参数，如果是字符串，说明是一个路由。不是字符串则为根路由。把path、stack放在info中，stack是一个数组</span><br><span class=\"line\"> * listen()创建server对象去监听，增加一个callback函数</span><br><span class=\"line\"> * callback函数返回一个回调函数，定义res.json函数设置类型，返回JSON字符串</span><br><span class=\"line\"> * 获取url,method。通过match函数去匹配中间件列表</span><br><span class=\"line\"> * match函数通过routes.all和method把可用的中间件找出来，放在stack中</span><br><span class=\"line\"> * 处理next机制</span><br><span class=\"line\"> * </span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">class LikeExpress &#123;</span><br><span class=\"line\">  constructor() &#123;</span><br><span class=\"line\">    //存放中间件列表</span><br><span class=\"line\">    this.routes = &#123;</span><br><span class=\"line\">      all: [], //存放app.use(...)的中间件</span><br><span class=\"line\">      get: [],</span><br><span class=\"line\">      post: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  register(path) &#123;</span><br><span class=\"line\">    const info = &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 传人的第一个参数可能是路由或一个中间件</span><br><span class=\"line\">     * 如果是路由，后面则有多个中间件</span><br><span class=\"line\">     * 如果是中间件,则第一个参数默认为根路径 </span><br><span class=\"line\">     */ </span><br><span class=\"line\">    if (typeof path === &apos;string&apos;) &#123;</span><br><span class=\"line\">      info.path = path</span><br><span class=\"line\">      //从第二个参数开始，转换为数组，存入stack</span><br><span class=\"line\">      info.stack = slice.call(arguments,1)</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">      info.path = &apos;/&apos;</span><br><span class=\"line\">      //从第一个参数开始，转换为数组，存入stack</span><br><span class=\"line\">      info.stack = slice.call(arguments,0)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return info</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //定义函数，表层输出的方法</span><br><span class=\"line\">  use() &#123;</span><br><span class=\"line\">    //通过apply把当前函数的参数传入register(),并执行register()，返回info</span><br><span class=\"line\">    const info = this.register.apply(this,arguments)</span><br><span class=\"line\">    this.routes.all.push(info)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  get() &#123;</span><br><span class=\"line\">    const info = this.register.apply(this,arguments)</span><br><span class=\"line\">    this.routes.get.push(info)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  post() &#123;</span><br><span class=\"line\">    const info = this.register.apply(this,arguments)</span><br><span class=\"line\">    this.routes.post.push(info)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  match(method,url) &#123;</span><br><span class=\"line\">    let stack = []</span><br><span class=\"line\">    if (url === &apos;/favicon.ico&apos;) &#123;</span><br><span class=\"line\">      return stack</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取routes</span><br><span class=\"line\">    let curRoutes = []</span><br><span class=\"line\">    curRoutes = curRoutes.concat(this.routes.all)</span><br><span class=\"line\">    curRoutes = curRoutes.concat(this.routes[method])</span><br><span class=\"line\"></span><br><span class=\"line\">    curRoutes.forEach(routeInfo =&gt; &#123;</span><br><span class=\"line\">      if (url.indexOf(routeInfo.path === 0)) &#123;</span><br><span class=\"line\">        stack = stack.concat(routeInfo.stack)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    return stack</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //核心的next机制</span><br><span class=\"line\">  handle(req,res,stack) &#123;</span><br><span class=\"line\">    const next = () =&gt; &#123;</span><br><span class=\"line\">      //拿到第一个匹配的中间件</span><br><span class=\"line\">      const middleware = stack.shift()</span><br><span class=\"line\">      if (middleware) &#123;</span><br><span class=\"line\">        //执行中间件函数</span><br><span class=\"line\">        middleware(req,res,next)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  callback() &#123;</span><br><span class=\"line\">    return (req,res) =&gt; &#123;</span><br><span class=\"line\">      res.json = (data) =&gt; &#123;</span><br><span class=\"line\">        res.setHeader(&apos;Content-type&apos;,&apos;application/json&apos;)</span><br><span class=\"line\">        res.end(JSON.stringify(data))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      const url = req.url</span><br><span class=\"line\">      const method = req.method.toLowerCase()</span><br><span class=\"line\"></span><br><span class=\"line\">      const resultList = this.match(method,url)</span><br><span class=\"line\">      this.handle(req,res,resultList)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  listen(...args) &#123;</span><br><span class=\"line\">    const server = http.createServer(this.callback())</span><br><span class=\"line\">    server.listen(...args)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 输出工厂函数</span><br><span class=\"line\"> */</span><br><span class=\"line\">module.exports = () =&gt; &#123;</span><br><span class=\"line\">  return new LikeExpress()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"日志-morgan\"><a href=\"#日志-morgan\" class=\"headerlink\" title=\"日志-morgan\"></a>日志-morgan</h3><p>新建logs文件夹下的access.log<br>判断不同的环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const ENV = process.env.NODE_ENV</span><br><span class=\"line\">if (ENV !== &apos;production&apos;) &#123;</span><br><span class=\"line\">  app.use(logger(&apos;dev&apos;))</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  //线上环境</span><br><span class=\"line\">  const logFileName = path.join(__dirname,&apos;logs&apos;,&apos;access.log&apos;)</span><br><span class=\"line\">  const writeStream = fs.createWriteStream(logFileName,&#123;</span><br><span class=\"line\">    flags: &apos;a&apos;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  app.use(logger(&apos;combined&apos;,&#123;</span><br><span class=\"line\">    stream: writeStream</span><br><span class=\"line\">  &#125;))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"JavaScript数组扁平化","_content":"\n### JavaScript数组扁平化\n<!-- more -->\n\n> 数组的扁平化，就是将一个嵌套多层的数组 array (嵌套可以是任何层数)转换为只有一层的数组\n\n#### 递归\n> 循坏各个数组元素，如果还是一个数组，进行递归调用该方法\n\n```\nvar arr = [1,[2,3],[4,[5,6]]]\n\nfunction flatten(arr) {\n    var result = []\n    for (var i = 0, len = arr.length; i < len; i++) {\n        //是否为数组，是则进行递归,数组合并\n        if (Array.isArray(arr[i])) {\n            result = result.concat(flatten(arr[i]))\n        }else {\n            result.push(arr[i])\n        }\n    }\n    return result\n}\n\nconsole.log(flatten(arr))\n```\n\n### reduce\n> 对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值\n\n```\nvar arr = [1,[2,3],[4,[5,6]]]\n\nfunction flatten(arr) {\n    return arr.reduce(function(prev,next) {\n        return prev.concat(Array.isArray(next) ? flatten(next) : next)\n    },[])\n}\n\nconsole.log(flatten(arr))\n```\n\n### ES6 增加了扩展运算符\n> ES6的扩展运算符只可以扁平一层，结合while和Array.some()\n\n1. while\nwhile 语句可以在某个条件表达式为真的前提下，循环执行指定的一段代码，直到那个表达式不为真时结束循环\n\n2. Array.some()\n测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值(数组有1个满足条件，返回true。数组的元素全部不满足条件才返回false)\n\n```\nvar arr = [1,[2,3],[4,[5,6]]]\n\nfunction flatten(arr) {\n    while(arr.some(item => Array.isArray(item))) {\n        arr = [].concat(...arr)\n    }\n    return arr\n}\nconsole.log(flatten(arr))\n```\n","source":"_posts/flatten.md","raw":"---\ntitle: JavaScript数组扁平化\ntags: ['JavaScript']\ncategories: JavaScript\n---\n\n### JavaScript数组扁平化\n<!-- more -->\n\n> 数组的扁平化，就是将一个嵌套多层的数组 array (嵌套可以是任何层数)转换为只有一层的数组\n\n#### 递归\n> 循坏各个数组元素，如果还是一个数组，进行递归调用该方法\n\n```\nvar arr = [1,[2,3],[4,[5,6]]]\n\nfunction flatten(arr) {\n    var result = []\n    for (var i = 0, len = arr.length; i < len; i++) {\n        //是否为数组，是则进行递归,数组合并\n        if (Array.isArray(arr[i])) {\n            result = result.concat(flatten(arr[i]))\n        }else {\n            result.push(arr[i])\n        }\n    }\n    return result\n}\n\nconsole.log(flatten(arr))\n```\n\n### reduce\n> 对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值\n\n```\nvar arr = [1,[2,3],[4,[5,6]]]\n\nfunction flatten(arr) {\n    return arr.reduce(function(prev,next) {\n        return prev.concat(Array.isArray(next) ? flatten(next) : next)\n    },[])\n}\n\nconsole.log(flatten(arr))\n```\n\n### ES6 增加了扩展运算符\n> ES6的扩展运算符只可以扁平一层，结合while和Array.some()\n\n1. while\nwhile 语句可以在某个条件表达式为真的前提下，循环执行指定的一段代码，直到那个表达式不为真时结束循环\n\n2. Array.some()\n测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值(数组有1个满足条件，返回true。数组的元素全部不满足条件才返回false)\n\n```\nvar arr = [1,[2,3],[4,[5,6]]]\n\nfunction flatten(arr) {\n    while(arr.some(item => Array.isArray(item))) {\n        arr = [].concat(...arr)\n    }\n    return arr\n}\nconsole.log(flatten(arr))\n```\n","slug":"flatten","published":1,"date":"2019-10-24T02:34:28.240Z","updated":"2019-10-24T02:40:54.883Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq423001ghe6j910lfltr","content":"<h3 id=\"JavaScript数组扁平化\"><a href=\"#JavaScript数组扁平化\" class=\"headerlink\" title=\"JavaScript数组扁平化\"></a>JavaScript数组扁平化</h3><a id=\"more\"></a>\n<blockquote>\n<p>数组的扁平化，就是将一个嵌套多层的数组 array (嵌套可以是任何层数)转换为只有一层的数组</p>\n</blockquote>\n<h4 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h4><blockquote>\n<p>循坏各个数组元素，如果还是一个数组，进行递归调用该方法</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,[2,3],[4,[5,6]]]</span><br><span class=\"line\"></span><br><span class=\"line\">function flatten(arr) &#123;</span><br><span class=\"line\">    var result = []</span><br><span class=\"line\">    for (var i = 0, len = arr.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">        //是否为数组，是则进行递归,数组合并</span><br><span class=\"line\">        if (Array.isArray(arr[i])) &#123;</span><br><span class=\"line\">            result = result.concat(flatten(arr[i]))</span><br><span class=\"line\">        &#125;else &#123;</span><br><span class=\"line\">            result.push(arr[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(flatten(arr))</span><br></pre></td></tr></table></figure>\n<h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h3><blockquote>\n<p>对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,[2,3],[4,[5,6]]]</span><br><span class=\"line\"></span><br><span class=\"line\">function flatten(arr) &#123;</span><br><span class=\"line\">    return arr.reduce(function(prev,next) &#123;</span><br><span class=\"line\">        return prev.concat(Array.isArray(next) ? flatten(next) : next)</span><br><span class=\"line\">    &#125;,[])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(flatten(arr))</span><br></pre></td></tr></table></figure>\n<h3 id=\"ES6-增加了扩展运算符\"><a href=\"#ES6-增加了扩展运算符\" class=\"headerlink\" title=\"ES6 增加了扩展运算符\"></a>ES6 增加了扩展运算符</h3><blockquote>\n<p>ES6的扩展运算符只可以扁平一层，结合while和Array.some()</p>\n</blockquote>\n<ol>\n<li><p>while<br>while 语句可以在某个条件表达式为真的前提下，循环执行指定的一段代码，直到那个表达式不为真时结束循环</p>\n</li>\n<li><p>Array.some()<br>测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值(数组有1个满足条件，返回true。数组的元素全部不满足条件才返回false)</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,[2,3],[4,[5,6]]]</span><br><span class=\"line\"></span><br><span class=\"line\">function flatten(arr) &#123;</span><br><span class=\"line\">    while(arr.some(item =&gt; Array.isArray(item))) &#123;</span><br><span class=\"line\">        arr = [].concat(...arr)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(flatten(arr))</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"JavaScript数组扁平化\"><a href=\"#JavaScript数组扁平化\" class=\"headerlink\" title=\"JavaScript数组扁平化\"></a>JavaScript数组扁平化</h3>","more":"<blockquote>\n<p>数组的扁平化，就是将一个嵌套多层的数组 array (嵌套可以是任何层数)转换为只有一层的数组</p>\n</blockquote>\n<h4 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h4><blockquote>\n<p>循坏各个数组元素，如果还是一个数组，进行递归调用该方法</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,[2,3],[4,[5,6]]]</span><br><span class=\"line\"></span><br><span class=\"line\">function flatten(arr) &#123;</span><br><span class=\"line\">    var result = []</span><br><span class=\"line\">    for (var i = 0, len = arr.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">        //是否为数组，是则进行递归,数组合并</span><br><span class=\"line\">        if (Array.isArray(arr[i])) &#123;</span><br><span class=\"line\">            result = result.concat(flatten(arr[i]))</span><br><span class=\"line\">        &#125;else &#123;</span><br><span class=\"line\">            result.push(arr[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(flatten(arr))</span><br></pre></td></tr></table></figure>\n<h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h3><blockquote>\n<p>对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,[2,3],[4,[5,6]]]</span><br><span class=\"line\"></span><br><span class=\"line\">function flatten(arr) &#123;</span><br><span class=\"line\">    return arr.reduce(function(prev,next) &#123;</span><br><span class=\"line\">        return prev.concat(Array.isArray(next) ? flatten(next) : next)</span><br><span class=\"line\">    &#125;,[])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(flatten(arr))</span><br></pre></td></tr></table></figure>\n<h3 id=\"ES6-增加了扩展运算符\"><a href=\"#ES6-增加了扩展运算符\" class=\"headerlink\" title=\"ES6 增加了扩展运算符\"></a>ES6 增加了扩展运算符</h3><blockquote>\n<p>ES6的扩展运算符只可以扁平一层，结合while和Array.some()</p>\n</blockquote>\n<ol>\n<li><p>while<br>while 语句可以在某个条件表达式为真的前提下，循环执行指定的一段代码，直到那个表达式不为真时结束循环</p>\n</li>\n<li><p>Array.some()<br>测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值(数组有1个满足条件，返回true。数组的元素全部不满足条件才返回false)</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,[2,3],[4,[5,6]]]</span><br><span class=\"line\"></span><br><span class=\"line\">function flatten(arr) &#123;</span><br><span class=\"line\">    while(arr.some(item =&gt; Array.isArray(item))) &#123;</span><br><span class=\"line\">        arr = [].concat(...arr)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return arr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(flatten(arr))</span><br></pre></td></tr></table></figure>"},{"title":"Flutter学习之路 - Flutter 开发环境安装","date":"2020-05-23T02:12:13.000Z","_content":"\n### Mac 电脑 Flutter 开发环境\n\n<!-- more -->\n\n### 环境变量设置\n\n1.打开环境变量设置文件 open .bash_profile\n\nFlutter 官方为中国开发者搭建了临时镜像，加入环境变量\n\n```\nexport PUB_HOSTED_URL=https://pub.flutter-io.cn\nexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn\n```\n\n2.下载 Flutter SDK(选择稳定版)\n\n解压 SDK 到一个你知道到目录下，加入环境变量,复杂 Flutter SDK 下到 bin 目录\n例如： SDK 在 /Users/用户/Documents/flutter/bin\n\n```\nexport PATH=`pwd`/flutter/bin:$PATH\n\nSDK的目录\nexport PATH= /Users/用户/Documents/flutter/bin :$PATH\n```\n\n3.运行 flutter doctor 命令查看是否需要安装其它依赖项来完成安装\n\n4.创建项目\n\n```\nflutter create my_app\n```\n\n### iOS 设置\n\n1.安装 Xcode，根据 flutter 的 SDK 版本要求下载不同的 Xcode 版本\n\n2.运行 open -a Simulator 打开模拟器\n\n3.运行 flutter run 启动您的应用\n\n### Android 设置\n\n1.安装 Android Studio\n\n2.环境变量\n\n```\n#Android 环境变量\nexport ANDROID_HOME=/Users/你的用户名/Library/Android/sdk\n#Android 模拟器路径\nexport PATH=${PATH}:${ANDROID_HOME}/emulator\n#Android tools 路径\nexport PATH=${PATH}:${ANDROID_HOME}/tools\n#Android 平台工具路径\nexport PATH=${PATH}:${ANDROID_HOME}/platform-tools\n#Android NDK路径\nANDROID_NDK_HOME=/Users/你的用户名/Library/Android/ndk/android-ndk-r10e\n```\n\n3.插件安装\n打开 Preferences > Plugins (macOS), File > Settings > Plugins (Windows & Linux)\n安装 Flutter、Dart 插件\n\n启动项目不同版本的 Android Studio 的 SDK 要求不一样，具体看是否报错\n\n### VScode 编辑器设置\n\n1.command + shift + p ,Flutter: New Project 也可以创建 Flutter 项目\n\n2.下载 Dart 和 Flutter 扩展\n\n3.打开项目，右下角 No Device 选择模拟器\n\n4.command + shift + p 选择 Debug: Start Debugging 启动项目\n\n### 总结\n\nFlutter 开发环境比 RN 的开发环境安装要简单的多，按照文档安装即可\n","source":"_posts/flutter-1-create-flutter.md","raw":"---\ntitle: Flutter学习之路 - Flutter 开发环境安装\ndate: 2020-05-23 10:12:13\ntags: ['Flutter']\ncategories: Flutter\n---\n\n### Mac 电脑 Flutter 开发环境\n\n<!-- more -->\n\n### 环境变量设置\n\n1.打开环境变量设置文件 open .bash_profile\n\nFlutter 官方为中国开发者搭建了临时镜像，加入环境变量\n\n```\nexport PUB_HOSTED_URL=https://pub.flutter-io.cn\nexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn\n```\n\n2.下载 Flutter SDK(选择稳定版)\n\n解压 SDK 到一个你知道到目录下，加入环境变量,复杂 Flutter SDK 下到 bin 目录\n例如： SDK 在 /Users/用户/Documents/flutter/bin\n\n```\nexport PATH=`pwd`/flutter/bin:$PATH\n\nSDK的目录\nexport PATH= /Users/用户/Documents/flutter/bin :$PATH\n```\n\n3.运行 flutter doctor 命令查看是否需要安装其它依赖项来完成安装\n\n4.创建项目\n\n```\nflutter create my_app\n```\n\n### iOS 设置\n\n1.安装 Xcode，根据 flutter 的 SDK 版本要求下载不同的 Xcode 版本\n\n2.运行 open -a Simulator 打开模拟器\n\n3.运行 flutter run 启动您的应用\n\n### Android 设置\n\n1.安装 Android Studio\n\n2.环境变量\n\n```\n#Android 环境变量\nexport ANDROID_HOME=/Users/你的用户名/Library/Android/sdk\n#Android 模拟器路径\nexport PATH=${PATH}:${ANDROID_HOME}/emulator\n#Android tools 路径\nexport PATH=${PATH}:${ANDROID_HOME}/tools\n#Android 平台工具路径\nexport PATH=${PATH}:${ANDROID_HOME}/platform-tools\n#Android NDK路径\nANDROID_NDK_HOME=/Users/你的用户名/Library/Android/ndk/android-ndk-r10e\n```\n\n3.插件安装\n打开 Preferences > Plugins (macOS), File > Settings > Plugins (Windows & Linux)\n安装 Flutter、Dart 插件\n\n启动项目不同版本的 Android Studio 的 SDK 要求不一样，具体看是否报错\n\n### VScode 编辑器设置\n\n1.command + shift + p ,Flutter: New Project 也可以创建 Flutter 项目\n\n2.下载 Dart 和 Flutter 扩展\n\n3.打开项目，右下角 No Device 选择模拟器\n\n4.command + shift + p 选择 Debug: Start Debugging 启动项目\n\n### 总结\n\nFlutter 开发环境比 RN 的开发环境安装要简单的多，按照文档安装即可\n","slug":"flutter-1-create-flutter","published":1,"updated":"2020-05-23T02:17:26.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq425001jhe6ja7mjm4j4","content":"<h3 id=\"Mac-电脑-Flutter-开发环境\"><a href=\"#Mac-电脑-Flutter-开发环境\" class=\"headerlink\" title=\"Mac 电脑 Flutter 开发环境\"></a>Mac 电脑 Flutter 开发环境</h3><a id=\"more\"></a>\n<h3 id=\"环境变量设置\"><a href=\"#环境变量设置\" class=\"headerlink\" title=\"环境变量设置\"></a>环境变量设置</h3><p>1.打开环境变量设置文件 open .bash_profile</p>\n<p>Flutter 官方为中国开发者搭建了临时镜像，加入环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class=\"line\">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure>\n<p>2.下载 Flutter SDK(选择稳定版)</p>\n<p>解压 SDK 到一个你知道到目录下，加入环境变量,复杂 Flutter SDK 下到 bin 目录<br>例如： SDK 在 /Users/用户/Documents/flutter/bin</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=`pwd`/flutter/bin:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\">SDK的目录</span><br><span class=\"line\">export PATH= /Users/用户/Documents/flutter/bin :$PATH</span><br></pre></td></tr></table></figure>\n<p>3.运行 flutter doctor 命令查看是否需要安装其它依赖项来完成安装</p>\n<p>4.创建项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter create my_app</span><br></pre></td></tr></table></figure>\n<h3 id=\"iOS-设置\"><a href=\"#iOS-设置\" class=\"headerlink\" title=\"iOS 设置\"></a>iOS 设置</h3><p>1.安装 Xcode，根据 flutter 的 SDK 版本要求下载不同的 Xcode 版本</p>\n<p>2.运行 open -a Simulator 打开模拟器</p>\n<p>3.运行 flutter run 启动您的应用</p>\n<h3 id=\"Android-设置\"><a href=\"#Android-设置\" class=\"headerlink\" title=\"Android 设置\"></a>Android 设置</h3><p>1.安装 Android Studio</p>\n<p>2.环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Android 环境变量</span><br><span class=\"line\">export ANDROID_HOME=/Users/你的用户名/Library/Android/sdk</span><br><span class=\"line\">#Android 模拟器路径</span><br><span class=\"line\">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/emulator</span><br><span class=\"line\">#Android tools 路径</span><br><span class=\"line\">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/tools</span><br><span class=\"line\">#Android 平台工具路径</span><br><span class=\"line\">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/platform-tools</span><br><span class=\"line\">#Android NDK路径</span><br><span class=\"line\">ANDROID_NDK_HOME=/Users/你的用户名/Library/Android/ndk/android-ndk-r10e</span><br></pre></td></tr></table></figure>\n<p>3.插件安装<br>打开 Preferences &gt; Plugins (macOS), File &gt; Settings &gt; Plugins (Windows &amp; Linux)<br>安装 Flutter、Dart 插件</p>\n<p>启动项目不同版本的 Android Studio 的 SDK 要求不一样，具体看是否报错</p>\n<h3 id=\"VScode-编辑器设置\"><a href=\"#VScode-编辑器设置\" class=\"headerlink\" title=\"VScode 编辑器设置\"></a>VScode 编辑器设置</h3><p>1.command + shift + p ,Flutter: New Project 也可以创建 Flutter 项目</p>\n<p>2.下载 Dart 和 Flutter 扩展</p>\n<p>3.打开项目，右下角 No Device 选择模拟器</p>\n<p>4.command + shift + p 选择 Debug: Start Debugging 启动项目</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Flutter 开发环境比 RN 的开发环境安装要简单的多，按照文档安装即可</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"Mac-电脑-Flutter-开发环境\"><a href=\"#Mac-电脑-Flutter-开发环境\" class=\"headerlink\" title=\"Mac 电脑 Flutter 开发环境\"></a>Mac 电脑 Flutter 开发环境</h3>","more":"<h3 id=\"环境变量设置\"><a href=\"#环境变量设置\" class=\"headerlink\" title=\"环境变量设置\"></a>环境变量设置</h3><p>1.打开环境变量设置文件 open .bash_profile</p>\n<p>Flutter 官方为中国开发者搭建了临时镜像，加入环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class=\"line\">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure>\n<p>2.下载 Flutter SDK(选择稳定版)</p>\n<p>解压 SDK 到一个你知道到目录下，加入环境变量,复杂 Flutter SDK 下到 bin 目录<br>例如： SDK 在 /Users/用户/Documents/flutter/bin</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=`pwd`/flutter/bin:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\">SDK的目录</span><br><span class=\"line\">export PATH= /Users/用户/Documents/flutter/bin :$PATH</span><br></pre></td></tr></table></figure>\n<p>3.运行 flutter doctor 命令查看是否需要安装其它依赖项来完成安装</p>\n<p>4.创建项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter create my_app</span><br></pre></td></tr></table></figure>\n<h3 id=\"iOS-设置\"><a href=\"#iOS-设置\" class=\"headerlink\" title=\"iOS 设置\"></a>iOS 设置</h3><p>1.安装 Xcode，根据 flutter 的 SDK 版本要求下载不同的 Xcode 版本</p>\n<p>2.运行 open -a Simulator 打开模拟器</p>\n<p>3.运行 flutter run 启动您的应用</p>\n<h3 id=\"Android-设置\"><a href=\"#Android-设置\" class=\"headerlink\" title=\"Android 设置\"></a>Android 设置</h3><p>1.安装 Android Studio</p>\n<p>2.环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Android 环境变量</span><br><span class=\"line\">export ANDROID_HOME=/Users/你的用户名/Library/Android/sdk</span><br><span class=\"line\">#Android 模拟器路径</span><br><span class=\"line\">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/emulator</span><br><span class=\"line\">#Android tools 路径</span><br><span class=\"line\">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/tools</span><br><span class=\"line\">#Android 平台工具路径</span><br><span class=\"line\">export PATH=$&#123;PATH&#125;:$&#123;ANDROID_HOME&#125;/platform-tools</span><br><span class=\"line\">#Android NDK路径</span><br><span class=\"line\">ANDROID_NDK_HOME=/Users/你的用户名/Library/Android/ndk/android-ndk-r10e</span><br></pre></td></tr></table></figure>\n<p>3.插件安装<br>打开 Preferences &gt; Plugins (macOS), File &gt; Settings &gt; Plugins (Windows &amp; Linux)<br>安装 Flutter、Dart 插件</p>\n<p>启动项目不同版本的 Android Studio 的 SDK 要求不一样，具体看是否报错</p>\n<h3 id=\"VScode-编辑器设置\"><a href=\"#VScode-编辑器设置\" class=\"headerlink\" title=\"VScode 编辑器设置\"></a>VScode 编辑器设置</h3><p>1.command + shift + p ,Flutter: New Project 也可以创建 Flutter 项目</p>\n<p>2.下载 Dart 和 Flutter 扩展</p>\n<p>3.打开项目，右下角 No Device 选择模拟器</p>\n<p>4.command + shift + p 选择 Debug: Start Debugging 启动项目</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Flutter 开发环境比 RN 的开发环境安装要简单的多，按照文档安装即可</p>"},{"title":"Flutter学习之路 - Flutter 基础知识","date":"2020-05-27T01:54:52.000Z","_content":"\n### Flutter基础知识\n\n<!-- more -->\n\n### 如何使用 Flutter 包和插件\n\n1.插件地址: https://pub.flutter-io.cn/\n\n2.搜索插件,查看 Readme\n\n### 组件\n\n1.StatelessWidget\nStatelessWidget 不依赖自身的状态来重新渲染自己\n\n2.StatefulWidget \nStatefulWidget 是可变状态的 widget。 使用 setState 方法管理 StatefulWidget 的状态的改变。调用 setState 告诉 Flutter 框架，某个状态发生了变化，Flutter 会重新运行 build 方法，以便应用程序可以应用最新状态。\n\n3.Scaffold\nScaffold定义一个UI框架，框架里面包含了appBar、bottomNavigationBar、floatingActionButton、body等\n\n4.Scaffold下的appBar\n\n页面的导航栏\n\n```\nhome: Scaffold(\n   appBar: AppBar(title: Text('Flutter')),\n)\n```\n\n5.Scaffold下的bottomNavigationBar(底部导航栏配置)\n\n```\nbottomNavigationBar: BottomNavigationBar(\n  currentIndex: _currentIndex, //定义索引值\n  onTap: (index) {\n    setState(() {\n      _currentIndex = index;\n    });\n  },//点击底部导航栏\n  items: [\n    BottomNavigationBarItem(\n      icon: Icon(Icons.home,color: Colors.grey),\n      activeIcon: Icon(Icons.home, color: Colors.blue),\n      title: Text('首页')\n    ),\n    BottomNavigationBarItem(\n      icon: Icon(Icons.list,color: Colors.grey),\n      activeIcon: Icon(Icons.list, color: Colors.blue),\n      title: Text('列表')\n    )\n  ]\n),\n```\n6.Scaffold下的floatingActionButton(悬浮按钮)\n\n```\nfloatingActionButton: FloatingActionButton(\n  onPressed: null,\n  child: Text('点我')\n),\n```\n\n### 使用Flutter的路由与导航\n\n1.注册路由\n\n```\n@override\nWidget build(BuildContext context) {\n  return MaterialApp(\n    routes: <String,WidgetBuilder> {\n      'less': (BuildContext context) => FlutterLaoutPage()\n    },\n  );\n}\n```\n\n2.跳转页面\n\n```\nNavigator.pushNamed(context, 'less');\n```\nor\n```\nNavigator.push(context, MaterialPageRoute(builder: (context) => FlutterLaoutPage()));\n```\n\n### 检测用户手势以及处理点击事件\n\n1.GestureDetector\n一个用于手势识别的功能性组件，我们通过它可以来识别各种手势\n\n2.事件\n\n```\n body: FractionallySizedBox(\n  widthFactor: 1,\n  child: Stack(\n    children: <Widget>[\n      GestureDetector(\n        onTap: () => _pringMsg('点击'),\n        onDoubleTap: () => _pringMsg('双击'),\n        onLongPress: () => _pringMsg('长按'),\n        onTapCancel: () => _pringMsg('取消'),\n        onTapUp: (e) => _pringMsg('松开'),\n        onTapDown: (e) => _pringMsg('按下'),\n        child: Container(\n          padding: EdgeInsets.all(60),\n          decoration: BoxDecoration(color: Colors.blueAccent),\n          child: Text(\n            '点我',\n            style: TextStyle(\n              fontSize: 36,\n              color: Colors.white\n            )\n          ),\n        )\n      ),\n      Text(printString),\n      Positioned(\n        left: moveX,\n        top: moveY,\n        child: GestureDetector(\n          onPanUpdate: (e) => _doMove(e),\n          child: Container(\n            width: 72,\n            height: 72,\n            decoration:BoxDecoration(\n              color:Colors.amber,\n              borderRadius: BorderRadius.circular(36)\n            ),\n          ),\n        ),\n      )\n    ],\n  ),\n),\n\n_pringMsg(String msg) {\n  setState(() {\n    printString += ' , $msg';\n  });\n}\n\n_doMove(DragUpdateDetails e) {\n  setState(() {\n    moveY += e.delta.dy;\n    moveX += e.delta.dx;\n  });\n}\n```\n\n### 打开第三方应用\n\n```\nurl_launcher: ^5.0.2\n\n//打开网页\n_launchURL() async {\n  const url = 'http://www.liufupeng.cn/';\n  if (await canLaunch(url)) {\n    await launch(url);\n  } else {\n    throw 'Could not launch $url';\n  }\n}\n\n//打开本地地图\n_openMap() async {\n  //android\n  const url = 'geo:52.32.4.917'; //APP提供者的 schema\n  if (await canLaunch(url)) {\n    await launch(url);\n  } else {\n    //ios\n    const url = 'http://maps.apple.com/?ll=geo:52.32.4.917';\n    if (await canLaunch(url)) {\n        await launch(url);\n    }else {\n      throw 'Could not launch $url';\n    }\n  }\n}\n```\n\n### 生命周期\n\n1.无状态的StatelessWidget只有createElement、与build两个生命周期方法\n\n2.StatefulWidget的生命周期分为三组\n\n初始化时期\ncreateState、initState\n\n更新时期\ndidChangeDependencies、build、didUpdateWidget\n\n销毁期\ndeactivate、dispose\n\n```\nimport 'package:flutter/material.dart';\n\nclass LfiecycleState extends StatefulWidget {\n  @override\n  _LfiecycleState createState() => _LfiecycleState();\n}\n\nclass _LfiecycleState extends State<LfiecycleState> {\n\n  int _count = 0;\n\n  // 在这个方法中通常会做一些初始化工作，如channel的初始化，监听器的初始化\n  @override\n  void initState() {\n    print('----initState----');\n    super.initState();\n  }\n\n  //当依赖的State对象改变时会调用\n  //在第一次构建widget时，会initState()之后立即调用此方法\n  //如果的StatefulWidget依赖于InheritedWidget，那么当当前State会依赖InheritedWidget\n  //InheritedWidget可以高效的将数据在Widget树中向下传递、共享\n  @override\n  void didChangeDependencies() {\n    print('----didChangeDependencies----');\n    super.didChangeDependencies();\n  }\n\n  //这是一个必须实现的方法，在这里会实现你要呈现的页面内容\n  //会在didChangeDependencies()之后立即调用\n  //另外调用setState后也会再次调用该方法\n  @override\n  Widget build(BuildContext context) {\n    print('----build----');\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('生命周期')\n        ),\n        body: Center(\n          child: Column(\n            children: <Widget>[\n              RaisedButton(\n                onPressed: () {\n                  setState(() {\n                    _count +=1;\n                  });\n                },\n                child: Text('点我'),\n              ),\n              Text(_count.toString())\n            ]\n          ),\n        ),\n      )\n    );\n  }\n\n  //不常用的生命周期方法，当父组件需要重新绘制时才会调用\n  //该方法携带一个oldWidget参数，可以将其与当前当widget进行对比以便执行一些额外的逻辑\n  // if (oldWidget.x != widget.x) {}\n  @override\n  void didUpdateWidget(LfiecycleState oldWidget) { \n    print('----didUpdateWidget----');\n    super.didUpdateWidget(oldWidget);\n  }\n\n  @override\n  void deactivate() { \n    print('----deactivate----');\n    super.deactivate();\n  }\n\n  @override\n  void dispose() { \n    print('----dispose----');\n    super.dispose();\n  }\n}\n```\n\n","source":"_posts/flutter-2-base.md","raw":"---\ntitle: Flutter学习之路 - Flutter 基础知识\ndate: 2020-05-27 09:54:52\ntags: ['Flutter']\ncategories: Flutter\n---\n\n### Flutter基础知识\n\n<!-- more -->\n\n### 如何使用 Flutter 包和插件\n\n1.插件地址: https://pub.flutter-io.cn/\n\n2.搜索插件,查看 Readme\n\n### 组件\n\n1.StatelessWidget\nStatelessWidget 不依赖自身的状态来重新渲染自己\n\n2.StatefulWidget \nStatefulWidget 是可变状态的 widget。 使用 setState 方法管理 StatefulWidget 的状态的改变。调用 setState 告诉 Flutter 框架，某个状态发生了变化，Flutter 会重新运行 build 方法，以便应用程序可以应用最新状态。\n\n3.Scaffold\nScaffold定义一个UI框架，框架里面包含了appBar、bottomNavigationBar、floatingActionButton、body等\n\n4.Scaffold下的appBar\n\n页面的导航栏\n\n```\nhome: Scaffold(\n   appBar: AppBar(title: Text('Flutter')),\n)\n```\n\n5.Scaffold下的bottomNavigationBar(底部导航栏配置)\n\n```\nbottomNavigationBar: BottomNavigationBar(\n  currentIndex: _currentIndex, //定义索引值\n  onTap: (index) {\n    setState(() {\n      _currentIndex = index;\n    });\n  },//点击底部导航栏\n  items: [\n    BottomNavigationBarItem(\n      icon: Icon(Icons.home,color: Colors.grey),\n      activeIcon: Icon(Icons.home, color: Colors.blue),\n      title: Text('首页')\n    ),\n    BottomNavigationBarItem(\n      icon: Icon(Icons.list,color: Colors.grey),\n      activeIcon: Icon(Icons.list, color: Colors.blue),\n      title: Text('列表')\n    )\n  ]\n),\n```\n6.Scaffold下的floatingActionButton(悬浮按钮)\n\n```\nfloatingActionButton: FloatingActionButton(\n  onPressed: null,\n  child: Text('点我')\n),\n```\n\n### 使用Flutter的路由与导航\n\n1.注册路由\n\n```\n@override\nWidget build(BuildContext context) {\n  return MaterialApp(\n    routes: <String,WidgetBuilder> {\n      'less': (BuildContext context) => FlutterLaoutPage()\n    },\n  );\n}\n```\n\n2.跳转页面\n\n```\nNavigator.pushNamed(context, 'less');\n```\nor\n```\nNavigator.push(context, MaterialPageRoute(builder: (context) => FlutterLaoutPage()));\n```\n\n### 检测用户手势以及处理点击事件\n\n1.GestureDetector\n一个用于手势识别的功能性组件，我们通过它可以来识别各种手势\n\n2.事件\n\n```\n body: FractionallySizedBox(\n  widthFactor: 1,\n  child: Stack(\n    children: <Widget>[\n      GestureDetector(\n        onTap: () => _pringMsg('点击'),\n        onDoubleTap: () => _pringMsg('双击'),\n        onLongPress: () => _pringMsg('长按'),\n        onTapCancel: () => _pringMsg('取消'),\n        onTapUp: (e) => _pringMsg('松开'),\n        onTapDown: (e) => _pringMsg('按下'),\n        child: Container(\n          padding: EdgeInsets.all(60),\n          decoration: BoxDecoration(color: Colors.blueAccent),\n          child: Text(\n            '点我',\n            style: TextStyle(\n              fontSize: 36,\n              color: Colors.white\n            )\n          ),\n        )\n      ),\n      Text(printString),\n      Positioned(\n        left: moveX,\n        top: moveY,\n        child: GestureDetector(\n          onPanUpdate: (e) => _doMove(e),\n          child: Container(\n            width: 72,\n            height: 72,\n            decoration:BoxDecoration(\n              color:Colors.amber,\n              borderRadius: BorderRadius.circular(36)\n            ),\n          ),\n        ),\n      )\n    ],\n  ),\n),\n\n_pringMsg(String msg) {\n  setState(() {\n    printString += ' , $msg';\n  });\n}\n\n_doMove(DragUpdateDetails e) {\n  setState(() {\n    moveY += e.delta.dy;\n    moveX += e.delta.dx;\n  });\n}\n```\n\n### 打开第三方应用\n\n```\nurl_launcher: ^5.0.2\n\n//打开网页\n_launchURL() async {\n  const url = 'http://www.liufupeng.cn/';\n  if (await canLaunch(url)) {\n    await launch(url);\n  } else {\n    throw 'Could not launch $url';\n  }\n}\n\n//打开本地地图\n_openMap() async {\n  //android\n  const url = 'geo:52.32.4.917'; //APP提供者的 schema\n  if (await canLaunch(url)) {\n    await launch(url);\n  } else {\n    //ios\n    const url = 'http://maps.apple.com/?ll=geo:52.32.4.917';\n    if (await canLaunch(url)) {\n        await launch(url);\n    }else {\n      throw 'Could not launch $url';\n    }\n  }\n}\n```\n\n### 生命周期\n\n1.无状态的StatelessWidget只有createElement、与build两个生命周期方法\n\n2.StatefulWidget的生命周期分为三组\n\n初始化时期\ncreateState、initState\n\n更新时期\ndidChangeDependencies、build、didUpdateWidget\n\n销毁期\ndeactivate、dispose\n\n```\nimport 'package:flutter/material.dart';\n\nclass LfiecycleState extends StatefulWidget {\n  @override\n  _LfiecycleState createState() => _LfiecycleState();\n}\n\nclass _LfiecycleState extends State<LfiecycleState> {\n\n  int _count = 0;\n\n  // 在这个方法中通常会做一些初始化工作，如channel的初始化，监听器的初始化\n  @override\n  void initState() {\n    print('----initState----');\n    super.initState();\n  }\n\n  //当依赖的State对象改变时会调用\n  //在第一次构建widget时，会initState()之后立即调用此方法\n  //如果的StatefulWidget依赖于InheritedWidget，那么当当前State会依赖InheritedWidget\n  //InheritedWidget可以高效的将数据在Widget树中向下传递、共享\n  @override\n  void didChangeDependencies() {\n    print('----didChangeDependencies----');\n    super.didChangeDependencies();\n  }\n\n  //这是一个必须实现的方法，在这里会实现你要呈现的页面内容\n  //会在didChangeDependencies()之后立即调用\n  //另外调用setState后也会再次调用该方法\n  @override\n  Widget build(BuildContext context) {\n    print('----build----');\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('生命周期')\n        ),\n        body: Center(\n          child: Column(\n            children: <Widget>[\n              RaisedButton(\n                onPressed: () {\n                  setState(() {\n                    _count +=1;\n                  });\n                },\n                child: Text('点我'),\n              ),\n              Text(_count.toString())\n            ]\n          ),\n        ),\n      )\n    );\n  }\n\n  //不常用的生命周期方法，当父组件需要重新绘制时才会调用\n  //该方法携带一个oldWidget参数，可以将其与当前当widget进行对比以便执行一些额外的逻辑\n  // if (oldWidget.x != widget.x) {}\n  @override\n  void didUpdateWidget(LfiecycleState oldWidget) { \n    print('----didUpdateWidget----');\n    super.didUpdateWidget(oldWidget);\n  }\n\n  @override\n  void deactivate() { \n    print('----deactivate----');\n    super.deactivate();\n  }\n\n  @override\n  void dispose() { \n    print('----dispose----');\n    super.dispose();\n  }\n}\n```\n\n","slug":"flutter-2-base","published":1,"updated":"2020-05-27T01:56:03.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq427001ohe6jro6eg7ge","content":"<h3 id=\"Flutter基础知识\"><a href=\"#Flutter基础知识\" class=\"headerlink\" title=\"Flutter基础知识\"></a>Flutter基础知识</h3><a id=\"more\"></a>\n<h3 id=\"如何使用-Flutter-包和插件\"><a href=\"#如何使用-Flutter-包和插件\" class=\"headerlink\" title=\"如何使用 Flutter 包和插件\"></a>如何使用 Flutter 包和插件</h3><p>1.插件地址: <a href=\"https://pub.flutter-io.cn/\" target=\"_blank\" rel=\"noopener\">https://pub.flutter-io.cn/</a></p>\n<p>2.搜索插件,查看 Readme</p>\n<h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><p>1.StatelessWidget<br>StatelessWidget 不依赖自身的状态来重新渲染自己</p>\n<p>2.StatefulWidget<br>StatefulWidget 是可变状态的 widget。 使用 setState 方法管理 StatefulWidget 的状态的改变。调用 setState 告诉 Flutter 框架，某个状态发生了变化，Flutter 会重新运行 build 方法，以便应用程序可以应用最新状态。</p>\n<p>3.Scaffold<br>Scaffold定义一个UI框架，框架里面包含了appBar、bottomNavigationBar、floatingActionButton、body等</p>\n<p>4.Scaffold下的appBar</p>\n<p>页面的导航栏</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">home: Scaffold(</span><br><span class=\"line\">   appBar: AppBar(title: Text(&apos;Flutter&apos;)),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>5.Scaffold下的bottomNavigationBar(底部导航栏配置)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bottomNavigationBar: BottomNavigationBar(</span><br><span class=\"line\">  currentIndex: _currentIndex, //定义索引值</span><br><span class=\"line\">  onTap: (index) &#123;</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      _currentIndex = index;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,//点击底部导航栏</span><br><span class=\"line\">  items: [</span><br><span class=\"line\">    BottomNavigationBarItem(</span><br><span class=\"line\">      icon: Icon(Icons.home,color: Colors.grey),</span><br><span class=\"line\">      activeIcon: Icon(Icons.home, color: Colors.blue),</span><br><span class=\"line\">      title: Text(&apos;首页&apos;)</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    BottomNavigationBarItem(</span><br><span class=\"line\">      icon: Icon(Icons.list,color: Colors.grey),</span><br><span class=\"line\">      activeIcon: Icon(Icons.list, color: Colors.blue),</span><br><span class=\"line\">      title: Text(&apos;列表&apos;)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  ]</span><br><span class=\"line\">),</span><br></pre></td></tr></table></figure>\n<p>6.Scaffold下的floatingActionButton(悬浮按钮)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">floatingActionButton: FloatingActionButton(</span><br><span class=\"line\">  onPressed: null,</span><br><span class=\"line\">  child: Text(&apos;点我&apos;)</span><br><span class=\"line\">),</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用Flutter的路由与导航\"><a href=\"#使用Flutter的路由与导航\" class=\"headerlink\" title=\"使用Flutter的路由与导航\"></a>使用Flutter的路由与导航</h3><p>1.注册路由</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@override</span><br><span class=\"line\">Widget build(BuildContext context) &#123;</span><br><span class=\"line\">  return MaterialApp(</span><br><span class=\"line\">    routes: &lt;String,WidgetBuilder&gt; &#123;</span><br><span class=\"line\">      &apos;less&apos;: (BuildContext context) =&gt; FlutterLaoutPage()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.跳转页面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Navigator.pushNamed(context, &apos;less&apos;);</span><br></pre></td></tr></table></figure>\n<p>or<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Navigator.push(context, MaterialPageRoute(builder: (context) =&gt; FlutterLaoutPage()));</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"检测用户手势以及处理点击事件\"><a href=\"#检测用户手势以及处理点击事件\" class=\"headerlink\" title=\"检测用户手势以及处理点击事件\"></a>检测用户手势以及处理点击事件</h3><p>1.GestureDetector<br>一个用于手势识别的功能性组件，我们通过它可以来识别各种手势</p>\n<p>2.事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> body: FractionallySizedBox(</span><br><span class=\"line\">  widthFactor: 1,</span><br><span class=\"line\">  child: Stack(</span><br><span class=\"line\">    children: &lt;Widget&gt;[</span><br><span class=\"line\">      GestureDetector(</span><br><span class=\"line\">        onTap: () =&gt; _pringMsg(&apos;点击&apos;),</span><br><span class=\"line\">        onDoubleTap: () =&gt; _pringMsg(&apos;双击&apos;),</span><br><span class=\"line\">        onLongPress: () =&gt; _pringMsg(&apos;长按&apos;),</span><br><span class=\"line\">        onTapCancel: () =&gt; _pringMsg(&apos;取消&apos;),</span><br><span class=\"line\">        onTapUp: (e) =&gt; _pringMsg(&apos;松开&apos;),</span><br><span class=\"line\">        onTapDown: (e) =&gt; _pringMsg(&apos;按下&apos;),</span><br><span class=\"line\">        child: Container(</span><br><span class=\"line\">          padding: EdgeInsets.all(60),</span><br><span class=\"line\">          decoration: BoxDecoration(color: Colors.blueAccent),</span><br><span class=\"line\">          child: Text(</span><br><span class=\"line\">            &apos;点我&apos;,</span><br><span class=\"line\">            style: TextStyle(</span><br><span class=\"line\">              fontSize: 36,</span><br><span class=\"line\">              color: Colors.white</span><br><span class=\"line\">            )</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        )</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      Text(printString),</span><br><span class=\"line\">      Positioned(</span><br><span class=\"line\">        left: moveX,</span><br><span class=\"line\">        top: moveY,</span><br><span class=\"line\">        child: GestureDetector(</span><br><span class=\"line\">          onPanUpdate: (e) =&gt; _doMove(e),</span><br><span class=\"line\">          child: Container(</span><br><span class=\"line\">            width: 72,</span><br><span class=\"line\">            height: 72,</span><br><span class=\"line\">            decoration:BoxDecoration(</span><br><span class=\"line\">              color:Colors.amber,</span><br><span class=\"line\">              borderRadius: BorderRadius.circular(36)</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      )</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  ),</span><br><span class=\"line\">),</span><br><span class=\"line\"></span><br><span class=\"line\">_pringMsg(String msg) &#123;</span><br><span class=\"line\">  setState(() &#123;</span><br><span class=\"line\">    printString += &apos; , $msg&apos;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_doMove(DragUpdateDetails e) &#123;</span><br><span class=\"line\">  setState(() &#123;</span><br><span class=\"line\">    moveY += e.delta.dy;</span><br><span class=\"line\">    moveX += e.delta.dx;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"打开第三方应用\"><a href=\"#打开第三方应用\" class=\"headerlink\" title=\"打开第三方应用\"></a>打开第三方应用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url_launcher: ^5.0.2</span><br><span class=\"line\"></span><br><span class=\"line\">//打开网页</span><br><span class=\"line\">_launchURL() async &#123;</span><br><span class=\"line\">  const url = &apos;http://www.liufupeng.cn/&apos;;</span><br><span class=\"line\">  if (await canLaunch(url)) &#123;</span><br><span class=\"line\">    await launch(url);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    throw &apos;Could not launch $url&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//打开本地地图</span><br><span class=\"line\">_openMap() async &#123;</span><br><span class=\"line\">  //android</span><br><span class=\"line\">  const url = &apos;geo:52.32.4.917&apos;; //APP提供者的 schema</span><br><span class=\"line\">  if (await canLaunch(url)) &#123;</span><br><span class=\"line\">    await launch(url);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    //ios</span><br><span class=\"line\">    const url = &apos;http://maps.apple.com/?ll=geo:52.32.4.917&apos;;</span><br><span class=\"line\">    if (await canLaunch(url)) &#123;</span><br><span class=\"line\">        await launch(url);</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">      throw &apos;Could not launch $url&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h3><p>1.无状态的StatelessWidget只有createElement、与build两个生命周期方法</p>\n<p>2.StatefulWidget的生命周期分为三组</p>\n<p>初始化时期<br>createState、initState</p>\n<p>更新时期<br>didChangeDependencies、build、didUpdateWidget</p>\n<p>销毁期<br>deactivate、dispose</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;package:flutter/material.dart&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class LfiecycleState extends StatefulWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _LfiecycleState createState() =&gt; _LfiecycleState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _LfiecycleState extends State&lt;LfiecycleState&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  int _count = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 在这个方法中通常会做一些初始化工作，如channel的初始化，监听器的初始化</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void initState() &#123;</span><br><span class=\"line\">    print(&apos;----initState----&apos;);</span><br><span class=\"line\">    super.initState();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //当依赖的State对象改变时会调用</span><br><span class=\"line\">  //在第一次构建widget时，会initState()之后立即调用此方法</span><br><span class=\"line\">  //如果的StatefulWidget依赖于InheritedWidget，那么当当前State会依赖InheritedWidget</span><br><span class=\"line\">  //InheritedWidget可以高效的将数据在Widget树中向下传递、共享</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void didChangeDependencies() &#123;</span><br><span class=\"line\">    print(&apos;----didChangeDependencies----&apos;);</span><br><span class=\"line\">    super.didChangeDependencies();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //这是一个必须实现的方法，在这里会实现你要呈现的页面内容</span><br><span class=\"line\">  //会在didChangeDependencies()之后立即调用</span><br><span class=\"line\">  //另外调用setState后也会再次调用该方法</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    print(&apos;----build----&apos;);</span><br><span class=\"line\">    return MaterialApp(</span><br><span class=\"line\">      home: Scaffold(</span><br><span class=\"line\">        appBar: AppBar(</span><br><span class=\"line\">          title: Text(&apos;生命周期&apos;)</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        body: Center(</span><br><span class=\"line\">          child: Column(</span><br><span class=\"line\">            children: &lt;Widget&gt;[</span><br><span class=\"line\">              RaisedButton(</span><br><span class=\"line\">                onPressed: () &#123;</span><br><span class=\"line\">                  setState(() &#123;</span><br><span class=\"line\">                    _count +=1;</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                child: Text(&apos;点我&apos;),</span><br><span class=\"line\">              ),</span><br><span class=\"line\">              Text(_count.toString())</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      )</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //不常用的生命周期方法，当父组件需要重新绘制时才会调用</span><br><span class=\"line\">  //该方法携带一个oldWidget参数，可以将其与当前当widget进行对比以便执行一些额外的逻辑</span><br><span class=\"line\">  // if (oldWidget.x != widget.x) &#123;&#125;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void didUpdateWidget(LfiecycleState oldWidget) &#123; </span><br><span class=\"line\">    print(&apos;----didUpdateWidget----&apos;);</span><br><span class=\"line\">    super.didUpdateWidget(oldWidget);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void deactivate() &#123; </span><br><span class=\"line\">    print(&apos;----deactivate----&apos;);</span><br><span class=\"line\">    super.deactivate();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void dispose() &#123; </span><br><span class=\"line\">    print(&apos;----dispose----&apos;);</span><br><span class=\"line\">    super.dispose();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"Flutter基础知识\"><a href=\"#Flutter基础知识\" class=\"headerlink\" title=\"Flutter基础知识\"></a>Flutter基础知识</h3>","more":"<h3 id=\"如何使用-Flutter-包和插件\"><a href=\"#如何使用-Flutter-包和插件\" class=\"headerlink\" title=\"如何使用 Flutter 包和插件\"></a>如何使用 Flutter 包和插件</h3><p>1.插件地址: <a href=\"https://pub.flutter-io.cn/\" target=\"_blank\" rel=\"noopener\">https://pub.flutter-io.cn/</a></p>\n<p>2.搜索插件,查看 Readme</p>\n<h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><p>1.StatelessWidget<br>StatelessWidget 不依赖自身的状态来重新渲染自己</p>\n<p>2.StatefulWidget<br>StatefulWidget 是可变状态的 widget。 使用 setState 方法管理 StatefulWidget 的状态的改变。调用 setState 告诉 Flutter 框架，某个状态发生了变化，Flutter 会重新运行 build 方法，以便应用程序可以应用最新状态。</p>\n<p>3.Scaffold<br>Scaffold定义一个UI框架，框架里面包含了appBar、bottomNavigationBar、floatingActionButton、body等</p>\n<p>4.Scaffold下的appBar</p>\n<p>页面的导航栏</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">home: Scaffold(</span><br><span class=\"line\">   appBar: AppBar(title: Text(&apos;Flutter&apos;)),</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>5.Scaffold下的bottomNavigationBar(底部导航栏配置)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bottomNavigationBar: BottomNavigationBar(</span><br><span class=\"line\">  currentIndex: _currentIndex, //定义索引值</span><br><span class=\"line\">  onTap: (index) &#123;</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      _currentIndex = index;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,//点击底部导航栏</span><br><span class=\"line\">  items: [</span><br><span class=\"line\">    BottomNavigationBarItem(</span><br><span class=\"line\">      icon: Icon(Icons.home,color: Colors.grey),</span><br><span class=\"line\">      activeIcon: Icon(Icons.home, color: Colors.blue),</span><br><span class=\"line\">      title: Text(&apos;首页&apos;)</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    BottomNavigationBarItem(</span><br><span class=\"line\">      icon: Icon(Icons.list,color: Colors.grey),</span><br><span class=\"line\">      activeIcon: Icon(Icons.list, color: Colors.blue),</span><br><span class=\"line\">      title: Text(&apos;列表&apos;)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  ]</span><br><span class=\"line\">),</span><br></pre></td></tr></table></figure>\n<p>6.Scaffold下的floatingActionButton(悬浮按钮)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">floatingActionButton: FloatingActionButton(</span><br><span class=\"line\">  onPressed: null,</span><br><span class=\"line\">  child: Text(&apos;点我&apos;)</span><br><span class=\"line\">),</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用Flutter的路由与导航\"><a href=\"#使用Flutter的路由与导航\" class=\"headerlink\" title=\"使用Flutter的路由与导航\"></a>使用Flutter的路由与导航</h3><p>1.注册路由</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@override</span><br><span class=\"line\">Widget build(BuildContext context) &#123;</span><br><span class=\"line\">  return MaterialApp(</span><br><span class=\"line\">    routes: &lt;String,WidgetBuilder&gt; &#123;</span><br><span class=\"line\">      &apos;less&apos;: (BuildContext context) =&gt; FlutterLaoutPage()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.跳转页面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Navigator.pushNamed(context, &apos;less&apos;);</span><br></pre></td></tr></table></figure>\n<p>or<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Navigator.push(context, MaterialPageRoute(builder: (context) =&gt; FlutterLaoutPage()));</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"检测用户手势以及处理点击事件\"><a href=\"#检测用户手势以及处理点击事件\" class=\"headerlink\" title=\"检测用户手势以及处理点击事件\"></a>检测用户手势以及处理点击事件</h3><p>1.GestureDetector<br>一个用于手势识别的功能性组件，我们通过它可以来识别各种手势</p>\n<p>2.事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> body: FractionallySizedBox(</span><br><span class=\"line\">  widthFactor: 1,</span><br><span class=\"line\">  child: Stack(</span><br><span class=\"line\">    children: &lt;Widget&gt;[</span><br><span class=\"line\">      GestureDetector(</span><br><span class=\"line\">        onTap: () =&gt; _pringMsg(&apos;点击&apos;),</span><br><span class=\"line\">        onDoubleTap: () =&gt; _pringMsg(&apos;双击&apos;),</span><br><span class=\"line\">        onLongPress: () =&gt; _pringMsg(&apos;长按&apos;),</span><br><span class=\"line\">        onTapCancel: () =&gt; _pringMsg(&apos;取消&apos;),</span><br><span class=\"line\">        onTapUp: (e) =&gt; _pringMsg(&apos;松开&apos;),</span><br><span class=\"line\">        onTapDown: (e) =&gt; _pringMsg(&apos;按下&apos;),</span><br><span class=\"line\">        child: Container(</span><br><span class=\"line\">          padding: EdgeInsets.all(60),</span><br><span class=\"line\">          decoration: BoxDecoration(color: Colors.blueAccent),</span><br><span class=\"line\">          child: Text(</span><br><span class=\"line\">            &apos;点我&apos;,</span><br><span class=\"line\">            style: TextStyle(</span><br><span class=\"line\">              fontSize: 36,</span><br><span class=\"line\">              color: Colors.white</span><br><span class=\"line\">            )</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        )</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      Text(printString),</span><br><span class=\"line\">      Positioned(</span><br><span class=\"line\">        left: moveX,</span><br><span class=\"line\">        top: moveY,</span><br><span class=\"line\">        child: GestureDetector(</span><br><span class=\"line\">          onPanUpdate: (e) =&gt; _doMove(e),</span><br><span class=\"line\">          child: Container(</span><br><span class=\"line\">            width: 72,</span><br><span class=\"line\">            height: 72,</span><br><span class=\"line\">            decoration:BoxDecoration(</span><br><span class=\"line\">              color:Colors.amber,</span><br><span class=\"line\">              borderRadius: BorderRadius.circular(36)</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      )</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  ),</span><br><span class=\"line\">),</span><br><span class=\"line\"></span><br><span class=\"line\">_pringMsg(String msg) &#123;</span><br><span class=\"line\">  setState(() &#123;</span><br><span class=\"line\">    printString += &apos; , $msg&apos;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_doMove(DragUpdateDetails e) &#123;</span><br><span class=\"line\">  setState(() &#123;</span><br><span class=\"line\">    moveY += e.delta.dy;</span><br><span class=\"line\">    moveX += e.delta.dx;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"打开第三方应用\"><a href=\"#打开第三方应用\" class=\"headerlink\" title=\"打开第三方应用\"></a>打开第三方应用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url_launcher: ^5.0.2</span><br><span class=\"line\"></span><br><span class=\"line\">//打开网页</span><br><span class=\"line\">_launchURL() async &#123;</span><br><span class=\"line\">  const url = &apos;http://www.liufupeng.cn/&apos;;</span><br><span class=\"line\">  if (await canLaunch(url)) &#123;</span><br><span class=\"line\">    await launch(url);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    throw &apos;Could not launch $url&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//打开本地地图</span><br><span class=\"line\">_openMap() async &#123;</span><br><span class=\"line\">  //android</span><br><span class=\"line\">  const url = &apos;geo:52.32.4.917&apos;; //APP提供者的 schema</span><br><span class=\"line\">  if (await canLaunch(url)) &#123;</span><br><span class=\"line\">    await launch(url);</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    //ios</span><br><span class=\"line\">    const url = &apos;http://maps.apple.com/?ll=geo:52.32.4.917&apos;;</span><br><span class=\"line\">    if (await canLaunch(url)) &#123;</span><br><span class=\"line\">        await launch(url);</span><br><span class=\"line\">    &#125;else &#123;</span><br><span class=\"line\">      throw &apos;Could not launch $url&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h3><p>1.无状态的StatelessWidget只有createElement、与build两个生命周期方法</p>\n<p>2.StatefulWidget的生命周期分为三组</p>\n<p>初始化时期<br>createState、initState</p>\n<p>更新时期<br>didChangeDependencies、build、didUpdateWidget</p>\n<p>销毁期<br>deactivate、dispose</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;package:flutter/material.dart&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class LfiecycleState extends StatefulWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _LfiecycleState createState() =&gt; _LfiecycleState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _LfiecycleState extends State&lt;LfiecycleState&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  int _count = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 在这个方法中通常会做一些初始化工作，如channel的初始化，监听器的初始化</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void initState() &#123;</span><br><span class=\"line\">    print(&apos;----initState----&apos;);</span><br><span class=\"line\">    super.initState();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //当依赖的State对象改变时会调用</span><br><span class=\"line\">  //在第一次构建widget时，会initState()之后立即调用此方法</span><br><span class=\"line\">  //如果的StatefulWidget依赖于InheritedWidget，那么当当前State会依赖InheritedWidget</span><br><span class=\"line\">  //InheritedWidget可以高效的将数据在Widget树中向下传递、共享</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void didChangeDependencies() &#123;</span><br><span class=\"line\">    print(&apos;----didChangeDependencies----&apos;);</span><br><span class=\"line\">    super.didChangeDependencies();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //这是一个必须实现的方法，在这里会实现你要呈现的页面内容</span><br><span class=\"line\">  //会在didChangeDependencies()之后立即调用</span><br><span class=\"line\">  //另外调用setState后也会再次调用该方法</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    print(&apos;----build----&apos;);</span><br><span class=\"line\">    return MaterialApp(</span><br><span class=\"line\">      home: Scaffold(</span><br><span class=\"line\">        appBar: AppBar(</span><br><span class=\"line\">          title: Text(&apos;生命周期&apos;)</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        body: Center(</span><br><span class=\"line\">          child: Column(</span><br><span class=\"line\">            children: &lt;Widget&gt;[</span><br><span class=\"line\">              RaisedButton(</span><br><span class=\"line\">                onPressed: () &#123;</span><br><span class=\"line\">                  setState(() &#123;</span><br><span class=\"line\">                    _count +=1;</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                child: Text(&apos;点我&apos;),</span><br><span class=\"line\">              ),</span><br><span class=\"line\">              Text(_count.toString())</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      )</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //不常用的生命周期方法，当父组件需要重新绘制时才会调用</span><br><span class=\"line\">  //该方法携带一个oldWidget参数，可以将其与当前当widget进行对比以便执行一些额外的逻辑</span><br><span class=\"line\">  // if (oldWidget.x != widget.x) &#123;&#125;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void didUpdateWidget(LfiecycleState oldWidget) &#123; </span><br><span class=\"line\">    print(&apos;----didUpdateWidget----&apos;);</span><br><span class=\"line\">    super.didUpdateWidget(oldWidget);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void deactivate() &#123; </span><br><span class=\"line\">    print(&apos;----deactivate----&apos;);</span><br><span class=\"line\">    super.deactivate();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void dispose() &#123; </span><br><span class=\"line\">    print(&apos;----dispose----&apos;);</span><br><span class=\"line\">    super.dispose();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Flutter学习之路 - Flutter 常用的组件","date":"2020-06-02T07:09:46.000Z","_content":"\n### Flutter 常用的组件\n\n<!-- more -->\n\n### Flutter实例项目\n\n1.https://github.com/flutter/flutter/tree/master/examples\n\n2.https://github.com/flutter/samples\n\n3.https://github.com/nisrulz/flutter-examples\n\n4.https://github.com/iampawan/FlutterExampleApps\n\n### BottomNavigationBar 实践\n\n配置BottomNavigationBar，根据更新索引值，PageView切换不同页面\n\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_trip/pages/home_page.dart';\nimport 'package:flutter_trip/pages/my_page.dart';\nimport 'package:flutter_trip/pages/search_page.dart';\nimport 'package:flutter_trip/pages/travel_page.dart';\n\nclass TabNavigator extends StatefulWidget {\n  @override\n  _TabNavigatorState createState() => _TabNavigatorState();\n}\n\nclass _TabNavigatorState extends State<TabNavigator> {\n  final _defaultColor = Colors.grey;\n  final _activeColor = Colors.blue;\n  int _currentIndex = 0;\n  final PageController _controller = PageController();\n  \n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: PageView(\n        controller: _controller,\n        children: <Widget>[\n          HomePage(),\n          SearchPage(),\n          TravelPage(),\n          MyPage(),\n        ],\n      ),\n      bottomNavigationBar: BottomNavigationBar(\n        currentIndex: _currentIndex, //当前索引\n        onTap: (index) {\n          _controller.jumpToPage(index); //不同的index对应不同页面\n          setState(() {\n            _currentIndex = index;\n          });\n        }, \n        type: BottomNavigationBarType.fixed,\n        items: [\n          BottomNavigationBarItem(\n            icon: Icon(Icons.home, color: _defaultColor),\n            activeIcon: Icon(Icons.home, color: _activeColor),\n            title: Text(\n              '首页',\n              style: TextStyle(\n                color: _currentIndex != 0 ? _defaultColor : _activeColor\n              )\n            )\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.search, color: _defaultColor),\n            activeIcon: Icon(Icons.search, color: _activeColor),\n            title: Text(\n              '搜索',\n              style: TextStyle(\n                color: _currentIndex != 1 ? _defaultColor : _activeColor\n              )\n            )\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.camera_alt, color: _defaultColor),\n            activeIcon: Icon(Icons.camera_alt, color: _activeColor),\n            title: Text(\n              '旅拍',\n              style: TextStyle(\n                color: _currentIndex != 2 ? _defaultColor : _activeColor\n              )\n            )\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.account_circle, color: _defaultColor),\n            activeIcon: Icon(Icons.account_circle, color: _activeColor),\n            title: Text(\n              '我的',\n              style: TextStyle(\n                color: _currentIndex != 3 ? _defaultColor : _activeColor\n              )\n            )\n          ),\n        ] \n      ),\n    );\n  }\n}\n\n```\n\n### 轮播图\n\nhttps://github.com/best-flutter/flutter_swiper/blob/master/README-ZH.md\n\n```\nflutter_swiper: ^1.1.4\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_swiper/flutter_swiper.dart';\n\nclass HomePage extends StatefulWidget {\n  @override\n  _HomePageState createState() => _HomePageState();\n}\n\nclass _HomePageState extends State<HomePage> {\n  List _imageUrls = [\n    'http://via.placeholder.com/350x150',\n    'http://via.placeholder.com/350x150',\n    'http://via.placeholder.com/350x150'\n  ];\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: Column(\n          children:<Widget>[\n            Container(\n              height: 160,\n              child: Swiper(\n                itemCount: _imageUrls.length,\n                autoplay: true,\n                itemBuilder: (BuildContext context, int index) {\n                  return Image.network(\n                    _imageUrls[index],\n                    fit: BoxFit.fill\n                  );\n                },\n                pagination:SwiperPagination(),\n              )\n            )\n          ]\n        ),\n      ),\n    );\n  }\n}\n\n```\n\n### 滚动渐变\n\n使用ListView组件进行滚动，NotificationListener()监听滚动的距离, MediaQuery.removePadding去除顶部的距离。Stack进行层叠布局，Widget越后创建，层级越靠上。\n\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_swiper/flutter_swiper.dart';\n\nconst APPBAR_SCROLL_OFFSET = 100;\n\nclass HomePage extends StatefulWidget {\n  @override\n  _HomePageState createState() => _HomePageState();\n}\n\nclass _HomePageState extends State<HomePage> {\n  List _imageUrls = [\n    'http://via.placeholder.com/350x150',\n    'http://via.placeholder.com/350x150',\n    'http://via.placeholder.com/350x150'\n  ];\n\n  double appBarAlpha = 0;\n\n  //滚动函数\n  _onScroll(offset) {\n    double alpha = offset / APPBAR_SCROLL_OFFSET;\n    print(alpha);\n    if (alpha < 0) {\n      alpha = 0;\n    }else if (alpha > 1) {\n      alpha = 1;\n    }\n     \n    setState(() {\n      appBarAlpha = alpha;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Stack(\n        children: <Widget> [\n          MediaQuery.removePadding(\n            removeTop: true,\n            context: context, \n            child: NotificationListener(\n              onNotification: (scrollNotification) {\n                if (scrollNotification is ScrollNotification && scrollNotification.depth == 0) {\n                  _onScroll(scrollNotification.metrics.pixels);\n                 \n                }    \n              },\n              child: ListView(\n                children: <Widget>[\n                  Container(\n                    height: 160,\n                    child: Swiper(\n                      itemCount: _imageUrls.length,\n                      autoplay: true,\n                      itemBuilder: (BuildContext context, int index) {\n                        return Image.network(\n                          _imageUrls[index],\n                          fit: BoxFit.fill\n                        );\n                      },\n                      pagination:SwiperPagination(),\n                    )\n                  )\n                ]\n              )\n            )\n          ),\n          Opacity(\n            opacity: appBarAlpha,\n            child: Container(\n              height: 60,\n              decoration: BoxDecoration(color: Colors.white),\n              child: Center(\n                child: Padding(\n                  padding: EdgeInsets.only(top: 20),\n                  child: Text('首页')\n                )\n              ),\n            ),\n          ),\n        ]\n      )\n    );\n  }\n}\n\n```\n","source":"_posts/flutter-3.md","raw":"---\ntitle: Flutter学习之路 - Flutter 常用的组件\ndate: 2020-06-02 15:09:46\ntags: ['Flutter']\ncategories: Flutter\n---\n\n### Flutter 常用的组件\n\n<!-- more -->\n\n### Flutter实例项目\n\n1.https://github.com/flutter/flutter/tree/master/examples\n\n2.https://github.com/flutter/samples\n\n3.https://github.com/nisrulz/flutter-examples\n\n4.https://github.com/iampawan/FlutterExampleApps\n\n### BottomNavigationBar 实践\n\n配置BottomNavigationBar，根据更新索引值，PageView切换不同页面\n\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_trip/pages/home_page.dart';\nimport 'package:flutter_trip/pages/my_page.dart';\nimport 'package:flutter_trip/pages/search_page.dart';\nimport 'package:flutter_trip/pages/travel_page.dart';\n\nclass TabNavigator extends StatefulWidget {\n  @override\n  _TabNavigatorState createState() => _TabNavigatorState();\n}\n\nclass _TabNavigatorState extends State<TabNavigator> {\n  final _defaultColor = Colors.grey;\n  final _activeColor = Colors.blue;\n  int _currentIndex = 0;\n  final PageController _controller = PageController();\n  \n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: PageView(\n        controller: _controller,\n        children: <Widget>[\n          HomePage(),\n          SearchPage(),\n          TravelPage(),\n          MyPage(),\n        ],\n      ),\n      bottomNavigationBar: BottomNavigationBar(\n        currentIndex: _currentIndex, //当前索引\n        onTap: (index) {\n          _controller.jumpToPage(index); //不同的index对应不同页面\n          setState(() {\n            _currentIndex = index;\n          });\n        }, \n        type: BottomNavigationBarType.fixed,\n        items: [\n          BottomNavigationBarItem(\n            icon: Icon(Icons.home, color: _defaultColor),\n            activeIcon: Icon(Icons.home, color: _activeColor),\n            title: Text(\n              '首页',\n              style: TextStyle(\n                color: _currentIndex != 0 ? _defaultColor : _activeColor\n              )\n            )\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.search, color: _defaultColor),\n            activeIcon: Icon(Icons.search, color: _activeColor),\n            title: Text(\n              '搜索',\n              style: TextStyle(\n                color: _currentIndex != 1 ? _defaultColor : _activeColor\n              )\n            )\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.camera_alt, color: _defaultColor),\n            activeIcon: Icon(Icons.camera_alt, color: _activeColor),\n            title: Text(\n              '旅拍',\n              style: TextStyle(\n                color: _currentIndex != 2 ? _defaultColor : _activeColor\n              )\n            )\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.account_circle, color: _defaultColor),\n            activeIcon: Icon(Icons.account_circle, color: _activeColor),\n            title: Text(\n              '我的',\n              style: TextStyle(\n                color: _currentIndex != 3 ? _defaultColor : _activeColor\n              )\n            )\n          ),\n        ] \n      ),\n    );\n  }\n}\n\n```\n\n### 轮播图\n\nhttps://github.com/best-flutter/flutter_swiper/blob/master/README-ZH.md\n\n```\nflutter_swiper: ^1.1.4\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_swiper/flutter_swiper.dart';\n\nclass HomePage extends StatefulWidget {\n  @override\n  _HomePageState createState() => _HomePageState();\n}\n\nclass _HomePageState extends State<HomePage> {\n  List _imageUrls = [\n    'http://via.placeholder.com/350x150',\n    'http://via.placeholder.com/350x150',\n    'http://via.placeholder.com/350x150'\n  ];\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: Column(\n          children:<Widget>[\n            Container(\n              height: 160,\n              child: Swiper(\n                itemCount: _imageUrls.length,\n                autoplay: true,\n                itemBuilder: (BuildContext context, int index) {\n                  return Image.network(\n                    _imageUrls[index],\n                    fit: BoxFit.fill\n                  );\n                },\n                pagination:SwiperPagination(),\n              )\n            )\n          ]\n        ),\n      ),\n    );\n  }\n}\n\n```\n\n### 滚动渐变\n\n使用ListView组件进行滚动，NotificationListener()监听滚动的距离, MediaQuery.removePadding去除顶部的距离。Stack进行层叠布局，Widget越后创建，层级越靠上。\n\n```\nimport 'package:flutter/material.dart';\nimport 'package:flutter_swiper/flutter_swiper.dart';\n\nconst APPBAR_SCROLL_OFFSET = 100;\n\nclass HomePage extends StatefulWidget {\n  @override\n  _HomePageState createState() => _HomePageState();\n}\n\nclass _HomePageState extends State<HomePage> {\n  List _imageUrls = [\n    'http://via.placeholder.com/350x150',\n    'http://via.placeholder.com/350x150',\n    'http://via.placeholder.com/350x150'\n  ];\n\n  double appBarAlpha = 0;\n\n  //滚动函数\n  _onScroll(offset) {\n    double alpha = offset / APPBAR_SCROLL_OFFSET;\n    print(alpha);\n    if (alpha < 0) {\n      alpha = 0;\n    }else if (alpha > 1) {\n      alpha = 1;\n    }\n     \n    setState(() {\n      appBarAlpha = alpha;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Stack(\n        children: <Widget> [\n          MediaQuery.removePadding(\n            removeTop: true,\n            context: context, \n            child: NotificationListener(\n              onNotification: (scrollNotification) {\n                if (scrollNotification is ScrollNotification && scrollNotification.depth == 0) {\n                  _onScroll(scrollNotification.metrics.pixels);\n                 \n                }    \n              },\n              child: ListView(\n                children: <Widget>[\n                  Container(\n                    height: 160,\n                    child: Swiper(\n                      itemCount: _imageUrls.length,\n                      autoplay: true,\n                      itemBuilder: (BuildContext context, int index) {\n                        return Image.network(\n                          _imageUrls[index],\n                          fit: BoxFit.fill\n                        );\n                      },\n                      pagination:SwiperPagination(),\n                    )\n                  )\n                ]\n              )\n            )\n          ),\n          Opacity(\n            opacity: appBarAlpha,\n            child: Container(\n              height: 60,\n              decoration: BoxDecoration(color: Colors.white),\n              child: Center(\n                child: Padding(\n                  padding: EdgeInsets.only(top: 20),\n                  child: Text('首页')\n                )\n              ),\n            ),\n          ),\n        ]\n      )\n    );\n  }\n}\n\n```\n","slug":"flutter-3","published":1,"updated":"2020-06-02T08:59:24.328Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq428001rhe6j0c9rt6yr","content":"<h3 id=\"Flutter-常用的组件\"><a href=\"#Flutter-常用的组件\" class=\"headerlink\" title=\"Flutter 常用的组件\"></a>Flutter 常用的组件</h3><a id=\"more\"></a>\n<h3 id=\"Flutter实例项目\"><a href=\"#Flutter实例项目\" class=\"headerlink\" title=\"Flutter实例项目\"></a>Flutter实例项目</h3><p>1.<a href=\"https://github.com/flutter/flutter/tree/master/examples\" target=\"_blank\" rel=\"noopener\">https://github.com/flutter/flutter/tree/master/examples</a></p>\n<p>2.<a href=\"https://github.com/flutter/samples\" target=\"_blank\" rel=\"noopener\">https://github.com/flutter/samples</a></p>\n<p>3.<a href=\"https://github.com/nisrulz/flutter-examples\" target=\"_blank\" rel=\"noopener\">https://github.com/nisrulz/flutter-examples</a></p>\n<p>4.<a href=\"https://github.com/iampawan/FlutterExampleApps\" target=\"_blank\" rel=\"noopener\">https://github.com/iampawan/FlutterExampleApps</a></p>\n<h3 id=\"BottomNavigationBar-实践\"><a href=\"#BottomNavigationBar-实践\" class=\"headerlink\" title=\"BottomNavigationBar 实践\"></a>BottomNavigationBar 实践</h3><p>配置BottomNavigationBar，根据更新索引值，PageView切换不同页面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;package:flutter/material.dart&apos;;</span><br><span class=\"line\">import &apos;package:flutter_trip/pages/home_page.dart&apos;;</span><br><span class=\"line\">import &apos;package:flutter_trip/pages/my_page.dart&apos;;</span><br><span class=\"line\">import &apos;package:flutter_trip/pages/search_page.dart&apos;;</span><br><span class=\"line\">import &apos;package:flutter_trip/pages/travel_page.dart&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class TabNavigator extends StatefulWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _TabNavigatorState createState() =&gt; _TabNavigatorState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _TabNavigatorState extends State&lt;TabNavigator&gt; &#123;</span><br><span class=\"line\">  final _defaultColor = Colors.grey;</span><br><span class=\"line\">  final _activeColor = Colors.blue;</span><br><span class=\"line\">  int _currentIndex = 0;</span><br><span class=\"line\">  final PageController _controller = PageController();</span><br><span class=\"line\">  </span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      body: PageView(</span><br><span class=\"line\">        controller: _controller,</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          HomePage(),</span><br><span class=\"line\">          SearchPage(),</span><br><span class=\"line\">          TravelPage(),</span><br><span class=\"line\">          MyPage(),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      bottomNavigationBar: BottomNavigationBar(</span><br><span class=\"line\">        currentIndex: _currentIndex, //当前索引</span><br><span class=\"line\">        onTap: (index) &#123;</span><br><span class=\"line\">          _controller.jumpToPage(index); //不同的index对应不同页面</span><br><span class=\"line\">          setState(() &#123;</span><br><span class=\"line\">            _currentIndex = index;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;, </span><br><span class=\"line\">        type: BottomNavigationBarType.fixed,</span><br><span class=\"line\">        items: [</span><br><span class=\"line\">          BottomNavigationBarItem(</span><br><span class=\"line\">            icon: Icon(Icons.home, color: _defaultColor),</span><br><span class=\"line\">            activeIcon: Icon(Icons.home, color: _activeColor),</span><br><span class=\"line\">            title: Text(</span><br><span class=\"line\">              &apos;首页&apos;,</span><br><span class=\"line\">              style: TextStyle(</span><br><span class=\"line\">                color: _currentIndex != 0 ? _defaultColor : _activeColor</span><br><span class=\"line\">              )</span><br><span class=\"line\">            )</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          BottomNavigationBarItem(</span><br><span class=\"line\">            icon: Icon(Icons.search, color: _defaultColor),</span><br><span class=\"line\">            activeIcon: Icon(Icons.search, color: _activeColor),</span><br><span class=\"line\">            title: Text(</span><br><span class=\"line\">              &apos;搜索&apos;,</span><br><span class=\"line\">              style: TextStyle(</span><br><span class=\"line\">                color: _currentIndex != 1 ? _defaultColor : _activeColor</span><br><span class=\"line\">              )</span><br><span class=\"line\">            )</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          BottomNavigationBarItem(</span><br><span class=\"line\">            icon: Icon(Icons.camera_alt, color: _defaultColor),</span><br><span class=\"line\">            activeIcon: Icon(Icons.camera_alt, color: _activeColor),</span><br><span class=\"line\">            title: Text(</span><br><span class=\"line\">              &apos;旅拍&apos;,</span><br><span class=\"line\">              style: TextStyle(</span><br><span class=\"line\">                color: _currentIndex != 2 ? _defaultColor : _activeColor</span><br><span class=\"line\">              )</span><br><span class=\"line\">            )</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          BottomNavigationBarItem(</span><br><span class=\"line\">            icon: Icon(Icons.account_circle, color: _defaultColor),</span><br><span class=\"line\">            activeIcon: Icon(Icons.account_circle, color: _activeColor),</span><br><span class=\"line\">            title: Text(</span><br><span class=\"line\">              &apos;我的&apos;,</span><br><span class=\"line\">              style: TextStyle(</span><br><span class=\"line\">                color: _currentIndex != 3 ? _defaultColor : _activeColor</span><br><span class=\"line\">              )</span><br><span class=\"line\">            )</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ] </span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"轮播图\"><a href=\"#轮播图\" class=\"headerlink\" title=\"轮播图\"></a>轮播图</h3><p><a href=\"https://github.com/best-flutter/flutter_swiper/blob/master/README-ZH.md\" target=\"_blank\" rel=\"noopener\">https://github.com/best-flutter/flutter_swiper/blob/master/README-ZH.md</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter_swiper: ^1.1.4</span><br><span class=\"line\"></span><br><span class=\"line\">import &apos;package:flutter/material.dart&apos;;</span><br><span class=\"line\">import &apos;package:flutter_swiper/flutter_swiper.dart&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class HomePage extends StatefulWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _HomePageState createState() =&gt; _HomePageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _HomePageState extends State&lt;HomePage&gt; &#123;</span><br><span class=\"line\">  List _imageUrls = [</span><br><span class=\"line\">    &apos;http://via.placeholder.com/350x150&apos;,</span><br><span class=\"line\">    &apos;http://via.placeholder.com/350x150&apos;,</span><br><span class=\"line\">    &apos;http://via.placeholder.com/350x150&apos;</span><br><span class=\"line\">  ];</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      body: Center(</span><br><span class=\"line\">        child: Column(</span><br><span class=\"line\">          children:&lt;Widget&gt;[</span><br><span class=\"line\">            Container(</span><br><span class=\"line\">              height: 160,</span><br><span class=\"line\">              child: Swiper(</span><br><span class=\"line\">                itemCount: _imageUrls.length,</span><br><span class=\"line\">                autoplay: true,</span><br><span class=\"line\">                itemBuilder: (BuildContext context, int index) &#123;</span><br><span class=\"line\">                  return Image.network(</span><br><span class=\"line\">                    _imageUrls[index],</span><br><span class=\"line\">                    fit: BoxFit.fill</span><br><span class=\"line\">                  );</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                pagination:SwiperPagination(),</span><br><span class=\"line\">              )</span><br><span class=\"line\">            )</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"滚动渐变\"><a href=\"#滚动渐变\" class=\"headerlink\" title=\"滚动渐变\"></a>滚动渐变</h3><p>使用ListView组件进行滚动，NotificationListener()监听滚动的距离, MediaQuery.removePadding去除顶部的距离。Stack进行层叠布局，Widget越后创建，层级越靠上。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;package:flutter/material.dart&apos;;</span><br><span class=\"line\">import &apos;package:flutter_swiper/flutter_swiper.dart&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">const APPBAR_SCROLL_OFFSET = 100;</span><br><span class=\"line\"></span><br><span class=\"line\">class HomePage extends StatefulWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _HomePageState createState() =&gt; _HomePageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _HomePageState extends State&lt;HomePage&gt; &#123;</span><br><span class=\"line\">  List _imageUrls = [</span><br><span class=\"line\">    &apos;http://via.placeholder.com/350x150&apos;,</span><br><span class=\"line\">    &apos;http://via.placeholder.com/350x150&apos;,</span><br><span class=\"line\">    &apos;http://via.placeholder.com/350x150&apos;</span><br><span class=\"line\">  ];</span><br><span class=\"line\"></span><br><span class=\"line\">  double appBarAlpha = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">  //滚动函数</span><br><span class=\"line\">  _onScroll(offset) &#123;</span><br><span class=\"line\">    double alpha = offset / APPBAR_SCROLL_OFFSET;</span><br><span class=\"line\">    print(alpha);</span><br><span class=\"line\">    if (alpha &lt; 0) &#123;</span><br><span class=\"line\">      alpha = 0;</span><br><span class=\"line\">    &#125;else if (alpha &gt; 1) &#123;</span><br><span class=\"line\">      alpha = 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      appBarAlpha = alpha;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      body: Stack(</span><br><span class=\"line\">        children: &lt;Widget&gt; [</span><br><span class=\"line\">          MediaQuery.removePadding(</span><br><span class=\"line\">            removeTop: true,</span><br><span class=\"line\">            context: context, </span><br><span class=\"line\">            child: NotificationListener(</span><br><span class=\"line\">              onNotification: (scrollNotification) &#123;</span><br><span class=\"line\">                if (scrollNotification is ScrollNotification &amp;&amp; scrollNotification.depth == 0) &#123;</span><br><span class=\"line\">                  _onScroll(scrollNotification.metrics.pixels);</span><br><span class=\"line\">                 </span><br><span class=\"line\">                &#125;    </span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              child: ListView(</span><br><span class=\"line\">                children: &lt;Widget&gt;[</span><br><span class=\"line\">                  Container(</span><br><span class=\"line\">                    height: 160,</span><br><span class=\"line\">                    child: Swiper(</span><br><span class=\"line\">                      itemCount: _imageUrls.length,</span><br><span class=\"line\">                      autoplay: true,</span><br><span class=\"line\">                      itemBuilder: (BuildContext context, int index) &#123;</span><br><span class=\"line\">                        return Image.network(</span><br><span class=\"line\">                          _imageUrls[index],</span><br><span class=\"line\">                          fit: BoxFit.fill</span><br><span class=\"line\">                        );</span><br><span class=\"line\">                      &#125;,</span><br><span class=\"line\">                      pagination:SwiperPagination(),</span><br><span class=\"line\">                    )</span><br><span class=\"line\">                  )</span><br><span class=\"line\">                ]</span><br><span class=\"line\">              )</span><br><span class=\"line\">            )</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          Opacity(</span><br><span class=\"line\">            opacity: appBarAlpha,</span><br><span class=\"line\">            child: Container(</span><br><span class=\"line\">              height: 60,</span><br><span class=\"line\">              decoration: BoxDecoration(color: Colors.white),</span><br><span class=\"line\">              child: Center(</span><br><span class=\"line\">                child: Padding(</span><br><span class=\"line\">                  padding: EdgeInsets.only(top: 20),</span><br><span class=\"line\">                  child: Text(&apos;首页&apos;)</span><br><span class=\"line\">                )</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      )</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"Flutter-常用的组件\"><a href=\"#Flutter-常用的组件\" class=\"headerlink\" title=\"Flutter 常用的组件\"></a>Flutter 常用的组件</h3>","more":"<h3 id=\"Flutter实例项目\"><a href=\"#Flutter实例项目\" class=\"headerlink\" title=\"Flutter实例项目\"></a>Flutter实例项目</h3><p>1.<a href=\"https://github.com/flutter/flutter/tree/master/examples\" target=\"_blank\" rel=\"noopener\">https://github.com/flutter/flutter/tree/master/examples</a></p>\n<p>2.<a href=\"https://github.com/flutter/samples\" target=\"_blank\" rel=\"noopener\">https://github.com/flutter/samples</a></p>\n<p>3.<a href=\"https://github.com/nisrulz/flutter-examples\" target=\"_blank\" rel=\"noopener\">https://github.com/nisrulz/flutter-examples</a></p>\n<p>4.<a href=\"https://github.com/iampawan/FlutterExampleApps\" target=\"_blank\" rel=\"noopener\">https://github.com/iampawan/FlutterExampleApps</a></p>\n<h3 id=\"BottomNavigationBar-实践\"><a href=\"#BottomNavigationBar-实践\" class=\"headerlink\" title=\"BottomNavigationBar 实践\"></a>BottomNavigationBar 实践</h3><p>配置BottomNavigationBar，根据更新索引值，PageView切换不同页面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;package:flutter/material.dart&apos;;</span><br><span class=\"line\">import &apos;package:flutter_trip/pages/home_page.dart&apos;;</span><br><span class=\"line\">import &apos;package:flutter_trip/pages/my_page.dart&apos;;</span><br><span class=\"line\">import &apos;package:flutter_trip/pages/search_page.dart&apos;;</span><br><span class=\"line\">import &apos;package:flutter_trip/pages/travel_page.dart&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class TabNavigator extends StatefulWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _TabNavigatorState createState() =&gt; _TabNavigatorState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _TabNavigatorState extends State&lt;TabNavigator&gt; &#123;</span><br><span class=\"line\">  final _defaultColor = Colors.grey;</span><br><span class=\"line\">  final _activeColor = Colors.blue;</span><br><span class=\"line\">  int _currentIndex = 0;</span><br><span class=\"line\">  final PageController _controller = PageController();</span><br><span class=\"line\">  </span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      body: PageView(</span><br><span class=\"line\">        controller: _controller,</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          HomePage(),</span><br><span class=\"line\">          SearchPage(),</span><br><span class=\"line\">          TravelPage(),</span><br><span class=\"line\">          MyPage(),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      bottomNavigationBar: BottomNavigationBar(</span><br><span class=\"line\">        currentIndex: _currentIndex, //当前索引</span><br><span class=\"line\">        onTap: (index) &#123;</span><br><span class=\"line\">          _controller.jumpToPage(index); //不同的index对应不同页面</span><br><span class=\"line\">          setState(() &#123;</span><br><span class=\"line\">            _currentIndex = index;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;, </span><br><span class=\"line\">        type: BottomNavigationBarType.fixed,</span><br><span class=\"line\">        items: [</span><br><span class=\"line\">          BottomNavigationBarItem(</span><br><span class=\"line\">            icon: Icon(Icons.home, color: _defaultColor),</span><br><span class=\"line\">            activeIcon: Icon(Icons.home, color: _activeColor),</span><br><span class=\"line\">            title: Text(</span><br><span class=\"line\">              &apos;首页&apos;,</span><br><span class=\"line\">              style: TextStyle(</span><br><span class=\"line\">                color: _currentIndex != 0 ? _defaultColor : _activeColor</span><br><span class=\"line\">              )</span><br><span class=\"line\">            )</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          BottomNavigationBarItem(</span><br><span class=\"line\">            icon: Icon(Icons.search, color: _defaultColor),</span><br><span class=\"line\">            activeIcon: Icon(Icons.search, color: _activeColor),</span><br><span class=\"line\">            title: Text(</span><br><span class=\"line\">              &apos;搜索&apos;,</span><br><span class=\"line\">              style: TextStyle(</span><br><span class=\"line\">                color: _currentIndex != 1 ? _defaultColor : _activeColor</span><br><span class=\"line\">              )</span><br><span class=\"line\">            )</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          BottomNavigationBarItem(</span><br><span class=\"line\">            icon: Icon(Icons.camera_alt, color: _defaultColor),</span><br><span class=\"line\">            activeIcon: Icon(Icons.camera_alt, color: _activeColor),</span><br><span class=\"line\">            title: Text(</span><br><span class=\"line\">              &apos;旅拍&apos;,</span><br><span class=\"line\">              style: TextStyle(</span><br><span class=\"line\">                color: _currentIndex != 2 ? _defaultColor : _activeColor</span><br><span class=\"line\">              )</span><br><span class=\"line\">            )</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          BottomNavigationBarItem(</span><br><span class=\"line\">            icon: Icon(Icons.account_circle, color: _defaultColor),</span><br><span class=\"line\">            activeIcon: Icon(Icons.account_circle, color: _activeColor),</span><br><span class=\"line\">            title: Text(</span><br><span class=\"line\">              &apos;我的&apos;,</span><br><span class=\"line\">              style: TextStyle(</span><br><span class=\"line\">                color: _currentIndex != 3 ? _defaultColor : _activeColor</span><br><span class=\"line\">              )</span><br><span class=\"line\">            )</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ] </span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"轮播图\"><a href=\"#轮播图\" class=\"headerlink\" title=\"轮播图\"></a>轮播图</h3><p><a href=\"https://github.com/best-flutter/flutter_swiper/blob/master/README-ZH.md\" target=\"_blank\" rel=\"noopener\">https://github.com/best-flutter/flutter_swiper/blob/master/README-ZH.md</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter_swiper: ^1.1.4</span><br><span class=\"line\"></span><br><span class=\"line\">import &apos;package:flutter/material.dart&apos;;</span><br><span class=\"line\">import &apos;package:flutter_swiper/flutter_swiper.dart&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class HomePage extends StatefulWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _HomePageState createState() =&gt; _HomePageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _HomePageState extends State&lt;HomePage&gt; &#123;</span><br><span class=\"line\">  List _imageUrls = [</span><br><span class=\"line\">    &apos;http://via.placeholder.com/350x150&apos;,</span><br><span class=\"line\">    &apos;http://via.placeholder.com/350x150&apos;,</span><br><span class=\"line\">    &apos;http://via.placeholder.com/350x150&apos;</span><br><span class=\"line\">  ];</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      body: Center(</span><br><span class=\"line\">        child: Column(</span><br><span class=\"line\">          children:&lt;Widget&gt;[</span><br><span class=\"line\">            Container(</span><br><span class=\"line\">              height: 160,</span><br><span class=\"line\">              child: Swiper(</span><br><span class=\"line\">                itemCount: _imageUrls.length,</span><br><span class=\"line\">                autoplay: true,</span><br><span class=\"line\">                itemBuilder: (BuildContext context, int index) &#123;</span><br><span class=\"line\">                  return Image.network(</span><br><span class=\"line\">                    _imageUrls[index],</span><br><span class=\"line\">                    fit: BoxFit.fill</span><br><span class=\"line\">                  );</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                pagination:SwiperPagination(),</span><br><span class=\"line\">              )</span><br><span class=\"line\">            )</span><br><span class=\"line\">          ]</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"滚动渐变\"><a href=\"#滚动渐变\" class=\"headerlink\" title=\"滚动渐变\"></a>滚动渐变</h3><p>使用ListView组件进行滚动，NotificationListener()监听滚动的距离, MediaQuery.removePadding去除顶部的距离。Stack进行层叠布局，Widget越后创建，层级越靠上。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;package:flutter/material.dart&apos;;</span><br><span class=\"line\">import &apos;package:flutter_swiper/flutter_swiper.dart&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">const APPBAR_SCROLL_OFFSET = 100;</span><br><span class=\"line\"></span><br><span class=\"line\">class HomePage extends StatefulWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _HomePageState createState() =&gt; _HomePageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _HomePageState extends State&lt;HomePage&gt; &#123;</span><br><span class=\"line\">  List _imageUrls = [</span><br><span class=\"line\">    &apos;http://via.placeholder.com/350x150&apos;,</span><br><span class=\"line\">    &apos;http://via.placeholder.com/350x150&apos;,</span><br><span class=\"line\">    &apos;http://via.placeholder.com/350x150&apos;</span><br><span class=\"line\">  ];</span><br><span class=\"line\"></span><br><span class=\"line\">  double appBarAlpha = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">  //滚动函数</span><br><span class=\"line\">  _onScroll(offset) &#123;</span><br><span class=\"line\">    double alpha = offset / APPBAR_SCROLL_OFFSET;</span><br><span class=\"line\">    print(alpha);</span><br><span class=\"line\">    if (alpha &lt; 0) &#123;</span><br><span class=\"line\">      alpha = 0;</span><br><span class=\"line\">    &#125;else if (alpha &gt; 1) &#123;</span><br><span class=\"line\">      alpha = 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      appBarAlpha = alpha;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      body: Stack(</span><br><span class=\"line\">        children: &lt;Widget&gt; [</span><br><span class=\"line\">          MediaQuery.removePadding(</span><br><span class=\"line\">            removeTop: true,</span><br><span class=\"line\">            context: context, </span><br><span class=\"line\">            child: NotificationListener(</span><br><span class=\"line\">              onNotification: (scrollNotification) &#123;</span><br><span class=\"line\">                if (scrollNotification is ScrollNotification &amp;&amp; scrollNotification.depth == 0) &#123;</span><br><span class=\"line\">                  _onScroll(scrollNotification.metrics.pixels);</span><br><span class=\"line\">                 </span><br><span class=\"line\">                &#125;    </span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              child: ListView(</span><br><span class=\"line\">                children: &lt;Widget&gt;[</span><br><span class=\"line\">                  Container(</span><br><span class=\"line\">                    height: 160,</span><br><span class=\"line\">                    child: Swiper(</span><br><span class=\"line\">                      itemCount: _imageUrls.length,</span><br><span class=\"line\">                      autoplay: true,</span><br><span class=\"line\">                      itemBuilder: (BuildContext context, int index) &#123;</span><br><span class=\"line\">                        return Image.network(</span><br><span class=\"line\">                          _imageUrls[index],</span><br><span class=\"line\">                          fit: BoxFit.fill</span><br><span class=\"line\">                        );</span><br><span class=\"line\">                      &#125;,</span><br><span class=\"line\">                      pagination:SwiperPagination(),</span><br><span class=\"line\">                    )</span><br><span class=\"line\">                  )</span><br><span class=\"line\">                ]</span><br><span class=\"line\">              )</span><br><span class=\"line\">            )</span><br><span class=\"line\">          ),</span><br><span class=\"line\">          Opacity(</span><br><span class=\"line\">            opacity: appBarAlpha,</span><br><span class=\"line\">            child: Container(</span><br><span class=\"line\">              height: 60,</span><br><span class=\"line\">              decoration: BoxDecoration(color: Colors.white),</span><br><span class=\"line\">              child: Center(</span><br><span class=\"line\">                child: Padding(</span><br><span class=\"line\">                  padding: EdgeInsets.only(top: 20),</span><br><span class=\"line\">                  child: Text(&apos;首页&apos;)</span><br><span class=\"line\">                )</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ),</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      )</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Flutter学习之路 - 列表的使用","date":"2020-06-05T01:58:42.000Z","_content":"\n### 列表的使用\n\n<!-- more -->\n\n### 基础列表的使用\n\n1.scrollDirection: Axis.horizontal 列表的横行滚动\n\n2.toList()转成List列表\n\n```\nconst CITY_NAMES = ['北京','上海','广州','深圳','杭州','苏州','武汉','西安','西藏'];\n\nclass SearchPage extends StatefulWidget {\n  @override\n  _SearchPageState createState() => _SearchPageState();\n}\n\nclass _SearchPageState extends State<SearchPage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        height: 100,\n        child:ListView(\n          scrollDirection: Axis.horizontal,\n          children:  _buildList()\n        )\n      )\n    );\n  }\n\n  List<Widget>_buildList() {\n    return CITY_NAMES.map((city) => _item(city)).toList();\n  }\n  \n  Widget _item(city) {\n    return Container(\n      width: 160,\n      margin: EdgeInsets.only(right:15),\n      alignment:Alignment.center,\n      decoration: BoxDecoration(color: Colors.teal),\n      child: Text(\n        city,\n        style: TextStyle(color: Colors.white, fontSize: 20),\n      ),\n    );\n  }\n}\n\n```\n\n### 列表的展开和收起\n\n定义widgets的List，遍历keys，使用ExpansionTile的Widget来展开和收起\n\n```\nconst CITY_NAMES = {\n  '北京': ['东城区','西城区','朝阳区','丰台区','石景山区'],\n  '上海': ['黄浦区', '徐汇区','长宁区','静安区'],\n  '广州': ['越秀','海珠','荔湾'],\n};\n\nclass SearchPage extends StatefulWidget {\n  @override\n  _SearchPageState createState() => _SearchPageState();\n}\n\nclass _SearchPageState extends State<SearchPage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        child:ListView(\n          children:  _buildList()\n        )\n      )\n    );\n  }\n\n  List<Widget>_buildList() {\n    List<Widget> widgets = [];\n    CITY_NAMES.keys.forEach((key) {\n      widgets.add(_item(key,CITY_NAMES[key]));\n    });\n    return widgets;\n  }\n  \n  Widget _item(String city, List<String> subCities) {\n    return ExpansionTile(\n      title: Text(\n        city,\n        style: TextStyle(color: Colors.black54,fontSize: 20),\n      ),\n      children: subCities.map((subCity) => _buildSub(subCity)).toList()\n    );\n  }\n\n  Widget _buildSub(String subCity) {\n    return FractionallySizedBox(\n      widthFactor: 1,\n      child: Container(\n        height: 50,\n        margin: EdgeInsets.only(bottom:5),\n        decoration: BoxDecoration(color: Colors.black54),\n        child: Text(subCity),\n      ),\n    );\n  }\n}\n```\n\n### 网格布局\n\n使用GridView.count进行网格布局\n\n```\nconst CITY_NAMES = ['北京','上海','广州','深圳','杭州','苏州','武汉','西安','西藏'];\n\nclass SearchPage extends StatefulWidget {\n  @override\n  _SearchPageState createState() => _SearchPageState();\n}\n\nclass _SearchPageState extends State<SearchPage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: GridView.count(\n          crossAxisCount: 4,\n          children: _buildList(),\n        )\n    );\n  }\n\n  List<Widget>_buildList() {\n    return CITY_NAMES.map((city) => _item(city)).toList();\n  }\n  \n  Widget _item(city) {\n    return Container(\n      height: 80,\n      margin: EdgeInsets.only(bottom: 5),\n      alignment:Alignment.center,\n      decoration: BoxDecoration(color: Colors.teal),\n      child: Text(\n        city,\n        style: TextStyle(color: Colors.white, fontSize: 20),\n      ),\n    );\n  }\n}\n\n```\n\n### 下拉刷新和上拉加载\n\n1.下拉刷新使用RefreshIndicator里的onRefresh回调\n\n2.上拉加载添加ScrollController(), 在生命周期开始initState判断页面当前滚动位置等于页面最大滚动位置，执行加载更多当函数。在生命周期结束dispose将之前当监听移除，减少消耗，提升性能。\n\n```\nconst CITY_NAMES = ['北京','上海','广州','深圳','杭州','苏州','武汉','西安','西藏'];\n\nclass SearchPage extends StatefulWidget {\n  @override\n  _SearchPageState createState() => _SearchPageState();\n}\n\nclass _SearchPageState extends State<SearchPage> {\n\n  List<String> cityNames =  ['北京','上海','广州','深圳','杭州','苏州','武汉','西安','西藏'];\n\n  ScrollController _scrollController = ScrollController();\n\n  @override\n  void initState() {\n    _scrollController.addListener(() {\n      if(_scrollController.position.pixels == _scrollController.position.maxScrollExtent) {\n        _loadData();\n      }\n    });\n    super.initState();\n  }\n\n  @override\n  void dispose() {\n    _scrollController.dispose();\n    super.dispose();\n  }\n\n  _loadData() async {\n    await Future.delayed(Duration(milliseconds: 200));\n\n    setState(() {\n      List<String> list = List<String>.from(cityNames);\n      list.addAll(cityNames);\n      cityNames = list;\n    });\n\n    print('上拉加载');\n  }\n\n  Future<Null> _handleRefresh() async {\n    await Future.delayed(Duration(seconds: 2));\n    setState(() {\n      cityNames = cityNames.reversed.toList();\n    });\n    print('下拉刷新');\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: RefreshIndicator(\n        child: ListView(\n          controller: _scrollController,\n          children: _buildList()\n        ), \n        onRefresh: _handleRefresh\n      )\n    );\n  }\n  \n  List<Widget>_buildList() {\n    return cityNames.map((city) => _item(city)).toList();\n  }\n  \n  Widget _item(city) {\n    return Container(\n      height: 80,\n      margin: EdgeInsets.only(bottom: 5),\n      alignment:Alignment.center,\n      decoration: BoxDecoration(color: Colors.teal),\n      child: Text(\n        city,\n        style: TextStyle(color: Colors.white, fontSize: 20),\n      ),\n    );\n  }\n}\n```\n","source":"_posts/flutter-4-list.md","raw":"---\ntitle: Flutter学习之路 - 列表的使用\ndate: 2020-06-05 09:58:42\ntags: ['Flutter']\ncategories: Flutter\n---\n\n### 列表的使用\n\n<!-- more -->\n\n### 基础列表的使用\n\n1.scrollDirection: Axis.horizontal 列表的横行滚动\n\n2.toList()转成List列表\n\n```\nconst CITY_NAMES = ['北京','上海','广州','深圳','杭州','苏州','武汉','西安','西藏'];\n\nclass SearchPage extends StatefulWidget {\n  @override\n  _SearchPageState createState() => _SearchPageState();\n}\n\nclass _SearchPageState extends State<SearchPage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        height: 100,\n        child:ListView(\n          scrollDirection: Axis.horizontal,\n          children:  _buildList()\n        )\n      )\n    );\n  }\n\n  List<Widget>_buildList() {\n    return CITY_NAMES.map((city) => _item(city)).toList();\n  }\n  \n  Widget _item(city) {\n    return Container(\n      width: 160,\n      margin: EdgeInsets.only(right:15),\n      alignment:Alignment.center,\n      decoration: BoxDecoration(color: Colors.teal),\n      child: Text(\n        city,\n        style: TextStyle(color: Colors.white, fontSize: 20),\n      ),\n    );\n  }\n}\n\n```\n\n### 列表的展开和收起\n\n定义widgets的List，遍历keys，使用ExpansionTile的Widget来展开和收起\n\n```\nconst CITY_NAMES = {\n  '北京': ['东城区','西城区','朝阳区','丰台区','石景山区'],\n  '上海': ['黄浦区', '徐汇区','长宁区','静安区'],\n  '广州': ['越秀','海珠','荔湾'],\n};\n\nclass SearchPage extends StatefulWidget {\n  @override\n  _SearchPageState createState() => _SearchPageState();\n}\n\nclass _SearchPageState extends State<SearchPage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        child:ListView(\n          children:  _buildList()\n        )\n      )\n    );\n  }\n\n  List<Widget>_buildList() {\n    List<Widget> widgets = [];\n    CITY_NAMES.keys.forEach((key) {\n      widgets.add(_item(key,CITY_NAMES[key]));\n    });\n    return widgets;\n  }\n  \n  Widget _item(String city, List<String> subCities) {\n    return ExpansionTile(\n      title: Text(\n        city,\n        style: TextStyle(color: Colors.black54,fontSize: 20),\n      ),\n      children: subCities.map((subCity) => _buildSub(subCity)).toList()\n    );\n  }\n\n  Widget _buildSub(String subCity) {\n    return FractionallySizedBox(\n      widthFactor: 1,\n      child: Container(\n        height: 50,\n        margin: EdgeInsets.only(bottom:5),\n        decoration: BoxDecoration(color: Colors.black54),\n        child: Text(subCity),\n      ),\n    );\n  }\n}\n```\n\n### 网格布局\n\n使用GridView.count进行网格布局\n\n```\nconst CITY_NAMES = ['北京','上海','广州','深圳','杭州','苏州','武汉','西安','西藏'];\n\nclass SearchPage extends StatefulWidget {\n  @override\n  _SearchPageState createState() => _SearchPageState();\n}\n\nclass _SearchPageState extends State<SearchPage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: GridView.count(\n          crossAxisCount: 4,\n          children: _buildList(),\n        )\n    );\n  }\n\n  List<Widget>_buildList() {\n    return CITY_NAMES.map((city) => _item(city)).toList();\n  }\n  \n  Widget _item(city) {\n    return Container(\n      height: 80,\n      margin: EdgeInsets.only(bottom: 5),\n      alignment:Alignment.center,\n      decoration: BoxDecoration(color: Colors.teal),\n      child: Text(\n        city,\n        style: TextStyle(color: Colors.white, fontSize: 20),\n      ),\n    );\n  }\n}\n\n```\n\n### 下拉刷新和上拉加载\n\n1.下拉刷新使用RefreshIndicator里的onRefresh回调\n\n2.上拉加载添加ScrollController(), 在生命周期开始initState判断页面当前滚动位置等于页面最大滚动位置，执行加载更多当函数。在生命周期结束dispose将之前当监听移除，减少消耗，提升性能。\n\n```\nconst CITY_NAMES = ['北京','上海','广州','深圳','杭州','苏州','武汉','西安','西藏'];\n\nclass SearchPage extends StatefulWidget {\n  @override\n  _SearchPageState createState() => _SearchPageState();\n}\n\nclass _SearchPageState extends State<SearchPage> {\n\n  List<String> cityNames =  ['北京','上海','广州','深圳','杭州','苏州','武汉','西安','西藏'];\n\n  ScrollController _scrollController = ScrollController();\n\n  @override\n  void initState() {\n    _scrollController.addListener(() {\n      if(_scrollController.position.pixels == _scrollController.position.maxScrollExtent) {\n        _loadData();\n      }\n    });\n    super.initState();\n  }\n\n  @override\n  void dispose() {\n    _scrollController.dispose();\n    super.dispose();\n  }\n\n  _loadData() async {\n    await Future.delayed(Duration(milliseconds: 200));\n\n    setState(() {\n      List<String> list = List<String>.from(cityNames);\n      list.addAll(cityNames);\n      cityNames = list;\n    });\n\n    print('上拉加载');\n  }\n\n  Future<Null> _handleRefresh() async {\n    await Future.delayed(Duration(seconds: 2));\n    setState(() {\n      cityNames = cityNames.reversed.toList();\n    });\n    print('下拉刷新');\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: RefreshIndicator(\n        child: ListView(\n          controller: _scrollController,\n          children: _buildList()\n        ), \n        onRefresh: _handleRefresh\n      )\n    );\n  }\n  \n  List<Widget>_buildList() {\n    return cityNames.map((city) => _item(city)).toList();\n  }\n  \n  Widget _item(city) {\n    return Container(\n      height: 80,\n      margin: EdgeInsets.only(bottom: 5),\n      alignment:Alignment.center,\n      decoration: BoxDecoration(color: Colors.teal),\n      child: Text(\n        city,\n        style: TextStyle(color: Colors.white, fontSize: 20),\n      ),\n    );\n  }\n}\n```\n","slug":"flutter-4-list","published":1,"updated":"2020-06-05T01:59:34.612Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq42a001vhe6j1wdl3af1","content":"<h3 id=\"列表的使用\"><a href=\"#列表的使用\" class=\"headerlink\" title=\"列表的使用\"></a>列表的使用</h3><a id=\"more\"></a>\n<h3 id=\"基础列表的使用\"><a href=\"#基础列表的使用\" class=\"headerlink\" title=\"基础列表的使用\"></a>基础列表的使用</h3><p>1.scrollDirection: Axis.horizontal 列表的横行滚动</p>\n<p>2.toList()转成List列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const CITY_NAMES = [&apos;北京&apos;,&apos;上海&apos;,&apos;广州&apos;,&apos;深圳&apos;,&apos;杭州&apos;,&apos;苏州&apos;,&apos;武汉&apos;,&apos;西安&apos;,&apos;西藏&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">class SearchPage extends StatefulWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _SearchPageState createState() =&gt; _SearchPageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _SearchPageState extends State&lt;SearchPage&gt; &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      body: Container(</span><br><span class=\"line\">        height: 100,</span><br><span class=\"line\">        child:ListView(</span><br><span class=\"line\">          scrollDirection: Axis.horizontal,</span><br><span class=\"line\">          children:  _buildList()</span><br><span class=\"line\">        )</span><br><span class=\"line\">      )</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  List&lt;Widget&gt;_buildList() &#123;</span><br><span class=\"line\">    return CITY_NAMES.map((city) =&gt; _item(city)).toList();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  Widget _item(city) &#123;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      width: 160,</span><br><span class=\"line\">      margin: EdgeInsets.only(right:15),</span><br><span class=\"line\">      alignment:Alignment.center,</span><br><span class=\"line\">      decoration: BoxDecoration(color: Colors.teal),</span><br><span class=\"line\">      child: Text(</span><br><span class=\"line\">        city,</span><br><span class=\"line\">        style: TextStyle(color: Colors.white, fontSize: 20),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"列表的展开和收起\"><a href=\"#列表的展开和收起\" class=\"headerlink\" title=\"列表的展开和收起\"></a>列表的展开和收起</h3><p>定义widgets的List，遍历keys，使用ExpansionTile的Widget来展开和收起</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const CITY_NAMES = &#123;</span><br><span class=\"line\">  &apos;北京&apos;: [&apos;东城区&apos;,&apos;西城区&apos;,&apos;朝阳区&apos;,&apos;丰台区&apos;,&apos;石景山区&apos;],</span><br><span class=\"line\">  &apos;上海&apos;: [&apos;黄浦区&apos;, &apos;徐汇区&apos;,&apos;长宁区&apos;,&apos;静安区&apos;],</span><br><span class=\"line\">  &apos;广州&apos;: [&apos;越秀&apos;,&apos;海珠&apos;,&apos;荔湾&apos;],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">class SearchPage extends StatefulWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _SearchPageState createState() =&gt; _SearchPageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _SearchPageState extends State&lt;SearchPage&gt; &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      body: Container(</span><br><span class=\"line\">        child:ListView(</span><br><span class=\"line\">          children:  _buildList()</span><br><span class=\"line\">        )</span><br><span class=\"line\">      )</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  List&lt;Widget&gt;_buildList() &#123;</span><br><span class=\"line\">    List&lt;Widget&gt; widgets = [];</span><br><span class=\"line\">    CITY_NAMES.keys.forEach((key) &#123;</span><br><span class=\"line\">      widgets.add(_item(key,CITY_NAMES[key]));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    return widgets;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  Widget _item(String city, List&lt;String&gt; subCities) &#123;</span><br><span class=\"line\">    return ExpansionTile(</span><br><span class=\"line\">      title: Text(</span><br><span class=\"line\">        city,</span><br><span class=\"line\">        style: TextStyle(color: Colors.black54,fontSize: 20),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      children: subCities.map((subCity) =&gt; _buildSub(subCity)).toList()</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Widget _buildSub(String subCity) &#123;</span><br><span class=\"line\">    return FractionallySizedBox(</span><br><span class=\"line\">      widthFactor: 1,</span><br><span class=\"line\">      child: Container(</span><br><span class=\"line\">        height: 50,</span><br><span class=\"line\">        margin: EdgeInsets.only(bottom:5),</span><br><span class=\"line\">        decoration: BoxDecoration(color: Colors.black54),</span><br><span class=\"line\">        child: Text(subCity),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"网格布局\"><a href=\"#网格布局\" class=\"headerlink\" title=\"网格布局\"></a>网格布局</h3><p>使用GridView.count进行网格布局</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const CITY_NAMES = [&apos;北京&apos;,&apos;上海&apos;,&apos;广州&apos;,&apos;深圳&apos;,&apos;杭州&apos;,&apos;苏州&apos;,&apos;武汉&apos;,&apos;西安&apos;,&apos;西藏&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">class SearchPage extends StatefulWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _SearchPageState createState() =&gt; _SearchPageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _SearchPageState extends State&lt;SearchPage&gt; &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      body: GridView.count(</span><br><span class=\"line\">          crossAxisCount: 4,</span><br><span class=\"line\">          children: _buildList(),</span><br><span class=\"line\">        )</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  List&lt;Widget&gt;_buildList() &#123;</span><br><span class=\"line\">    return CITY_NAMES.map((city) =&gt; _item(city)).toList();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  Widget _item(city) &#123;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      height: 80,</span><br><span class=\"line\">      margin: EdgeInsets.only(bottom: 5),</span><br><span class=\"line\">      alignment:Alignment.center,</span><br><span class=\"line\">      decoration: BoxDecoration(color: Colors.teal),</span><br><span class=\"line\">      child: Text(</span><br><span class=\"line\">        city,</span><br><span class=\"line\">        style: TextStyle(color: Colors.white, fontSize: 20),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"下拉刷新和上拉加载\"><a href=\"#下拉刷新和上拉加载\" class=\"headerlink\" title=\"下拉刷新和上拉加载\"></a>下拉刷新和上拉加载</h3><p>1.下拉刷新使用RefreshIndicator里的onRefresh回调</p>\n<p>2.上拉加载添加ScrollController(), 在生命周期开始initState判断页面当前滚动位置等于页面最大滚动位置，执行加载更多当函数。在生命周期结束dispose将之前当监听移除，减少消耗，提升性能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const CITY_NAMES = [&apos;北京&apos;,&apos;上海&apos;,&apos;广州&apos;,&apos;深圳&apos;,&apos;杭州&apos;,&apos;苏州&apos;,&apos;武汉&apos;,&apos;西安&apos;,&apos;西藏&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">class SearchPage extends StatefulWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _SearchPageState createState() =&gt; _SearchPageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _SearchPageState extends State&lt;SearchPage&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  List&lt;String&gt; cityNames =  [&apos;北京&apos;,&apos;上海&apos;,&apos;广州&apos;,&apos;深圳&apos;,&apos;杭州&apos;,&apos;苏州&apos;,&apos;武汉&apos;,&apos;西安&apos;,&apos;西藏&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">  ScrollController _scrollController = ScrollController();</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void initState() &#123;</span><br><span class=\"line\">    _scrollController.addListener(() &#123;</span><br><span class=\"line\">      if(_scrollController.position.pixels == _scrollController.position.maxScrollExtent) &#123;</span><br><span class=\"line\">        _loadData();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    super.initState();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void dispose() &#123;</span><br><span class=\"line\">    _scrollController.dispose();</span><br><span class=\"line\">    super.dispose();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  _loadData() async &#123;</span><br><span class=\"line\">    await Future.delayed(Duration(milliseconds: 200));</span><br><span class=\"line\"></span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      List&lt;String&gt; list = List&lt;String&gt;.from(cityNames);</span><br><span class=\"line\">      list.addAll(cityNames);</span><br><span class=\"line\">      cityNames = list;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&apos;上拉加载&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Future&lt;Null&gt; _handleRefresh() async &#123;</span><br><span class=\"line\">    await Future.delayed(Duration(seconds: 2));</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      cityNames = cityNames.reversed.toList();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    print(&apos;下拉刷新&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      body: RefreshIndicator(</span><br><span class=\"line\">        child: ListView(</span><br><span class=\"line\">          controller: _scrollController,</span><br><span class=\"line\">          children: _buildList()</span><br><span class=\"line\">        ), </span><br><span class=\"line\">        onRefresh: _handleRefresh</span><br><span class=\"line\">      )</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  List&lt;Widget&gt;_buildList() &#123;</span><br><span class=\"line\">    return cityNames.map((city) =&gt; _item(city)).toList();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  Widget _item(city) &#123;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      height: 80,</span><br><span class=\"line\">      margin: EdgeInsets.only(bottom: 5),</span><br><span class=\"line\">      alignment:Alignment.center,</span><br><span class=\"line\">      decoration: BoxDecoration(color: Colors.teal),</span><br><span class=\"line\">      child: Text(</span><br><span class=\"line\">        city,</span><br><span class=\"line\">        style: TextStyle(color: Colors.white, fontSize: 20),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"列表的使用\"><a href=\"#列表的使用\" class=\"headerlink\" title=\"列表的使用\"></a>列表的使用</h3>","more":"<h3 id=\"基础列表的使用\"><a href=\"#基础列表的使用\" class=\"headerlink\" title=\"基础列表的使用\"></a>基础列表的使用</h3><p>1.scrollDirection: Axis.horizontal 列表的横行滚动</p>\n<p>2.toList()转成List列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const CITY_NAMES = [&apos;北京&apos;,&apos;上海&apos;,&apos;广州&apos;,&apos;深圳&apos;,&apos;杭州&apos;,&apos;苏州&apos;,&apos;武汉&apos;,&apos;西安&apos;,&apos;西藏&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">class SearchPage extends StatefulWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _SearchPageState createState() =&gt; _SearchPageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _SearchPageState extends State&lt;SearchPage&gt; &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      body: Container(</span><br><span class=\"line\">        height: 100,</span><br><span class=\"line\">        child:ListView(</span><br><span class=\"line\">          scrollDirection: Axis.horizontal,</span><br><span class=\"line\">          children:  _buildList()</span><br><span class=\"line\">        )</span><br><span class=\"line\">      )</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  List&lt;Widget&gt;_buildList() &#123;</span><br><span class=\"line\">    return CITY_NAMES.map((city) =&gt; _item(city)).toList();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  Widget _item(city) &#123;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      width: 160,</span><br><span class=\"line\">      margin: EdgeInsets.only(right:15),</span><br><span class=\"line\">      alignment:Alignment.center,</span><br><span class=\"line\">      decoration: BoxDecoration(color: Colors.teal),</span><br><span class=\"line\">      child: Text(</span><br><span class=\"line\">        city,</span><br><span class=\"line\">        style: TextStyle(color: Colors.white, fontSize: 20),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"列表的展开和收起\"><a href=\"#列表的展开和收起\" class=\"headerlink\" title=\"列表的展开和收起\"></a>列表的展开和收起</h3><p>定义widgets的List，遍历keys，使用ExpansionTile的Widget来展开和收起</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const CITY_NAMES = &#123;</span><br><span class=\"line\">  &apos;北京&apos;: [&apos;东城区&apos;,&apos;西城区&apos;,&apos;朝阳区&apos;,&apos;丰台区&apos;,&apos;石景山区&apos;],</span><br><span class=\"line\">  &apos;上海&apos;: [&apos;黄浦区&apos;, &apos;徐汇区&apos;,&apos;长宁区&apos;,&apos;静安区&apos;],</span><br><span class=\"line\">  &apos;广州&apos;: [&apos;越秀&apos;,&apos;海珠&apos;,&apos;荔湾&apos;],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">class SearchPage extends StatefulWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _SearchPageState createState() =&gt; _SearchPageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _SearchPageState extends State&lt;SearchPage&gt; &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      body: Container(</span><br><span class=\"line\">        child:ListView(</span><br><span class=\"line\">          children:  _buildList()</span><br><span class=\"line\">        )</span><br><span class=\"line\">      )</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  List&lt;Widget&gt;_buildList() &#123;</span><br><span class=\"line\">    List&lt;Widget&gt; widgets = [];</span><br><span class=\"line\">    CITY_NAMES.keys.forEach((key) &#123;</span><br><span class=\"line\">      widgets.add(_item(key,CITY_NAMES[key]));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    return widgets;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  Widget _item(String city, List&lt;String&gt; subCities) &#123;</span><br><span class=\"line\">    return ExpansionTile(</span><br><span class=\"line\">      title: Text(</span><br><span class=\"line\">        city,</span><br><span class=\"line\">        style: TextStyle(color: Colors.black54,fontSize: 20),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      children: subCities.map((subCity) =&gt; _buildSub(subCity)).toList()</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Widget _buildSub(String subCity) &#123;</span><br><span class=\"line\">    return FractionallySizedBox(</span><br><span class=\"line\">      widthFactor: 1,</span><br><span class=\"line\">      child: Container(</span><br><span class=\"line\">        height: 50,</span><br><span class=\"line\">        margin: EdgeInsets.only(bottom:5),</span><br><span class=\"line\">        decoration: BoxDecoration(color: Colors.black54),</span><br><span class=\"line\">        child: Text(subCity),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"网格布局\"><a href=\"#网格布局\" class=\"headerlink\" title=\"网格布局\"></a>网格布局</h3><p>使用GridView.count进行网格布局</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const CITY_NAMES = [&apos;北京&apos;,&apos;上海&apos;,&apos;广州&apos;,&apos;深圳&apos;,&apos;杭州&apos;,&apos;苏州&apos;,&apos;武汉&apos;,&apos;西安&apos;,&apos;西藏&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">class SearchPage extends StatefulWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _SearchPageState createState() =&gt; _SearchPageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _SearchPageState extends State&lt;SearchPage&gt; &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      body: GridView.count(</span><br><span class=\"line\">          crossAxisCount: 4,</span><br><span class=\"line\">          children: _buildList(),</span><br><span class=\"line\">        )</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  List&lt;Widget&gt;_buildList() &#123;</span><br><span class=\"line\">    return CITY_NAMES.map((city) =&gt; _item(city)).toList();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  Widget _item(city) &#123;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      height: 80,</span><br><span class=\"line\">      margin: EdgeInsets.only(bottom: 5),</span><br><span class=\"line\">      alignment:Alignment.center,</span><br><span class=\"line\">      decoration: BoxDecoration(color: Colors.teal),</span><br><span class=\"line\">      child: Text(</span><br><span class=\"line\">        city,</span><br><span class=\"line\">        style: TextStyle(color: Colors.white, fontSize: 20),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"下拉刷新和上拉加载\"><a href=\"#下拉刷新和上拉加载\" class=\"headerlink\" title=\"下拉刷新和上拉加载\"></a>下拉刷新和上拉加载</h3><p>1.下拉刷新使用RefreshIndicator里的onRefresh回调</p>\n<p>2.上拉加载添加ScrollController(), 在生命周期开始initState判断页面当前滚动位置等于页面最大滚动位置，执行加载更多当函数。在生命周期结束dispose将之前当监听移除，减少消耗，提升性能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const CITY_NAMES = [&apos;北京&apos;,&apos;上海&apos;,&apos;广州&apos;,&apos;深圳&apos;,&apos;杭州&apos;,&apos;苏州&apos;,&apos;武汉&apos;,&apos;西安&apos;,&apos;西藏&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">class SearchPage extends StatefulWidget &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _SearchPageState createState() =&gt; _SearchPageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _SearchPageState extends State&lt;SearchPage&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  List&lt;String&gt; cityNames =  [&apos;北京&apos;,&apos;上海&apos;,&apos;广州&apos;,&apos;深圳&apos;,&apos;杭州&apos;,&apos;苏州&apos;,&apos;武汉&apos;,&apos;西安&apos;,&apos;西藏&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">  ScrollController _scrollController = ScrollController();</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void initState() &#123;</span><br><span class=\"line\">    _scrollController.addListener(() &#123;</span><br><span class=\"line\">      if(_scrollController.position.pixels == _scrollController.position.maxScrollExtent) &#123;</span><br><span class=\"line\">        _loadData();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    super.initState();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void dispose() &#123;</span><br><span class=\"line\">    _scrollController.dispose();</span><br><span class=\"line\">    super.dispose();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  _loadData() async &#123;</span><br><span class=\"line\">    await Future.delayed(Duration(milliseconds: 200));</span><br><span class=\"line\"></span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      List&lt;String&gt; list = List&lt;String&gt;.from(cityNames);</span><br><span class=\"line\">      list.addAll(cityNames);</span><br><span class=\"line\">      cityNames = list;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    print(&apos;上拉加载&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  Future&lt;Null&gt; _handleRefresh() async &#123;</span><br><span class=\"line\">    await Future.delayed(Duration(seconds: 2));</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      cityNames = cityNames.reversed.toList();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    print(&apos;下拉刷新&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      body: RefreshIndicator(</span><br><span class=\"line\">        child: ListView(</span><br><span class=\"line\">          controller: _scrollController,</span><br><span class=\"line\">          children: _buildList()</span><br><span class=\"line\">        ), </span><br><span class=\"line\">        onRefresh: _handleRefresh</span><br><span class=\"line\">      )</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  List&lt;Widget&gt;_buildList() &#123;</span><br><span class=\"line\">    return cityNames.map((city) =&gt; _item(city)).toList();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  Widget _item(city) &#123;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      height: 80,</span><br><span class=\"line\">      margin: EdgeInsets.only(bottom: 5),</span><br><span class=\"line\">      alignment:Alignment.center,</span><br><span class=\"line\">      decoration: BoxDecoration(color: Colors.teal),</span><br><span class=\"line\">      child: Text(</span><br><span class=\"line\">        city,</span><br><span class=\"line\">        style: TextStyle(color: Colors.white, fontSize: 20),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Flutter学习之路 - 网络编程与数据存储技术","date":"2020-06-08T01:42:14.000Z","_content":"\n### 网络编程与数据存储技术\n\n<!-- more -->\n\n### 网络请求\n\n```\ndio: ^2.2.2\t\n\nimport 'package:cookie_jar/cookie_jar.dart';\nimport 'package:dio/dio.dart';\nimport 'package:fluttertoast/fluttertoast.dart';\n\nconst BASE_URL = 'xxx';\n\nclass HttpUtil {\n  static HttpUtil instance;\n  Dio dio;\n  BaseOptions options;\n\n  CancelToken cancelToken = CancelToken();\n\n  static HttpUtil getInstance() {\n    if (null == instance) instance = HttpUtil();\n    return instance;\n  }\n\n  /*\n   * config it and create\n   */\n  HttpUtil() {\n    //BaseOptions、Options、RequestOptions 都可以配置参数，优先级别依次递增，且可以根据优先级别覆盖参数\n    options = BaseOptions(\n      //请求基地址,可以包含子路径\n      baseUrl: BASE_URL,\n      //连接服务器超时时间，单位是毫秒.\n      connectTimeout: 10000,\n      //响应流上前后两次接受到数据的间隔，单位为毫秒。\n      receiveTimeout: 5000,\n      //Http请求头.\n      // headers: {\n      //   'Accept': 'application/json,*/*',\n      //   'Content-Type': 'application/json',\n      // },\n      //请求的Content-Type，默认值是\"application/json; charset=utf-8\",Headers.formUrlEncodedContentType会自动编码请求体.\n      // contentType: Headers.formUrlEncodedContentType,\n      //表示期望以那种格式(方式)接受响应数据。接受四种类型 `json`, `stream`, `plain`, `bytes`. 默认值是 `json`,\n      // contentType: Headers.formUrlEncodedContentType,\n      responseType: ResponseType.plain,\n    );\n\n    dio = Dio(options);\n\n    //Cookie管理\n    dio.interceptors.add(CookieManager(CookieJar()));\n\n    //添加拦截器\n    dio.interceptors\n        .add(InterceptorsWrapper(onRequest: (RequestOptions options) {\n      print(\"请求之前\");\n   \n      // Do something before request is sent\n      return options; //continue\n    }, onResponse: (Response response) {\n      print(\"响应之前\");\n      \n      // Do something with response data\n      return response; // continue\n    }, onError: (DioError e) {\n      print(\"错误之前\");\n      // Do something with response error\n      return e; //continue\n    }));\n  }\n\n  /*\n   * get请求\n   */\n  get(url, {data, options, cancelToken}) async {\n    Response response;\n    try {\n      response = await dio.get(url,\n          queryParameters: data, options: options, cancelToken: cancelToken);\n      print('get success---------${response.statusCode}');\n      print('get success---------${response.data}');\n\n//      response.data; 响应体\n//      response.headers; 响应头\n//      response.request; 请求体\n//      response.statusCode; 状态码\n\n    } on DioError catch (e) {\n      print('get error---------$e');\n      formatError(e);\n    }\n    return response;\n  }\n\n  /*\n   * post请求\n   */\n  post(url, {data, options, cancelToken}) async {\n    \n    Response response;\n    try {\n      response = await dio.post(url,\n          queryParameters: data, options: options, cancelToken: cancelToken);\n      print('post success---------${response.data}');\n    } on DioError catch (e) {\n      print('post error---------$e');\n      formatError(e);\n    }\n    return response;\n  }\n\n  /*\n   * 下载文件\n   */\n  downloadFile(urlPath, savePath) async {\n    Response response;\n    try {\n      response = await dio.download(urlPath, savePath,\n          onReceiveProgress: (int count, int total) {\n        //进度\n        print(\"$count $total\");\n      });\n      print('downloadFile success---------${response.data}');\n    } on DioError catch (e) {\n      print('downloadFile error---------$e');\n      formatError(e);\n    }\n    return response.data;\n  }\n\n  /*\n   * error统一处理\n   */\n  void formatError(DioError e) {\n    if (e.type == DioErrorType.CONNECT_TIMEOUT) {\n      // It occurs when url is opened timeout.\n      print(\"连接超时\");\n    } else if (e.type == DioErrorType.SEND_TIMEOUT) {\n      // It occurs when url is sent timeout.\n      print(\"请求超时\");\n    } else if (e.type == DioErrorType.RECEIVE_TIMEOUT) {\n      //It occurs when receiving timeout\n      print(\"响应超时\");\n    } else if (e.type == DioErrorType.RESPONSE) {\n      // When the server response, but with a incorrect status, such as 404, 503...\n      Fluttertoast.showToast(\n        msg: '网络异常',\n        toastLength: Toast.LENGTH_SHORT,\n        gravity: ToastGravity.CENTER,\n        timeInSecForIos: 1,         \n        fontSize: 16\n      );\n      print(\"网络异常\");\n    } else if (e.type == DioErrorType.CANCEL) {\n      // When the request is cancelled, dio will throw a error with this type.\n      print(\"请求取消\");\n    } else {\n      //DEFAULT Default error type, Some other Error. In this case, you can read the DioError.error if it is not null.\n      print(\"未知错误\");\n    }\n  }\n\n  /*\n   * 取消请求\n   *\n   * 同一个cancel token 可以用于多个请求，当一个cancel token取消时，所有使用该cancel token的请求都会被取消。\n   * 所以参数可选\n   */\n  void cancelRequests(CancelToken token) {\n    token.cancel(\"cancelled\");\n  }\n}\n```\n\n### Future\n\n#### 什么是Future\nFuture表示在接下来的某个时间的值或错误，借助Future我们可以在Flutter实现异步操作。\n\n> 它类似于ES6中的Promise，提供then和catchError的链式调用；\n\n```\nimport 'dart:async';\n\nFuture是dart:async包中的一个类，使用需要导入包，Future有两种状态\n\npending - 执行中\ncompleted - 执行结束，分两种情况要么成功要么失败\n```\n\n#### Future的then\n\n```\nFuture<String> testFuture() {\n  return Future.value('hello');\n}\n\n调用\ntestFuture().then((s) {\n  print(s);\n}, onError: (e) {\n  print(e);\n});\n\n```\n\n#### async await\n\n```\ntest() async {\n  int result = await Future.delayed(Duration(milliseconds: 2000),() {\n    return Future.value(1);\n  });\n\n  print('---$result');\n}\n```\n\n### JSON解析和序列化\n- 从服务端返回的json数据格式，Flutter需要对json格式的字符串转为Dart对象。\n\n#### 手动序列化数据，在模型中序列化JSON数据\n\n```\n{\n  \"id\":\"487349\",\n  \"name\":\"Pooja Bhaumik\",\n  \"score\" : 1000\n}\n\n//实现一个构造函数时使用 factory 关键字时\nclass Student{\n  String studentId;\n  String studentName;\n  int studentScores;\n\n  Student({\n    this.studentId,\n    this.studentName,\n    this.studentScores\n  });\n\n  //创建了一个叫做 Student.fromJson 的工厂方法，用来简单地反序列化你的 json\n  //Map<String, dynamic> 这意味着它将 String 键映射为 dynamic 值\n  //Map<String, dynamic> 因为键总是一个 string 并且值可以是任何类型，所以我们将它保持为 dynamic 以保证安全\n  factory Student.fromJson(Map<String, dynamic> parsedJson){\n    return Student(\n      studentId: parsedJson['id'],\n      studentName : parsedJson['name'],\n      studentScores : parsedJson ['score']\n    );\n  }\n}\n```\n\n```\n//使用\nFuture loadStudent() async {\n  String jsonString = await _loadAStudentAsset();\n  final jsonResponse = json.decode(jsonString); //解码我们得到的 json 字符串\n  //通过调用 Student.fromJson 方法反序列化解码的 json 响应，这样我们现在可以使用 Student 对象来访问我们的实体\n  Student student = new Student.fromJson(jsonResponse);\n  print(student.studentScores);\n}\n```\n#### 使用代码生成库序列化 JSON 数据\n\n> 使用Dio请求返回数据不是Json字符串，而是Json对象\n\n- 将responseType 设置为ResponseType.plain，默认使用json接收的。\n\n```\nresponseType: ResponseType.plain,\n```\n\n```\njson_annotation: ^2.0.0\nbuild_runner: ^1.0.0\njson_serializable: ^2.0.0\n```\n\n```\nimport 'package:json_annotation/json_annotation.dart';\n\n//生成 user.g.dart 文件\npart 'user.g.dart';\n\n//生成的JSON序列化逻辑\n@JsonSerializable(explicitToJson: true)\n\nclass User {\n  User(this.name, this.email);\n\n  String name;\n  String email;\n\n  //创建新的User实例的必要工厂构造函数，转Dart的对象\n  factory User.fromJson(Map<String, dynamic> json) => _$UserFromJson(json);\n\n  //转换为JSON\n  Map<String, dynamic> toJson() => _$UserToJson(this);\n}\n\n```\n- 每次修改模型文件，都要重新运行 - flutter packages pub run build_runner build\n\n```\n使用\n\ngetHttp() async { \n  try {\n      \n    var jsonString = await HttpUtil().get(\"/io/flutter_app/json/home_page.json\");\n\n    //jsonDecode() 方法来解码 JSON\n    Map userMap = jsonDecode(jsonString.data);\n\n    //在模型类中序列化 JSON 数据\n    var resultJson = HomeModel.fromJson(userMap); \n    print('-----------');\n    print(resultJson.config);\n  } catch (e) {\n    print(e);\n  }\n}\n```\n\n### shared_preferences本地存储\n\n- 简单的，异步的，持久化的key-value存储系统；\n- 在Android上它是基于SharedPreferences的；\n- 在iOS上它是基于NSUserDefaults的；\n\n```\nshared_preferences: ^0.5.3\n\nimport 'package:shared_preferences/shared_preferences.dart';\n\n设置 key值为counter，value为10\nSharedPreferences prefs = await SharedPreferences.getInstance();\nawait prefs.setInt('counter', 10);\n\n获取,假如获取不到counter为0\nint counter = prefs.getInt('counter')??0;\n\n删除\nprefs.remove('counter')\n```","source":"_posts/flutter-5-http.md","raw":"---\ntitle: Flutter学习之路 - 网络编程与数据存储技术\ndate: 2020-06-08 09:42:14\ntags: ['Flutter']\ncategories: Flutter\n---\n\n### 网络编程与数据存储技术\n\n<!-- more -->\n\n### 网络请求\n\n```\ndio: ^2.2.2\t\n\nimport 'package:cookie_jar/cookie_jar.dart';\nimport 'package:dio/dio.dart';\nimport 'package:fluttertoast/fluttertoast.dart';\n\nconst BASE_URL = 'xxx';\n\nclass HttpUtil {\n  static HttpUtil instance;\n  Dio dio;\n  BaseOptions options;\n\n  CancelToken cancelToken = CancelToken();\n\n  static HttpUtil getInstance() {\n    if (null == instance) instance = HttpUtil();\n    return instance;\n  }\n\n  /*\n   * config it and create\n   */\n  HttpUtil() {\n    //BaseOptions、Options、RequestOptions 都可以配置参数，优先级别依次递增，且可以根据优先级别覆盖参数\n    options = BaseOptions(\n      //请求基地址,可以包含子路径\n      baseUrl: BASE_URL,\n      //连接服务器超时时间，单位是毫秒.\n      connectTimeout: 10000,\n      //响应流上前后两次接受到数据的间隔，单位为毫秒。\n      receiveTimeout: 5000,\n      //Http请求头.\n      // headers: {\n      //   'Accept': 'application/json,*/*',\n      //   'Content-Type': 'application/json',\n      // },\n      //请求的Content-Type，默认值是\"application/json; charset=utf-8\",Headers.formUrlEncodedContentType会自动编码请求体.\n      // contentType: Headers.formUrlEncodedContentType,\n      //表示期望以那种格式(方式)接受响应数据。接受四种类型 `json`, `stream`, `plain`, `bytes`. 默认值是 `json`,\n      // contentType: Headers.formUrlEncodedContentType,\n      responseType: ResponseType.plain,\n    );\n\n    dio = Dio(options);\n\n    //Cookie管理\n    dio.interceptors.add(CookieManager(CookieJar()));\n\n    //添加拦截器\n    dio.interceptors\n        .add(InterceptorsWrapper(onRequest: (RequestOptions options) {\n      print(\"请求之前\");\n   \n      // Do something before request is sent\n      return options; //continue\n    }, onResponse: (Response response) {\n      print(\"响应之前\");\n      \n      // Do something with response data\n      return response; // continue\n    }, onError: (DioError e) {\n      print(\"错误之前\");\n      // Do something with response error\n      return e; //continue\n    }));\n  }\n\n  /*\n   * get请求\n   */\n  get(url, {data, options, cancelToken}) async {\n    Response response;\n    try {\n      response = await dio.get(url,\n          queryParameters: data, options: options, cancelToken: cancelToken);\n      print('get success---------${response.statusCode}');\n      print('get success---------${response.data}');\n\n//      response.data; 响应体\n//      response.headers; 响应头\n//      response.request; 请求体\n//      response.statusCode; 状态码\n\n    } on DioError catch (e) {\n      print('get error---------$e');\n      formatError(e);\n    }\n    return response;\n  }\n\n  /*\n   * post请求\n   */\n  post(url, {data, options, cancelToken}) async {\n    \n    Response response;\n    try {\n      response = await dio.post(url,\n          queryParameters: data, options: options, cancelToken: cancelToken);\n      print('post success---------${response.data}');\n    } on DioError catch (e) {\n      print('post error---------$e');\n      formatError(e);\n    }\n    return response;\n  }\n\n  /*\n   * 下载文件\n   */\n  downloadFile(urlPath, savePath) async {\n    Response response;\n    try {\n      response = await dio.download(urlPath, savePath,\n          onReceiveProgress: (int count, int total) {\n        //进度\n        print(\"$count $total\");\n      });\n      print('downloadFile success---------${response.data}');\n    } on DioError catch (e) {\n      print('downloadFile error---------$e');\n      formatError(e);\n    }\n    return response.data;\n  }\n\n  /*\n   * error统一处理\n   */\n  void formatError(DioError e) {\n    if (e.type == DioErrorType.CONNECT_TIMEOUT) {\n      // It occurs when url is opened timeout.\n      print(\"连接超时\");\n    } else if (e.type == DioErrorType.SEND_TIMEOUT) {\n      // It occurs when url is sent timeout.\n      print(\"请求超时\");\n    } else if (e.type == DioErrorType.RECEIVE_TIMEOUT) {\n      //It occurs when receiving timeout\n      print(\"响应超时\");\n    } else if (e.type == DioErrorType.RESPONSE) {\n      // When the server response, but with a incorrect status, such as 404, 503...\n      Fluttertoast.showToast(\n        msg: '网络异常',\n        toastLength: Toast.LENGTH_SHORT,\n        gravity: ToastGravity.CENTER,\n        timeInSecForIos: 1,         \n        fontSize: 16\n      );\n      print(\"网络异常\");\n    } else if (e.type == DioErrorType.CANCEL) {\n      // When the request is cancelled, dio will throw a error with this type.\n      print(\"请求取消\");\n    } else {\n      //DEFAULT Default error type, Some other Error. In this case, you can read the DioError.error if it is not null.\n      print(\"未知错误\");\n    }\n  }\n\n  /*\n   * 取消请求\n   *\n   * 同一个cancel token 可以用于多个请求，当一个cancel token取消时，所有使用该cancel token的请求都会被取消。\n   * 所以参数可选\n   */\n  void cancelRequests(CancelToken token) {\n    token.cancel(\"cancelled\");\n  }\n}\n```\n\n### Future\n\n#### 什么是Future\nFuture表示在接下来的某个时间的值或错误，借助Future我们可以在Flutter实现异步操作。\n\n> 它类似于ES6中的Promise，提供then和catchError的链式调用；\n\n```\nimport 'dart:async';\n\nFuture是dart:async包中的一个类，使用需要导入包，Future有两种状态\n\npending - 执行中\ncompleted - 执行结束，分两种情况要么成功要么失败\n```\n\n#### Future的then\n\n```\nFuture<String> testFuture() {\n  return Future.value('hello');\n}\n\n调用\ntestFuture().then((s) {\n  print(s);\n}, onError: (e) {\n  print(e);\n});\n\n```\n\n#### async await\n\n```\ntest() async {\n  int result = await Future.delayed(Duration(milliseconds: 2000),() {\n    return Future.value(1);\n  });\n\n  print('---$result');\n}\n```\n\n### JSON解析和序列化\n- 从服务端返回的json数据格式，Flutter需要对json格式的字符串转为Dart对象。\n\n#### 手动序列化数据，在模型中序列化JSON数据\n\n```\n{\n  \"id\":\"487349\",\n  \"name\":\"Pooja Bhaumik\",\n  \"score\" : 1000\n}\n\n//实现一个构造函数时使用 factory 关键字时\nclass Student{\n  String studentId;\n  String studentName;\n  int studentScores;\n\n  Student({\n    this.studentId,\n    this.studentName,\n    this.studentScores\n  });\n\n  //创建了一个叫做 Student.fromJson 的工厂方法，用来简单地反序列化你的 json\n  //Map<String, dynamic> 这意味着它将 String 键映射为 dynamic 值\n  //Map<String, dynamic> 因为键总是一个 string 并且值可以是任何类型，所以我们将它保持为 dynamic 以保证安全\n  factory Student.fromJson(Map<String, dynamic> parsedJson){\n    return Student(\n      studentId: parsedJson['id'],\n      studentName : parsedJson['name'],\n      studentScores : parsedJson ['score']\n    );\n  }\n}\n```\n\n```\n//使用\nFuture loadStudent() async {\n  String jsonString = await _loadAStudentAsset();\n  final jsonResponse = json.decode(jsonString); //解码我们得到的 json 字符串\n  //通过调用 Student.fromJson 方法反序列化解码的 json 响应，这样我们现在可以使用 Student 对象来访问我们的实体\n  Student student = new Student.fromJson(jsonResponse);\n  print(student.studentScores);\n}\n```\n#### 使用代码生成库序列化 JSON 数据\n\n> 使用Dio请求返回数据不是Json字符串，而是Json对象\n\n- 将responseType 设置为ResponseType.plain，默认使用json接收的。\n\n```\nresponseType: ResponseType.plain,\n```\n\n```\njson_annotation: ^2.0.0\nbuild_runner: ^1.0.0\njson_serializable: ^2.0.0\n```\n\n```\nimport 'package:json_annotation/json_annotation.dart';\n\n//生成 user.g.dart 文件\npart 'user.g.dart';\n\n//生成的JSON序列化逻辑\n@JsonSerializable(explicitToJson: true)\n\nclass User {\n  User(this.name, this.email);\n\n  String name;\n  String email;\n\n  //创建新的User实例的必要工厂构造函数，转Dart的对象\n  factory User.fromJson(Map<String, dynamic> json) => _$UserFromJson(json);\n\n  //转换为JSON\n  Map<String, dynamic> toJson() => _$UserToJson(this);\n}\n\n```\n- 每次修改模型文件，都要重新运行 - flutter packages pub run build_runner build\n\n```\n使用\n\ngetHttp() async { \n  try {\n      \n    var jsonString = await HttpUtil().get(\"/io/flutter_app/json/home_page.json\");\n\n    //jsonDecode() 方法来解码 JSON\n    Map userMap = jsonDecode(jsonString.data);\n\n    //在模型类中序列化 JSON 数据\n    var resultJson = HomeModel.fromJson(userMap); \n    print('-----------');\n    print(resultJson.config);\n  } catch (e) {\n    print(e);\n  }\n}\n```\n\n### shared_preferences本地存储\n\n- 简单的，异步的，持久化的key-value存储系统；\n- 在Android上它是基于SharedPreferences的；\n- 在iOS上它是基于NSUserDefaults的；\n\n```\nshared_preferences: ^0.5.3\n\nimport 'package:shared_preferences/shared_preferences.dart';\n\n设置 key值为counter，value为10\nSharedPreferences prefs = await SharedPreferences.getInstance();\nawait prefs.setInt('counter', 10);\n\n获取,假如获取不到counter为0\nint counter = prefs.getInt('counter')??0;\n\n删除\nprefs.remove('counter')\n```","slug":"flutter-5-http","published":1,"updated":"2020-06-08T01:44:35.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq42b001yhe6jr8b8wm8k","content":"<h3 id=\"网络编程与数据存储技术\"><a href=\"#网络编程与数据存储技术\" class=\"headerlink\" title=\"网络编程与数据存储技术\"></a>网络编程与数据存储技术</h3><a id=\"more\"></a>\n<h3 id=\"网络请求\"><a href=\"#网络请求\" class=\"headerlink\" title=\"网络请求\"></a>网络请求</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dio: ^2.2.2\t</span><br><span class=\"line\"></span><br><span class=\"line\">import &apos;package:cookie_jar/cookie_jar.dart&apos;;</span><br><span class=\"line\">import &apos;package:dio/dio.dart&apos;;</span><br><span class=\"line\">import &apos;package:fluttertoast/fluttertoast.dart&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">const BASE_URL = &apos;xxx&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class HttpUtil &#123;</span><br><span class=\"line\">  static HttpUtil instance;</span><br><span class=\"line\">  Dio dio;</span><br><span class=\"line\">  BaseOptions options;</span><br><span class=\"line\"></span><br><span class=\"line\">  CancelToken cancelToken = CancelToken();</span><br><span class=\"line\"></span><br><span class=\"line\">  static HttpUtil getInstance() &#123;</span><br><span class=\"line\">    if (null == instance) instance = HttpUtil();</span><br><span class=\"line\">    return instance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /*</span><br><span class=\"line\">   * config it and create</span><br><span class=\"line\">   */</span><br><span class=\"line\">  HttpUtil() &#123;</span><br><span class=\"line\">    //BaseOptions、Options、RequestOptions 都可以配置参数，优先级别依次递增，且可以根据优先级别覆盖参数</span><br><span class=\"line\">    options = BaseOptions(</span><br><span class=\"line\">      //请求基地址,可以包含子路径</span><br><span class=\"line\">      baseUrl: BASE_URL,</span><br><span class=\"line\">      //连接服务器超时时间，单位是毫秒.</span><br><span class=\"line\">      connectTimeout: 10000,</span><br><span class=\"line\">      //响应流上前后两次接受到数据的间隔，单位为毫秒。</span><br><span class=\"line\">      receiveTimeout: 5000,</span><br><span class=\"line\">      //Http请求头.</span><br><span class=\"line\">      // headers: &#123;</span><br><span class=\"line\">      //   &apos;Accept&apos;: &apos;application/json,*/*&apos;,</span><br><span class=\"line\">      //   &apos;Content-Type&apos;: &apos;application/json&apos;,</span><br><span class=\"line\">      // &#125;,</span><br><span class=\"line\">      //请求的Content-Type，默认值是&quot;application/json; charset=utf-8&quot;,Headers.formUrlEncodedContentType会自动编码请求体.</span><br><span class=\"line\">      // contentType: Headers.formUrlEncodedContentType,</span><br><span class=\"line\">      //表示期望以那种格式(方式)接受响应数据。接受四种类型 `json`, `stream`, `plain`, `bytes`. 默认值是 `json`,</span><br><span class=\"line\">      // contentType: Headers.formUrlEncodedContentType,</span><br><span class=\"line\">      responseType: ResponseType.plain,</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    dio = Dio(options);</span><br><span class=\"line\"></span><br><span class=\"line\">    //Cookie管理</span><br><span class=\"line\">    dio.interceptors.add(CookieManager(CookieJar()));</span><br><span class=\"line\"></span><br><span class=\"line\">    //添加拦截器</span><br><span class=\"line\">    dio.interceptors</span><br><span class=\"line\">        .add(InterceptorsWrapper(onRequest: (RequestOptions options) &#123;</span><br><span class=\"line\">      print(&quot;请求之前&quot;);</span><br><span class=\"line\">   </span><br><span class=\"line\">      // Do something before request is sent</span><br><span class=\"line\">      return options; //continue</span><br><span class=\"line\">    &#125;, onResponse: (Response response) &#123;</span><br><span class=\"line\">      print(&quot;响应之前&quot;);</span><br><span class=\"line\">      </span><br><span class=\"line\">      // Do something with response data</span><br><span class=\"line\">      return response; // continue</span><br><span class=\"line\">    &#125;, onError: (DioError e) &#123;</span><br><span class=\"line\">      print(&quot;错误之前&quot;);</span><br><span class=\"line\">      // Do something with response error</span><br><span class=\"line\">      return e; //continue</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /*</span><br><span class=\"line\">   * get请求</span><br><span class=\"line\">   */</span><br><span class=\"line\">  get(url, &#123;data, options, cancelToken&#125;) async &#123;</span><br><span class=\"line\">    Response response;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      response = await dio.get(url,</span><br><span class=\"line\">          queryParameters: data, options: options, cancelToken: cancelToken);</span><br><span class=\"line\">      print(&apos;get success---------$&#123;response.statusCode&#125;&apos;);</span><br><span class=\"line\">      print(&apos;get success---------$&#123;response.data&#125;&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//      response.data; 响应体</span><br><span class=\"line\">//      response.headers; 响应头</span><br><span class=\"line\">//      response.request; 请求体</span><br><span class=\"line\">//      response.statusCode; 状态码</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; on DioError catch (e) &#123;</span><br><span class=\"line\">      print(&apos;get error---------$e&apos;);</span><br><span class=\"line\">      formatError(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return response;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /*</span><br><span class=\"line\">   * post请求</span><br><span class=\"line\">   */</span><br><span class=\"line\">  post(url, &#123;data, options, cancelToken&#125;) async &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Response response;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      response = await dio.post(url,</span><br><span class=\"line\">          queryParameters: data, options: options, cancelToken: cancelToken);</span><br><span class=\"line\">      print(&apos;post success---------$&#123;response.data&#125;&apos;);</span><br><span class=\"line\">    &#125; on DioError catch (e) &#123;</span><br><span class=\"line\">      print(&apos;post error---------$e&apos;);</span><br><span class=\"line\">      formatError(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return response;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /*</span><br><span class=\"line\">   * 下载文件</span><br><span class=\"line\">   */</span><br><span class=\"line\">  downloadFile(urlPath, savePath) async &#123;</span><br><span class=\"line\">    Response response;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      response = await dio.download(urlPath, savePath,</span><br><span class=\"line\">          onReceiveProgress: (int count, int total) &#123;</span><br><span class=\"line\">        //进度</span><br><span class=\"line\">        print(&quot;$count $total&quot;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      print(&apos;downloadFile success---------$&#123;response.data&#125;&apos;);</span><br><span class=\"line\">    &#125; on DioError catch (e) &#123;</span><br><span class=\"line\">      print(&apos;downloadFile error---------$e&apos;);</span><br><span class=\"line\">      formatError(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return response.data;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /*</span><br><span class=\"line\">   * error统一处理</span><br><span class=\"line\">   */</span><br><span class=\"line\">  void formatError(DioError e) &#123;</span><br><span class=\"line\">    if (e.type == DioErrorType.CONNECT_TIMEOUT) &#123;</span><br><span class=\"line\">      // It occurs when url is opened timeout.</span><br><span class=\"line\">      print(&quot;连接超时&quot;);</span><br><span class=\"line\">    &#125; else if (e.type == DioErrorType.SEND_TIMEOUT) &#123;</span><br><span class=\"line\">      // It occurs when url is sent timeout.</span><br><span class=\"line\">      print(&quot;请求超时&quot;);</span><br><span class=\"line\">    &#125; else if (e.type == DioErrorType.RECEIVE_TIMEOUT) &#123;</span><br><span class=\"line\">      //It occurs when receiving timeout</span><br><span class=\"line\">      print(&quot;响应超时&quot;);</span><br><span class=\"line\">    &#125; else if (e.type == DioErrorType.RESPONSE) &#123;</span><br><span class=\"line\">      // When the server response, but with a incorrect status, such as 404, 503...</span><br><span class=\"line\">      Fluttertoast.showToast(</span><br><span class=\"line\">        msg: &apos;网络异常&apos;,</span><br><span class=\"line\">        toastLength: Toast.LENGTH_SHORT,</span><br><span class=\"line\">        gravity: ToastGravity.CENTER,</span><br><span class=\"line\">        timeInSecForIos: 1,         </span><br><span class=\"line\">        fontSize: 16</span><br><span class=\"line\">      );</span><br><span class=\"line\">      print(&quot;网络异常&quot;);</span><br><span class=\"line\">    &#125; else if (e.type == DioErrorType.CANCEL) &#123;</span><br><span class=\"line\">      // When the request is cancelled, dio will throw a error with this type.</span><br><span class=\"line\">      print(&quot;请求取消&quot;);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      //DEFAULT Default error type, Some other Error. In this case, you can read the DioError.error if it is not null.</span><br><span class=\"line\">      print(&quot;未知错误&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /*</span><br><span class=\"line\">   * 取消请求</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * 同一个cancel token 可以用于多个请求，当一个cancel token取消时，所有使用该cancel token的请求都会被取消。</span><br><span class=\"line\">   * 所以参数可选</span><br><span class=\"line\">   */</span><br><span class=\"line\">  void cancelRequests(CancelToken token) &#123;</span><br><span class=\"line\">    token.cancel(&quot;cancelled&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Future\"><a href=\"#Future\" class=\"headerlink\" title=\"Future\"></a>Future</h3><h4 id=\"什么是Future\"><a href=\"#什么是Future\" class=\"headerlink\" title=\"什么是Future\"></a>什么是Future</h4><p>Future表示在接下来的某个时间的值或错误，借助Future我们可以在Flutter实现异步操作。</p>\n<blockquote>\n<p>它类似于ES6中的Promise，提供then和catchError的链式调用；</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;dart:async&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">Future是dart:async包中的一个类，使用需要导入包，Future有两种状态</span><br><span class=\"line\"></span><br><span class=\"line\">pending - 执行中</span><br><span class=\"line\">completed - 执行结束，分两种情况要么成功要么失败</span><br></pre></td></tr></table></figure>\n<h4 id=\"Future的then\"><a href=\"#Future的then\" class=\"headerlink\" title=\"Future的then\"></a>Future的then</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Future&lt;String&gt; testFuture() &#123;</span><br><span class=\"line\">  return Future.value(&apos;hello&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">调用</span><br><span class=\"line\">testFuture().then((s) &#123;</span><br><span class=\"line\">  print(s);</span><br><span class=\"line\">&#125;, onError: (e) &#123;</span><br><span class=\"line\">  print(e);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async await\"></a>async await</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test() async &#123;</span><br><span class=\"line\">  int result = await Future.delayed(Duration(milliseconds: 2000),() &#123;</span><br><span class=\"line\">    return Future.value(1);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  print(&apos;---$result&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"JSON解析和序列化\"><a href=\"#JSON解析和序列化\" class=\"headerlink\" title=\"JSON解析和序列化\"></a>JSON解析和序列化</h3><ul>\n<li>从服务端返回的json数据格式，Flutter需要对json格式的字符串转为Dart对象。</li>\n</ul>\n<h4 id=\"手动序列化数据，在模型中序列化JSON数据\"><a href=\"#手动序列化数据，在模型中序列化JSON数据\" class=\"headerlink\" title=\"手动序列化数据，在模型中序列化JSON数据\"></a>手动序列化数据，在模型中序列化JSON数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;id&quot;:&quot;487349&quot;,</span><br><span class=\"line\">  &quot;name&quot;:&quot;Pooja Bhaumik&quot;,</span><br><span class=\"line\">  &quot;score&quot; : 1000</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//实现一个构造函数时使用 factory 关键字时</span><br><span class=\"line\">class Student&#123;</span><br><span class=\"line\">  String studentId;</span><br><span class=\"line\">  String studentName;</span><br><span class=\"line\">  int studentScores;</span><br><span class=\"line\"></span><br><span class=\"line\">  Student(&#123;</span><br><span class=\"line\">    this.studentId,</span><br><span class=\"line\">    this.studentName,</span><br><span class=\"line\">    this.studentScores</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  //创建了一个叫做 Student.fromJson 的工厂方法，用来简单地反序列化你的 json</span><br><span class=\"line\">  //Map&lt;String, dynamic&gt; 这意味着它将 String 键映射为 dynamic 值</span><br><span class=\"line\">  //Map&lt;String, dynamic&gt; 因为键总是一个 string 并且值可以是任何类型，所以我们将它保持为 dynamic 以保证安全</span><br><span class=\"line\">  factory Student.fromJson(Map&lt;String, dynamic&gt; parsedJson)&#123;</span><br><span class=\"line\">    return Student(</span><br><span class=\"line\">      studentId: parsedJson[&apos;id&apos;],</span><br><span class=\"line\">      studentName : parsedJson[&apos;name&apos;],</span><br><span class=\"line\">      studentScores : parsedJson [&apos;score&apos;]</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用</span><br><span class=\"line\">Future loadStudent() async &#123;</span><br><span class=\"line\">  String jsonString = await _loadAStudentAsset();</span><br><span class=\"line\">  final jsonResponse = json.decode(jsonString); //解码我们得到的 json 字符串</span><br><span class=\"line\">  //通过调用 Student.fromJson 方法反序列化解码的 json 响应，这样我们现在可以使用 Student 对象来访问我们的实体</span><br><span class=\"line\">  Student student = new Student.fromJson(jsonResponse);</span><br><span class=\"line\">  print(student.studentScores);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用代码生成库序列化-JSON-数据\"><a href=\"#使用代码生成库序列化-JSON-数据\" class=\"headerlink\" title=\"使用代码生成库序列化 JSON 数据\"></a>使用代码生成库序列化 JSON 数据</h4><blockquote>\n<p>使用Dio请求返回数据不是Json字符串，而是Json对象</p>\n</blockquote>\n<ul>\n<li>将responseType 设置为ResponseType.plain，默认使用json接收的。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">responseType: ResponseType.plain,</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">json_annotation: ^2.0.0</span><br><span class=\"line\">build_runner: ^1.0.0</span><br><span class=\"line\">json_serializable: ^2.0.0</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;package:json_annotation/json_annotation.dart&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">//生成 user.g.dart 文件</span><br><span class=\"line\">part &apos;user.g.dart&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">//生成的JSON序列化逻辑</span><br><span class=\"line\">@JsonSerializable(explicitToJson: true)</span><br><span class=\"line\"></span><br><span class=\"line\">class User &#123;</span><br><span class=\"line\">  User(this.name, this.email);</span><br><span class=\"line\"></span><br><span class=\"line\">  String name;</span><br><span class=\"line\">  String email;</span><br><span class=\"line\"></span><br><span class=\"line\">  //创建新的User实例的必要工厂构造函数，转Dart的对象</span><br><span class=\"line\">  factory User.fromJson(Map&lt;String, dynamic&gt; json) =&gt; _$UserFromJson(json);</span><br><span class=\"line\"></span><br><span class=\"line\">  //转换为JSON</span><br><span class=\"line\">  Map&lt;String, dynamic&gt; toJson() =&gt; _$UserToJson(this);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>每次修改模型文件，都要重新运行 - flutter packages pub run build_runner build</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用</span><br><span class=\"line\"></span><br><span class=\"line\">getHttp() async &#123; </span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">    var jsonString = await HttpUtil().get(&quot;/io/flutter_app/json/home_page.json&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    //jsonDecode() 方法来解码 JSON</span><br><span class=\"line\">    Map userMap = jsonDecode(jsonString.data);</span><br><span class=\"line\"></span><br><span class=\"line\">    //在模型类中序列化 JSON 数据</span><br><span class=\"line\">    var resultJson = HomeModel.fromJson(userMap); </span><br><span class=\"line\">    print(&apos;-----------&apos;);</span><br><span class=\"line\">    print(resultJson.config);</span><br><span class=\"line\">  &#125; catch (e) &#123;</span><br><span class=\"line\">    print(e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"shared-preferences本地存储\"><a href=\"#shared-preferences本地存储\" class=\"headerlink\" title=\"shared_preferences本地存储\"></a>shared_preferences本地存储</h3><ul>\n<li>简单的，异步的，持久化的key-value存储系统；</li>\n<li>在Android上它是基于SharedPreferences的；</li>\n<li>在iOS上它是基于NSUserDefaults的；</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shared_preferences: ^0.5.3</span><br><span class=\"line\"></span><br><span class=\"line\">import &apos;package:shared_preferences/shared_preferences.dart&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">设置 key值为counter，value为10</span><br><span class=\"line\">SharedPreferences prefs = await SharedPreferences.getInstance();</span><br><span class=\"line\">await prefs.setInt(&apos;counter&apos;, 10);</span><br><span class=\"line\"></span><br><span class=\"line\">获取,假如获取不到counter为0</span><br><span class=\"line\">int counter = prefs.getInt(&apos;counter&apos;)??0;</span><br><span class=\"line\"></span><br><span class=\"line\">删除</span><br><span class=\"line\">prefs.remove(&apos;counter&apos;)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"网络编程与数据存储技术\"><a href=\"#网络编程与数据存储技术\" class=\"headerlink\" title=\"网络编程与数据存储技术\"></a>网络编程与数据存储技术</h3>","more":"<h3 id=\"网络请求\"><a href=\"#网络请求\" class=\"headerlink\" title=\"网络请求\"></a>网络请求</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dio: ^2.2.2\t</span><br><span class=\"line\"></span><br><span class=\"line\">import &apos;package:cookie_jar/cookie_jar.dart&apos;;</span><br><span class=\"line\">import &apos;package:dio/dio.dart&apos;;</span><br><span class=\"line\">import &apos;package:fluttertoast/fluttertoast.dart&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">const BASE_URL = &apos;xxx&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class HttpUtil &#123;</span><br><span class=\"line\">  static HttpUtil instance;</span><br><span class=\"line\">  Dio dio;</span><br><span class=\"line\">  BaseOptions options;</span><br><span class=\"line\"></span><br><span class=\"line\">  CancelToken cancelToken = CancelToken();</span><br><span class=\"line\"></span><br><span class=\"line\">  static HttpUtil getInstance() &#123;</span><br><span class=\"line\">    if (null == instance) instance = HttpUtil();</span><br><span class=\"line\">    return instance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /*</span><br><span class=\"line\">   * config it and create</span><br><span class=\"line\">   */</span><br><span class=\"line\">  HttpUtil() &#123;</span><br><span class=\"line\">    //BaseOptions、Options、RequestOptions 都可以配置参数，优先级别依次递增，且可以根据优先级别覆盖参数</span><br><span class=\"line\">    options = BaseOptions(</span><br><span class=\"line\">      //请求基地址,可以包含子路径</span><br><span class=\"line\">      baseUrl: BASE_URL,</span><br><span class=\"line\">      //连接服务器超时时间，单位是毫秒.</span><br><span class=\"line\">      connectTimeout: 10000,</span><br><span class=\"line\">      //响应流上前后两次接受到数据的间隔，单位为毫秒。</span><br><span class=\"line\">      receiveTimeout: 5000,</span><br><span class=\"line\">      //Http请求头.</span><br><span class=\"line\">      // headers: &#123;</span><br><span class=\"line\">      //   &apos;Accept&apos;: &apos;application/json,*/*&apos;,</span><br><span class=\"line\">      //   &apos;Content-Type&apos;: &apos;application/json&apos;,</span><br><span class=\"line\">      // &#125;,</span><br><span class=\"line\">      //请求的Content-Type，默认值是&quot;application/json; charset=utf-8&quot;,Headers.formUrlEncodedContentType会自动编码请求体.</span><br><span class=\"line\">      // contentType: Headers.formUrlEncodedContentType,</span><br><span class=\"line\">      //表示期望以那种格式(方式)接受响应数据。接受四种类型 `json`, `stream`, `plain`, `bytes`. 默认值是 `json`,</span><br><span class=\"line\">      // contentType: Headers.formUrlEncodedContentType,</span><br><span class=\"line\">      responseType: ResponseType.plain,</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    dio = Dio(options);</span><br><span class=\"line\"></span><br><span class=\"line\">    //Cookie管理</span><br><span class=\"line\">    dio.interceptors.add(CookieManager(CookieJar()));</span><br><span class=\"line\"></span><br><span class=\"line\">    //添加拦截器</span><br><span class=\"line\">    dio.interceptors</span><br><span class=\"line\">        .add(InterceptorsWrapper(onRequest: (RequestOptions options) &#123;</span><br><span class=\"line\">      print(&quot;请求之前&quot;);</span><br><span class=\"line\">   </span><br><span class=\"line\">      // Do something before request is sent</span><br><span class=\"line\">      return options; //continue</span><br><span class=\"line\">    &#125;, onResponse: (Response response) &#123;</span><br><span class=\"line\">      print(&quot;响应之前&quot;);</span><br><span class=\"line\">      </span><br><span class=\"line\">      // Do something with response data</span><br><span class=\"line\">      return response; // continue</span><br><span class=\"line\">    &#125;, onError: (DioError e) &#123;</span><br><span class=\"line\">      print(&quot;错误之前&quot;);</span><br><span class=\"line\">      // Do something with response error</span><br><span class=\"line\">      return e; //continue</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /*</span><br><span class=\"line\">   * get请求</span><br><span class=\"line\">   */</span><br><span class=\"line\">  get(url, &#123;data, options, cancelToken&#125;) async &#123;</span><br><span class=\"line\">    Response response;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      response = await dio.get(url,</span><br><span class=\"line\">          queryParameters: data, options: options, cancelToken: cancelToken);</span><br><span class=\"line\">      print(&apos;get success---------$&#123;response.statusCode&#125;&apos;);</span><br><span class=\"line\">      print(&apos;get success---------$&#123;response.data&#125;&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//      response.data; 响应体</span><br><span class=\"line\">//      response.headers; 响应头</span><br><span class=\"line\">//      response.request; 请求体</span><br><span class=\"line\">//      response.statusCode; 状态码</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; on DioError catch (e) &#123;</span><br><span class=\"line\">      print(&apos;get error---------$e&apos;);</span><br><span class=\"line\">      formatError(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return response;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /*</span><br><span class=\"line\">   * post请求</span><br><span class=\"line\">   */</span><br><span class=\"line\">  post(url, &#123;data, options, cancelToken&#125;) async &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Response response;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      response = await dio.post(url,</span><br><span class=\"line\">          queryParameters: data, options: options, cancelToken: cancelToken);</span><br><span class=\"line\">      print(&apos;post success---------$&#123;response.data&#125;&apos;);</span><br><span class=\"line\">    &#125; on DioError catch (e) &#123;</span><br><span class=\"line\">      print(&apos;post error---------$e&apos;);</span><br><span class=\"line\">      formatError(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return response;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /*</span><br><span class=\"line\">   * 下载文件</span><br><span class=\"line\">   */</span><br><span class=\"line\">  downloadFile(urlPath, savePath) async &#123;</span><br><span class=\"line\">    Response response;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      response = await dio.download(urlPath, savePath,</span><br><span class=\"line\">          onReceiveProgress: (int count, int total) &#123;</span><br><span class=\"line\">        //进度</span><br><span class=\"line\">        print(&quot;$count $total&quot;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      print(&apos;downloadFile success---------$&#123;response.data&#125;&apos;);</span><br><span class=\"line\">    &#125; on DioError catch (e) &#123;</span><br><span class=\"line\">      print(&apos;downloadFile error---------$e&apos;);</span><br><span class=\"line\">      formatError(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return response.data;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /*</span><br><span class=\"line\">   * error统一处理</span><br><span class=\"line\">   */</span><br><span class=\"line\">  void formatError(DioError e) &#123;</span><br><span class=\"line\">    if (e.type == DioErrorType.CONNECT_TIMEOUT) &#123;</span><br><span class=\"line\">      // It occurs when url is opened timeout.</span><br><span class=\"line\">      print(&quot;连接超时&quot;);</span><br><span class=\"line\">    &#125; else if (e.type == DioErrorType.SEND_TIMEOUT) &#123;</span><br><span class=\"line\">      // It occurs when url is sent timeout.</span><br><span class=\"line\">      print(&quot;请求超时&quot;);</span><br><span class=\"line\">    &#125; else if (e.type == DioErrorType.RECEIVE_TIMEOUT) &#123;</span><br><span class=\"line\">      //It occurs when receiving timeout</span><br><span class=\"line\">      print(&quot;响应超时&quot;);</span><br><span class=\"line\">    &#125; else if (e.type == DioErrorType.RESPONSE) &#123;</span><br><span class=\"line\">      // When the server response, but with a incorrect status, such as 404, 503...</span><br><span class=\"line\">      Fluttertoast.showToast(</span><br><span class=\"line\">        msg: &apos;网络异常&apos;,</span><br><span class=\"line\">        toastLength: Toast.LENGTH_SHORT,</span><br><span class=\"line\">        gravity: ToastGravity.CENTER,</span><br><span class=\"line\">        timeInSecForIos: 1,         </span><br><span class=\"line\">        fontSize: 16</span><br><span class=\"line\">      );</span><br><span class=\"line\">      print(&quot;网络异常&quot;);</span><br><span class=\"line\">    &#125; else if (e.type == DioErrorType.CANCEL) &#123;</span><br><span class=\"line\">      // When the request is cancelled, dio will throw a error with this type.</span><br><span class=\"line\">      print(&quot;请求取消&quot;);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      //DEFAULT Default error type, Some other Error. In this case, you can read the DioError.error if it is not null.</span><br><span class=\"line\">      print(&quot;未知错误&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  /*</span><br><span class=\"line\">   * 取消请求</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * 同一个cancel token 可以用于多个请求，当一个cancel token取消时，所有使用该cancel token的请求都会被取消。</span><br><span class=\"line\">   * 所以参数可选</span><br><span class=\"line\">   */</span><br><span class=\"line\">  void cancelRequests(CancelToken token) &#123;</span><br><span class=\"line\">    token.cancel(&quot;cancelled&quot;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Future\"><a href=\"#Future\" class=\"headerlink\" title=\"Future\"></a>Future</h3><h4 id=\"什么是Future\"><a href=\"#什么是Future\" class=\"headerlink\" title=\"什么是Future\"></a>什么是Future</h4><p>Future表示在接下来的某个时间的值或错误，借助Future我们可以在Flutter实现异步操作。</p>\n<blockquote>\n<p>它类似于ES6中的Promise，提供then和catchError的链式调用；</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;dart:async&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">Future是dart:async包中的一个类，使用需要导入包，Future有两种状态</span><br><span class=\"line\"></span><br><span class=\"line\">pending - 执行中</span><br><span class=\"line\">completed - 执行结束，分两种情况要么成功要么失败</span><br></pre></td></tr></table></figure>\n<h4 id=\"Future的then\"><a href=\"#Future的then\" class=\"headerlink\" title=\"Future的then\"></a>Future的then</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Future&lt;String&gt; testFuture() &#123;</span><br><span class=\"line\">  return Future.value(&apos;hello&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">调用</span><br><span class=\"line\">testFuture().then((s) &#123;</span><br><span class=\"line\">  print(s);</span><br><span class=\"line\">&#125;, onError: (e) &#123;</span><br><span class=\"line\">  print(e);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async await\"></a>async await</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test() async &#123;</span><br><span class=\"line\">  int result = await Future.delayed(Duration(milliseconds: 2000),() &#123;</span><br><span class=\"line\">    return Future.value(1);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  print(&apos;---$result&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"JSON解析和序列化\"><a href=\"#JSON解析和序列化\" class=\"headerlink\" title=\"JSON解析和序列化\"></a>JSON解析和序列化</h3><ul>\n<li>从服务端返回的json数据格式，Flutter需要对json格式的字符串转为Dart对象。</li>\n</ul>\n<h4 id=\"手动序列化数据，在模型中序列化JSON数据\"><a href=\"#手动序列化数据，在模型中序列化JSON数据\" class=\"headerlink\" title=\"手动序列化数据，在模型中序列化JSON数据\"></a>手动序列化数据，在模型中序列化JSON数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;id&quot;:&quot;487349&quot;,</span><br><span class=\"line\">  &quot;name&quot;:&quot;Pooja Bhaumik&quot;,</span><br><span class=\"line\">  &quot;score&quot; : 1000</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//实现一个构造函数时使用 factory 关键字时</span><br><span class=\"line\">class Student&#123;</span><br><span class=\"line\">  String studentId;</span><br><span class=\"line\">  String studentName;</span><br><span class=\"line\">  int studentScores;</span><br><span class=\"line\"></span><br><span class=\"line\">  Student(&#123;</span><br><span class=\"line\">    this.studentId,</span><br><span class=\"line\">    this.studentName,</span><br><span class=\"line\">    this.studentScores</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  //创建了一个叫做 Student.fromJson 的工厂方法，用来简单地反序列化你的 json</span><br><span class=\"line\">  //Map&lt;String, dynamic&gt; 这意味着它将 String 键映射为 dynamic 值</span><br><span class=\"line\">  //Map&lt;String, dynamic&gt; 因为键总是一个 string 并且值可以是任何类型，所以我们将它保持为 dynamic 以保证安全</span><br><span class=\"line\">  factory Student.fromJson(Map&lt;String, dynamic&gt; parsedJson)&#123;</span><br><span class=\"line\">    return Student(</span><br><span class=\"line\">      studentId: parsedJson[&apos;id&apos;],</span><br><span class=\"line\">      studentName : parsedJson[&apos;name&apos;],</span><br><span class=\"line\">      studentScores : parsedJson [&apos;score&apos;]</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用</span><br><span class=\"line\">Future loadStudent() async &#123;</span><br><span class=\"line\">  String jsonString = await _loadAStudentAsset();</span><br><span class=\"line\">  final jsonResponse = json.decode(jsonString); //解码我们得到的 json 字符串</span><br><span class=\"line\">  //通过调用 Student.fromJson 方法反序列化解码的 json 响应，这样我们现在可以使用 Student 对象来访问我们的实体</span><br><span class=\"line\">  Student student = new Student.fromJson(jsonResponse);</span><br><span class=\"line\">  print(student.studentScores);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用代码生成库序列化-JSON-数据\"><a href=\"#使用代码生成库序列化-JSON-数据\" class=\"headerlink\" title=\"使用代码生成库序列化 JSON 数据\"></a>使用代码生成库序列化 JSON 数据</h4><blockquote>\n<p>使用Dio请求返回数据不是Json字符串，而是Json对象</p>\n</blockquote>\n<ul>\n<li>将responseType 设置为ResponseType.plain，默认使用json接收的。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">responseType: ResponseType.plain,</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">json_annotation: ^2.0.0</span><br><span class=\"line\">build_runner: ^1.0.0</span><br><span class=\"line\">json_serializable: ^2.0.0</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;package:json_annotation/json_annotation.dart&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">//生成 user.g.dart 文件</span><br><span class=\"line\">part &apos;user.g.dart&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">//生成的JSON序列化逻辑</span><br><span class=\"line\">@JsonSerializable(explicitToJson: true)</span><br><span class=\"line\"></span><br><span class=\"line\">class User &#123;</span><br><span class=\"line\">  User(this.name, this.email);</span><br><span class=\"line\"></span><br><span class=\"line\">  String name;</span><br><span class=\"line\">  String email;</span><br><span class=\"line\"></span><br><span class=\"line\">  //创建新的User实例的必要工厂构造函数，转Dart的对象</span><br><span class=\"line\">  factory User.fromJson(Map&lt;String, dynamic&gt; json) =&gt; _$UserFromJson(json);</span><br><span class=\"line\"></span><br><span class=\"line\">  //转换为JSON</span><br><span class=\"line\">  Map&lt;String, dynamic&gt; toJson() =&gt; _$UserToJson(this);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>每次修改模型文件，都要重新运行 - flutter packages pub run build_runner build</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用</span><br><span class=\"line\"></span><br><span class=\"line\">getHttp() async &#123; </span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">    var jsonString = await HttpUtil().get(&quot;/io/flutter_app/json/home_page.json&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    //jsonDecode() 方法来解码 JSON</span><br><span class=\"line\">    Map userMap = jsonDecode(jsonString.data);</span><br><span class=\"line\"></span><br><span class=\"line\">    //在模型类中序列化 JSON 数据</span><br><span class=\"line\">    var resultJson = HomeModel.fromJson(userMap); </span><br><span class=\"line\">    print(&apos;-----------&apos;);</span><br><span class=\"line\">    print(resultJson.config);</span><br><span class=\"line\">  &#125; catch (e) &#123;</span><br><span class=\"line\">    print(e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"shared-preferences本地存储\"><a href=\"#shared-preferences本地存储\" class=\"headerlink\" title=\"shared_preferences本地存储\"></a>shared_preferences本地存储</h3><ul>\n<li>简单的，异步的，持久化的key-value存储系统；</li>\n<li>在Android上它是基于SharedPreferences的；</li>\n<li>在iOS上它是基于NSUserDefaults的；</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shared_preferences: ^0.5.3</span><br><span class=\"line\"></span><br><span class=\"line\">import &apos;package:shared_preferences/shared_preferences.dart&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">设置 key值为counter，value为10</span><br><span class=\"line\">SharedPreferences prefs = await SharedPreferences.getInstance();</span><br><span class=\"line\">await prefs.setInt(&apos;counter&apos;, 10);</span><br><span class=\"line\"></span><br><span class=\"line\">获取,假如获取不到counter为0</span><br><span class=\"line\">int counter = prefs.getInt(&apos;counter&apos;)??0;</span><br><span class=\"line\"></span><br><span class=\"line\">删除</span><br><span class=\"line\">prefs.remove(&apos;counter&apos;)</span><br></pre></td></tr></table></figure>"},{"title":"Flutter学习之路 - 混合开发","date":"2020-08-11T09:16:19.000Z","_content":"\n### 混合开发\n\n<!-- more -->\n\n### Flutter 集成步骤\n\n- 创建 Flutter module\n\n```\nflutter create -t module flutter_module\n```\n\n- 添加 Flutter module 依赖\n- 在 Java/Object-c 中调用 Flutter module\n\n### Android\n\n#### 引入 Flutter module\n\n1. 打开 settings.gradle(Project Settings)\n\n```\n自动会关联到一个Flutter的模块\nsetBinding(new Binding([gradle: this]))                                 // new\nevaluate(new File(                                                      // new\n    settingsDir.parentFile,                                                // new\n    'flutter_module/.android/include_flutter.groovy'// new\n))\n\n'flutter_module/.android/include_flutter.groovy'\nflutter_module的Flutter项目和android项目在同一文件夹下\n```\n\n2. 打开 build.gradle(Module:app)\n\n```\nminSdkVersion 16才支持Fluuter module\ndefaultConfig{\n  minSdkVersion 16\n}\n```\n\n```\nandroid最下面加入以下代码，进行编译\nandroid {\n  ...\n  compileOptions {\n    sourceCompatibility JavaVersion.VERSION_1_8\n    targetCompatibility JavaVersion.VERSION_1_8\n  }\n}\n```\n\n```\ndependencies {\n  ...\n  implementation project(':flutter')\n}\n```\n\n3. 问题：如果出现“程序包 android.support.annotation 不存在”的错误，需要使用如下的命令来创建 Flutter 模块，因为最新版本的 Android 默认使用 androidx 来管理包。\n\n```\nflutter create --androidx -t module flutter_library\n\n如果这个命令无法找到，升级SDK\n```\n\n#### Java 调用 Flutter module\n\n- Flutter.createView\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    View flutterView = Flutter.createView(this, getLifecycle(), \"route1\");\n    FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\n    addContentView(flutterView, layoutParams);\n  }\n}\n```\n\n- FlutterFragment\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    FragmentTransaction ft= getSupportFragmentManager().beginTransaction();\n    ft.replace(R.id.fragment_container, Flutter.createFragment(\"Hello Flutter\"));\n    ft.commit();\n  }\n}\n```\n\n#### Flutter 接受参数\n\n```\nimport 'dart:ui';\n\nvoid main => runApp(MyApp(initParams: window.defaultRouteName))\n\nclass MyApp extends StatelessWidget {\n  //接受initParams参数\n  final String initParams\n\n  const MyApp({Key key, this.initParams}) : super(key:key);\n}\n\n```\n\n### iOS\n\n#### iOS 集成 Flutter\n\n- 在 ios 项目下 pod init\n\n```\nPodfile\n\n# Uncomment the next line to define a global platform for your project\n# platform :ios, '9.0'\ntarget 'FlutterHybridiOS' do\n  # Uncomment the next line if you're using Swift or would like to use dynamic frameworks\n  # use_frameworks!\n\n  # Pods for FlutterHybridiOS\n\n  //flutter项目的路径\n  flutter_application_path = '../flutter_module/'\n\n  eval(File.read(File.join(flutter_application_path,'.ios', 'Flutter', 'podhelper.rb')),binding)\n\n  target 'FlutterHybridiOSTests' do\n    inherit! :search_paths\n    # Pods for testing\n  end\n\n  target 'FlutterHybridiOSUITests' do\n    inherit! :search_paths\n    # Pods for testing\n  end\n\nend\n\n```\n\n- pod install\n\n- FlutterHybridiOS.xcworkspace 打开 iOS 项目\n\n- 【TAGETS】→【Build Setttings】→【Build Options】→【Enable Bitcode】来禁用 Bitcode\n\n- 【Enable Phases】，然后点击左上角的加号新建一个“New Run Script Phase”，添加如下脚本代码。\n\n```\n\"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" build\n\"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" embed\n```\n\n- build 项目成功即完成\n\n#### Object-c 调用 Flutter module\n\n```\nViewController.m\n\n#import <Flutter/Flutter.h>\n#import \"AppDelegate.h\"\n#import \"ViewController.h\"\n#import <FlutterPluginRegistrant/GeneratedPluginRegistrant.h>\n\n@interface ViewController ()\n\n@end\n\n@implementation ViewController\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];\n    [button addTarget:self\n               action:@selector(handleButtonAction)\n     forControlEvents:UIControlEventTouchUpInside];\n    [button setTitle:@\"Test\" forState:UIControlStateNormal];\n    [button setBackgroundColor:[UIColor redColor]];\n    button.frame = CGRectMake(80.0,210.0,160.0,40.0);\n    [self.view addSubview:button];\n}\n\n- (void)handleButtonAction {\n    //以一个完整页面打开Flutter模块\n    FlutterViewController *flutterViewController = [FlutterViewController new];\n\n    [flutterViewController setInitialRoute:@\"{name:'devio',dataList:['aa','bb',''cc]}\"];\n\n    [self presentViewController:flutterViewController animated:true completion:nil];\n}\n@end\n```\n\n### Flutter 和 H5 混合开发\n\n```\nflutter_webview_plugin: ^0.3.11\n\n\nimport 'dart:async';\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_webview_plugin/flutter_webview_plugin.dart';\n\n//白名单\nconst CATCH_URLS = ['m.ctrip.com/', 'm.ctrip.com/html5/', 'm.ctrip.com/html5', 'dp.ctrip.com/'];\n\nclass Webview extends StatefulWidget {\n  final String url;\n  final String statusBarColor;\n  final String title;\n  final bool hideAppBar;\n  final bool backForbid;\n\n\n  Webview({Key key, this.url , this.statusBarColor, this.title, this.hideAppBar, this.backForbid=false});\n\n  @override\n  _WebviewState createState() => _WebviewState();\n}\n\nclass _WebviewState extends State<Webview>{\n  final webviewReference = FlutterWebviewPlugin();\n  StreamSubscription<String> _onUrlChanged;\n  StreamSubscription<WebViewStateChanged> _onStateChanged;\n  StreamSubscription<WebViewHttpError> _onHttpError;\n  bool exiting = false;\n  @override\n  void initState() {\n    super.initState();\n    //防止页面重新打开\n    webviewReference.close();\n    //注册监听，页面url发生变化进行监听，返回String\n    _onUrlChanged = webviewReference.onUrlChanged.listen((String url) {});\n    //注册页面状态发生变化\n    //startLoad开始加载的时候\n    _onStateChanged = webviewReference.onStateChanged.listen((WebViewStateChanged state) {\n      switch (state.type) {\n        case WebViewState.startLoad:\n          if (_isToMain(state.url) && !exiting) {\n            if (widget.backForbid) {\n              webviewReference.launch(widget.url);\n            }else {\n              Navigator.pop(context);\n              exiting = true;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n    });\n    //url发生错误\n    _onHttpError = webviewReference.onHttpError.listen((WebViewHttpError error) {\n      print(error);\n    });\n  }\n\n  @override\n  void dispose() {\n    super.dispose();\n    //页面关闭将对应的监听取消\n    _onUrlChanged.cancel();\n    _onStateChanged.cancel();\n    _onHttpError.cancel();\n    webviewReference.dispose();\n  }\n\n  //判断是否在白名单，在的话返回Flutter的上一个页面，不在不做任何处理\n  _isToMain(String url) {\n    bool contain = false;\n    for (final value in CATCH_URLS) {\n      if (url?.endsWith(value)??false) {\n        contain = true;\n        break;\n      }\n    }\n    return contain;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    String statusBarColorStr = widget.statusBarColor ?? 'ffffff';\n    Color backButtonColor;\n    if (statusBarColorStr == 'ffffff') {\n      backButtonColor = Colors.black;\n    } else {\n      backButtonColor = Colors.white;\n    }\n    return Scaffold(\n      body: Column(\n        children: <Widget>[\n          _appBar(Color(int.parse('0xff'+statusBarColorStr)),backButtonColor),\n          Expanded(\n            child: WebviewScaffold(\n              url: widget.url,\n              withZoom: true,\n              hidden: true,\n              initialChild: Container(\n                color: Colors.white,\n                child: Center(\n                  child: Text('Waiting.....'),\n                )\n              ),\n            ),\n          )\n        ],\n      ),\n    );\n  }\n\n  _appBar(Color backgroundColor, Color backButtonColor) {\n    if (widget.hideAppBar??false) {\n      return Container(\n        color: backgroundColor,\n        height: 30,\n      );\n    }\n    return Container(\n      child: FractionallySizedBox(\n        child:  Stack(\n          children: <Widget>[\n            GestureDetector(\n              child: Container(\n                margin: EdgeInsets.only(left:10),\n                child: Icon(\n                  Icons.close,\n                  color: backButtonColor,\n                  size: 26,\n                )\n              ),\n            ),\n            Positioned(\n              left: 0,\n              right: 0,\n              child: Center(\n                child: Text(\n                  widget.title,\n                  style: TextStyle(color:backgroundColor,fontSize:20),\n                ),\n              ),\n            )\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n","source":"_posts/flutter-6-list.md","raw":"---\ntitle: Flutter学习之路 - 混合开发\ndate: 2020-08-11 17:16:19\ntags: ['Flutter']\ncategories: Flutter\n---\n\n### 混合开发\n\n<!-- more -->\n\n### Flutter 集成步骤\n\n- 创建 Flutter module\n\n```\nflutter create -t module flutter_module\n```\n\n- 添加 Flutter module 依赖\n- 在 Java/Object-c 中调用 Flutter module\n\n### Android\n\n#### 引入 Flutter module\n\n1. 打开 settings.gradle(Project Settings)\n\n```\n自动会关联到一个Flutter的模块\nsetBinding(new Binding([gradle: this]))                                 // new\nevaluate(new File(                                                      // new\n    settingsDir.parentFile,                                                // new\n    'flutter_module/.android/include_flutter.groovy'// new\n))\n\n'flutter_module/.android/include_flutter.groovy'\nflutter_module的Flutter项目和android项目在同一文件夹下\n```\n\n2. 打开 build.gradle(Module:app)\n\n```\nminSdkVersion 16才支持Fluuter module\ndefaultConfig{\n  minSdkVersion 16\n}\n```\n\n```\nandroid最下面加入以下代码，进行编译\nandroid {\n  ...\n  compileOptions {\n    sourceCompatibility JavaVersion.VERSION_1_8\n    targetCompatibility JavaVersion.VERSION_1_8\n  }\n}\n```\n\n```\ndependencies {\n  ...\n  implementation project(':flutter')\n}\n```\n\n3. 问题：如果出现“程序包 android.support.annotation 不存在”的错误，需要使用如下的命令来创建 Flutter 模块，因为最新版本的 Android 默认使用 androidx 来管理包。\n\n```\nflutter create --androidx -t module flutter_library\n\n如果这个命令无法找到，升级SDK\n```\n\n#### Java 调用 Flutter module\n\n- Flutter.createView\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    View flutterView = Flutter.createView(this, getLifecycle(), \"route1\");\n    FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\n    addContentView(flutterView, layoutParams);\n  }\n}\n```\n\n- FlutterFragment\n\n```\npublic class MainActivity extends AppCompatActivity {\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    FragmentTransaction ft= getSupportFragmentManager().beginTransaction();\n    ft.replace(R.id.fragment_container, Flutter.createFragment(\"Hello Flutter\"));\n    ft.commit();\n  }\n}\n```\n\n#### Flutter 接受参数\n\n```\nimport 'dart:ui';\n\nvoid main => runApp(MyApp(initParams: window.defaultRouteName))\n\nclass MyApp extends StatelessWidget {\n  //接受initParams参数\n  final String initParams\n\n  const MyApp({Key key, this.initParams}) : super(key:key);\n}\n\n```\n\n### iOS\n\n#### iOS 集成 Flutter\n\n- 在 ios 项目下 pod init\n\n```\nPodfile\n\n# Uncomment the next line to define a global platform for your project\n# platform :ios, '9.0'\ntarget 'FlutterHybridiOS' do\n  # Uncomment the next line if you're using Swift or would like to use dynamic frameworks\n  # use_frameworks!\n\n  # Pods for FlutterHybridiOS\n\n  //flutter项目的路径\n  flutter_application_path = '../flutter_module/'\n\n  eval(File.read(File.join(flutter_application_path,'.ios', 'Flutter', 'podhelper.rb')),binding)\n\n  target 'FlutterHybridiOSTests' do\n    inherit! :search_paths\n    # Pods for testing\n  end\n\n  target 'FlutterHybridiOSUITests' do\n    inherit! :search_paths\n    # Pods for testing\n  end\n\nend\n\n```\n\n- pod install\n\n- FlutterHybridiOS.xcworkspace 打开 iOS 项目\n\n- 【TAGETS】→【Build Setttings】→【Build Options】→【Enable Bitcode】来禁用 Bitcode\n\n- 【Enable Phases】，然后点击左上角的加号新建一个“New Run Script Phase”，添加如下脚本代码。\n\n```\n\"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" build\n\"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" embed\n```\n\n- build 项目成功即完成\n\n#### Object-c 调用 Flutter module\n\n```\nViewController.m\n\n#import <Flutter/Flutter.h>\n#import \"AppDelegate.h\"\n#import \"ViewController.h\"\n#import <FlutterPluginRegistrant/GeneratedPluginRegistrant.h>\n\n@interface ViewController ()\n\n@end\n\n@implementation ViewController\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];\n    [button addTarget:self\n               action:@selector(handleButtonAction)\n     forControlEvents:UIControlEventTouchUpInside];\n    [button setTitle:@\"Test\" forState:UIControlStateNormal];\n    [button setBackgroundColor:[UIColor redColor]];\n    button.frame = CGRectMake(80.0,210.0,160.0,40.0);\n    [self.view addSubview:button];\n}\n\n- (void)handleButtonAction {\n    //以一个完整页面打开Flutter模块\n    FlutterViewController *flutterViewController = [FlutterViewController new];\n\n    [flutterViewController setInitialRoute:@\"{name:'devio',dataList:['aa','bb',''cc]}\"];\n\n    [self presentViewController:flutterViewController animated:true completion:nil];\n}\n@end\n```\n\n### Flutter 和 H5 混合开发\n\n```\nflutter_webview_plugin: ^0.3.11\n\n\nimport 'dart:async';\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_webview_plugin/flutter_webview_plugin.dart';\n\n//白名单\nconst CATCH_URLS = ['m.ctrip.com/', 'm.ctrip.com/html5/', 'm.ctrip.com/html5', 'dp.ctrip.com/'];\n\nclass Webview extends StatefulWidget {\n  final String url;\n  final String statusBarColor;\n  final String title;\n  final bool hideAppBar;\n  final bool backForbid;\n\n\n  Webview({Key key, this.url , this.statusBarColor, this.title, this.hideAppBar, this.backForbid=false});\n\n  @override\n  _WebviewState createState() => _WebviewState();\n}\n\nclass _WebviewState extends State<Webview>{\n  final webviewReference = FlutterWebviewPlugin();\n  StreamSubscription<String> _onUrlChanged;\n  StreamSubscription<WebViewStateChanged> _onStateChanged;\n  StreamSubscription<WebViewHttpError> _onHttpError;\n  bool exiting = false;\n  @override\n  void initState() {\n    super.initState();\n    //防止页面重新打开\n    webviewReference.close();\n    //注册监听，页面url发生变化进行监听，返回String\n    _onUrlChanged = webviewReference.onUrlChanged.listen((String url) {});\n    //注册页面状态发生变化\n    //startLoad开始加载的时候\n    _onStateChanged = webviewReference.onStateChanged.listen((WebViewStateChanged state) {\n      switch (state.type) {\n        case WebViewState.startLoad:\n          if (_isToMain(state.url) && !exiting) {\n            if (widget.backForbid) {\n              webviewReference.launch(widget.url);\n            }else {\n              Navigator.pop(context);\n              exiting = true;\n            }\n          }\n          break;\n        default:\n          break;\n      }\n    });\n    //url发生错误\n    _onHttpError = webviewReference.onHttpError.listen((WebViewHttpError error) {\n      print(error);\n    });\n  }\n\n  @override\n  void dispose() {\n    super.dispose();\n    //页面关闭将对应的监听取消\n    _onUrlChanged.cancel();\n    _onStateChanged.cancel();\n    _onHttpError.cancel();\n    webviewReference.dispose();\n  }\n\n  //判断是否在白名单，在的话返回Flutter的上一个页面，不在不做任何处理\n  _isToMain(String url) {\n    bool contain = false;\n    for (final value in CATCH_URLS) {\n      if (url?.endsWith(value)??false) {\n        contain = true;\n        break;\n      }\n    }\n    return contain;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    String statusBarColorStr = widget.statusBarColor ?? 'ffffff';\n    Color backButtonColor;\n    if (statusBarColorStr == 'ffffff') {\n      backButtonColor = Colors.black;\n    } else {\n      backButtonColor = Colors.white;\n    }\n    return Scaffold(\n      body: Column(\n        children: <Widget>[\n          _appBar(Color(int.parse('0xff'+statusBarColorStr)),backButtonColor),\n          Expanded(\n            child: WebviewScaffold(\n              url: widget.url,\n              withZoom: true,\n              hidden: true,\n              initialChild: Container(\n                color: Colors.white,\n                child: Center(\n                  child: Text('Waiting.....'),\n                )\n              ),\n            ),\n          )\n        ],\n      ),\n    );\n  }\n\n  _appBar(Color backgroundColor, Color backButtonColor) {\n    if (widget.hideAppBar??false) {\n      return Container(\n        color: backgroundColor,\n        height: 30,\n      );\n    }\n    return Container(\n      child: FractionallySizedBox(\n        child:  Stack(\n          children: <Widget>[\n            GestureDetector(\n              child: Container(\n                margin: EdgeInsets.only(left:10),\n                child: Icon(\n                  Icons.close,\n                  color: backButtonColor,\n                  size: 26,\n                )\n              ),\n            ),\n            Positioned(\n              left: 0,\n              right: 0,\n              child: Center(\n                child: Text(\n                  widget.title,\n                  style: TextStyle(color:backgroundColor,fontSize:20),\n                ),\n              ),\n            )\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n","slug":"flutter-6-list","published":1,"updated":"2020-08-11T09:20:56.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq42d0022he6j0gz1fqib","content":"<h3 id=\"混合开发\"><a href=\"#混合开发\" class=\"headerlink\" title=\"混合开发\"></a>混合开发</h3><a id=\"more\"></a>\n<h3 id=\"Flutter-集成步骤\"><a href=\"#Flutter-集成步骤\" class=\"headerlink\" title=\"Flutter 集成步骤\"></a>Flutter 集成步骤</h3><ul>\n<li>创建 Flutter module</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter create -t module flutter_module</span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加 Flutter module 依赖</li>\n<li>在 Java/Object-c 中调用 Flutter module</li>\n</ul>\n<h3 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h3><h4 id=\"引入-Flutter-module\"><a href=\"#引入-Flutter-module\" class=\"headerlink\" title=\"引入 Flutter module\"></a>引入 Flutter module</h4><ol>\n<li>打开 settings.gradle(Project Settings)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自动会关联到一个Flutter的模块</span><br><span class=\"line\">setBinding(new Binding([gradle: this]))                                 // new</span><br><span class=\"line\">evaluate(new File(                                                      // new</span><br><span class=\"line\">    settingsDir.parentFile,                                                // new</span><br><span class=\"line\">    &apos;flutter_module/.android/include_flutter.groovy&apos;// new</span><br><span class=\"line\">))</span><br><span class=\"line\"></span><br><span class=\"line\">&apos;flutter_module/.android/include_flutter.groovy&apos;</span><br><span class=\"line\">flutter_module的Flutter项目和android项目在同一文件夹下</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>打开 build.gradle(Module:app)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">minSdkVersion 16才支持Fluuter module</span><br><span class=\"line\">defaultConfig&#123;</span><br><span class=\"line\">  minSdkVersion 16</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android最下面加入以下代码，进行编译</span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  compileOptions &#123;</span><br><span class=\"line\">    sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class=\"line\">    targetCompatibility JavaVersion.VERSION_1_8</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  implementation project(&apos;:flutter&apos;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>问题：如果出现“程序包 android.support.annotation 不存在”的错误，需要使用如下的命令来创建 Flutter 模块，因为最新版本的 Android 默认使用 androidx 来管理包。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter create --androidx -t module flutter_library</span><br><span class=\"line\"></span><br><span class=\"line\">如果这个命令无法找到，升级SDK</span><br></pre></td></tr></table></figure>\n<h4 id=\"Java-调用-Flutter-module\"><a href=\"#Java-调用-Flutter-module\" class=\"headerlink\" title=\"Java 调用 Flutter module\"></a>Java 调用 Flutter module</h4><ul>\n<li>Flutter.createView</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">    super.onCreate(savedInstanceState);</span><br><span class=\"line\">    View flutterView = Flutter.createView(this, getLifecycle(), &quot;route1&quot;);</span><br><span class=\"line\">    FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);</span><br><span class=\"line\">    addContentView(flutterView, layoutParams);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>FlutterFragment</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">    super.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity_main);</span><br><span class=\"line\">    FragmentTransaction ft= getSupportFragmentManager().beginTransaction();</span><br><span class=\"line\">    ft.replace(R.id.fragment_container, Flutter.createFragment(&quot;Hello Flutter&quot;));</span><br><span class=\"line\">    ft.commit();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Flutter-接受参数\"><a href=\"#Flutter-接受参数\" class=\"headerlink\" title=\"Flutter 接受参数\"></a>Flutter 接受参数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;dart:ui&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">void main =&gt; runApp(MyApp(initParams: window.defaultRouteName))</span><br><span class=\"line\"></span><br><span class=\"line\">class MyApp extends StatelessWidget &#123;</span><br><span class=\"line\">  //接受initParams参数</span><br><span class=\"line\">  final String initParams</span><br><span class=\"line\"></span><br><span class=\"line\">  const MyApp(&#123;Key key, this.initParams&#125;) : super(key:key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h3><h4 id=\"iOS-集成-Flutter\"><a href=\"#iOS-集成-Flutter\" class=\"headerlink\" title=\"iOS 集成 Flutter\"></a>iOS 集成 Flutter</h4><ul>\n<li>在 ios 项目下 pod init</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Podfile</span><br><span class=\"line\"></span><br><span class=\"line\"># Uncomment the next line to define a global platform for your project</span><br><span class=\"line\"># platform :ios, &apos;9.0&apos;</span><br><span class=\"line\">target &apos;FlutterHybridiOS&apos; do</span><br><span class=\"line\">  # Uncomment the next line if you&apos;re using Swift or would like to use dynamic frameworks</span><br><span class=\"line\">  # use_frameworks!</span><br><span class=\"line\"></span><br><span class=\"line\">  # Pods for FlutterHybridiOS</span><br><span class=\"line\"></span><br><span class=\"line\">  //flutter项目的路径</span><br><span class=\"line\">  flutter_application_path = &apos;../flutter_module/&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">  eval(File.read(File.join(flutter_application_path,&apos;.ios&apos;, &apos;Flutter&apos;, &apos;podhelper.rb&apos;)),binding)</span><br><span class=\"line\"></span><br><span class=\"line\">  target &apos;FlutterHybridiOSTests&apos; do</span><br><span class=\"line\">    inherit! :search_paths</span><br><span class=\"line\">    # Pods for testing</span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\">  target &apos;FlutterHybridiOSUITests&apos; do</span><br><span class=\"line\">    inherit! :search_paths</span><br><span class=\"line\">    # Pods for testing</span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>pod install</p>\n</li>\n<li><p>FlutterHybridiOS.xcworkspace 打开 iOS 项目</p>\n</li>\n<li><p>【TAGETS】→【Build Setttings】→【Build Options】→【Enable Bitcode】来禁用 Bitcode</p>\n</li>\n<li><p>【Enable Phases】，然后点击左上角的加号新建一个“New Run Script Phase”，添加如下脚本代码。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh&quot; build</span><br><span class=\"line\">&quot;$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh&quot; embed</span><br></pre></td></tr></table></figure>\n<ul>\n<li>build 项目成功即完成</li>\n</ul>\n<h4 id=\"Object-c-调用-Flutter-module\"><a href=\"#Object-c-调用-Flutter-module\" class=\"headerlink\" title=\"Object-c 调用 Flutter module\"></a>Object-c 调用 Flutter module</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ViewController.m</span><br><span class=\"line\"></span><br><span class=\"line\">#import &lt;Flutter/Flutter.h&gt;</span><br><span class=\"line\">#import &quot;AppDelegate.h&quot;</span><br><span class=\"line\">#import &quot;ViewController.h&quot;</span><br><span class=\"line\">#import &lt;FlutterPluginRegistrant/GeneratedPluginRegistrant.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface ViewController ()</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation ViewController</span><br><span class=\"line\">- (void)viewDidLoad &#123;</span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\">    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];</span><br><span class=\"line\">    [button addTarget:self</span><br><span class=\"line\">               action:@selector(handleButtonAction)</span><br><span class=\"line\">     forControlEvents:UIControlEventTouchUpInside];</span><br><span class=\"line\">    [button setTitle:@&quot;Test&quot; forState:UIControlStateNormal];</span><br><span class=\"line\">    [button setBackgroundColor:[UIColor redColor]];</span><br><span class=\"line\">    button.frame = CGRectMake(80.0,210.0,160.0,40.0);</span><br><span class=\"line\">    [self.view addSubview:button];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)handleButtonAction &#123;</span><br><span class=\"line\">    //以一个完整页面打开Flutter模块</span><br><span class=\"line\">    FlutterViewController *flutterViewController = [FlutterViewController new];</span><br><span class=\"line\"></span><br><span class=\"line\">    [flutterViewController setInitialRoute:@&quot;&#123;name:&apos;devio&apos;,dataList:[&apos;aa&apos;,&apos;bb&apos;,&apos;&apos;cc]&#125;&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    [self presentViewController:flutterViewController animated:true completion:nil];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<h3 id=\"Flutter-和-H5-混合开发\"><a href=\"#Flutter-和-H5-混合开发\" class=\"headerlink\" title=\"Flutter 和 H5 混合开发\"></a>Flutter 和 H5 混合开发</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter_webview_plugin: ^0.3.11</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import &apos;dart:async&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &apos;package:flutter/material.dart&apos;;</span><br><span class=\"line\">import &apos;package:flutter_webview_plugin/flutter_webview_plugin.dart&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">//白名单</span><br><span class=\"line\">const CATCH_URLS = [&apos;m.ctrip.com/&apos;, &apos;m.ctrip.com/html5/&apos;, &apos;m.ctrip.com/html5&apos;, &apos;dp.ctrip.com/&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">class Webview extends StatefulWidget &#123;</span><br><span class=\"line\">  final String url;</span><br><span class=\"line\">  final String statusBarColor;</span><br><span class=\"line\">  final String title;</span><br><span class=\"line\">  final bool hideAppBar;</span><br><span class=\"line\">  final bool backForbid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  Webview(&#123;Key key, this.url , this.statusBarColor, this.title, this.hideAppBar, this.backForbid=false&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _WebviewState createState() =&gt; _WebviewState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _WebviewState extends State&lt;Webview&gt;&#123;</span><br><span class=\"line\">  final webviewReference = FlutterWebviewPlugin();</span><br><span class=\"line\">  StreamSubscription&lt;String&gt; _onUrlChanged;</span><br><span class=\"line\">  StreamSubscription&lt;WebViewStateChanged&gt; _onStateChanged;</span><br><span class=\"line\">  StreamSubscription&lt;WebViewHttpError&gt; _onHttpError;</span><br><span class=\"line\">  bool exiting = false;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void initState() &#123;</span><br><span class=\"line\">    super.initState();</span><br><span class=\"line\">    //防止页面重新打开</span><br><span class=\"line\">    webviewReference.close();</span><br><span class=\"line\">    //注册监听，页面url发生变化进行监听，返回String</span><br><span class=\"line\">    _onUrlChanged = webviewReference.onUrlChanged.listen((String url) &#123;&#125;);</span><br><span class=\"line\">    //注册页面状态发生变化</span><br><span class=\"line\">    //startLoad开始加载的时候</span><br><span class=\"line\">    _onStateChanged = webviewReference.onStateChanged.listen((WebViewStateChanged state) &#123;</span><br><span class=\"line\">      switch (state.type) &#123;</span><br><span class=\"line\">        case WebViewState.startLoad:</span><br><span class=\"line\">          if (_isToMain(state.url) &amp;&amp; !exiting) &#123;</span><br><span class=\"line\">            if (widget.backForbid) &#123;</span><br><span class=\"line\">              webviewReference.launch(widget.url);</span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\">              Navigator.pop(context);</span><br><span class=\"line\">              exiting = true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">          break;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    //url发生错误</span><br><span class=\"line\">    _onHttpError = webviewReference.onHttpError.listen((WebViewHttpError error) &#123;</span><br><span class=\"line\">      print(error);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void dispose() &#123;</span><br><span class=\"line\">    super.dispose();</span><br><span class=\"line\">    //页面关闭将对应的监听取消</span><br><span class=\"line\">    _onUrlChanged.cancel();</span><br><span class=\"line\">    _onStateChanged.cancel();</span><br><span class=\"line\">    _onHttpError.cancel();</span><br><span class=\"line\">    webviewReference.dispose();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //判断是否在白名单，在的话返回Flutter的上一个页面，不在不做任何处理</span><br><span class=\"line\">  _isToMain(String url) &#123;</span><br><span class=\"line\">    bool contain = false;</span><br><span class=\"line\">    for (final value in CATCH_URLS) &#123;</span><br><span class=\"line\">      if (url?.endsWith(value)??false) &#123;</span><br><span class=\"line\">        contain = true;</span><br><span class=\"line\">        break;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return contain;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    String statusBarColorStr = widget.statusBarColor ?? &apos;ffffff&apos;;</span><br><span class=\"line\">    Color backButtonColor;</span><br><span class=\"line\">    if (statusBarColorStr == &apos;ffffff&apos;) &#123;</span><br><span class=\"line\">      backButtonColor = Colors.black;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      backButtonColor = Colors.white;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      body: Column(</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          _appBar(Color(int.parse(&apos;0xff&apos;+statusBarColorStr)),backButtonColor),</span><br><span class=\"line\">          Expanded(</span><br><span class=\"line\">            child: WebviewScaffold(</span><br><span class=\"line\">              url: widget.url,</span><br><span class=\"line\">              withZoom: true,</span><br><span class=\"line\">              hidden: true,</span><br><span class=\"line\">              initialChild: Container(</span><br><span class=\"line\">                color: Colors.white,</span><br><span class=\"line\">                child: Center(</span><br><span class=\"line\">                  child: Text(&apos;Waiting.....&apos;),</span><br><span class=\"line\">                )</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          )</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  _appBar(Color backgroundColor, Color backButtonColor) &#123;</span><br><span class=\"line\">    if (widget.hideAppBar??false) &#123;</span><br><span class=\"line\">      return Container(</span><br><span class=\"line\">        color: backgroundColor,</span><br><span class=\"line\">        height: 30,</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      child: FractionallySizedBox(</span><br><span class=\"line\">        child:  Stack(</span><br><span class=\"line\">          children: &lt;Widget&gt;[</span><br><span class=\"line\">            GestureDetector(</span><br><span class=\"line\">              child: Container(</span><br><span class=\"line\">                margin: EdgeInsets.only(left:10),</span><br><span class=\"line\">                child: Icon(</span><br><span class=\"line\">                  Icons.close,</span><br><span class=\"line\">                  color: backButtonColor,</span><br><span class=\"line\">                  size: 26,</span><br><span class=\"line\">                )</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            Positioned(</span><br><span class=\"line\">              left: 0,</span><br><span class=\"line\">              right: 0,</span><br><span class=\"line\">              child: Center(</span><br><span class=\"line\">                child: Text(</span><br><span class=\"line\">                  widget.title,</span><br><span class=\"line\">                  style: TextStyle(color:backgroundColor,fontSize:20),</span><br><span class=\"line\">                ),</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            )</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"混合开发\"><a href=\"#混合开发\" class=\"headerlink\" title=\"混合开发\"></a>混合开发</h3>","more":"<h3 id=\"Flutter-集成步骤\"><a href=\"#Flutter-集成步骤\" class=\"headerlink\" title=\"Flutter 集成步骤\"></a>Flutter 集成步骤</h3><ul>\n<li>创建 Flutter module</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter create -t module flutter_module</span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加 Flutter module 依赖</li>\n<li>在 Java/Object-c 中调用 Flutter module</li>\n</ul>\n<h3 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h3><h4 id=\"引入-Flutter-module\"><a href=\"#引入-Flutter-module\" class=\"headerlink\" title=\"引入 Flutter module\"></a>引入 Flutter module</h4><ol>\n<li>打开 settings.gradle(Project Settings)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自动会关联到一个Flutter的模块</span><br><span class=\"line\">setBinding(new Binding([gradle: this]))                                 // new</span><br><span class=\"line\">evaluate(new File(                                                      // new</span><br><span class=\"line\">    settingsDir.parentFile,                                                // new</span><br><span class=\"line\">    &apos;flutter_module/.android/include_flutter.groovy&apos;// new</span><br><span class=\"line\">))</span><br><span class=\"line\"></span><br><span class=\"line\">&apos;flutter_module/.android/include_flutter.groovy&apos;</span><br><span class=\"line\">flutter_module的Flutter项目和android项目在同一文件夹下</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>打开 build.gradle(Module:app)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">minSdkVersion 16才支持Fluuter module</span><br><span class=\"line\">defaultConfig&#123;</span><br><span class=\"line\">  minSdkVersion 16</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android最下面加入以下代码，进行编译</span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  compileOptions &#123;</span><br><span class=\"line\">    sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class=\"line\">    targetCompatibility JavaVersion.VERSION_1_8</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  implementation project(&apos;:flutter&apos;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>问题：如果出现“程序包 android.support.annotation 不存在”的错误，需要使用如下的命令来创建 Flutter 模块，因为最新版本的 Android 默认使用 androidx 来管理包。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter create --androidx -t module flutter_library</span><br><span class=\"line\"></span><br><span class=\"line\">如果这个命令无法找到，升级SDK</span><br></pre></td></tr></table></figure>\n<h4 id=\"Java-调用-Flutter-module\"><a href=\"#Java-调用-Flutter-module\" class=\"headerlink\" title=\"Java 调用 Flutter module\"></a>Java 调用 Flutter module</h4><ul>\n<li>Flutter.createView</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">    super.onCreate(savedInstanceState);</span><br><span class=\"line\">    View flutterView = Flutter.createView(this, getLifecycle(), &quot;route1&quot;);</span><br><span class=\"line\">    FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);</span><br><span class=\"line\">    addContentView(flutterView, layoutParams);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>FlutterFragment</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">    super.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.activity_main);</span><br><span class=\"line\">    FragmentTransaction ft= getSupportFragmentManager().beginTransaction();</span><br><span class=\"line\">    ft.replace(R.id.fragment_container, Flutter.createFragment(&quot;Hello Flutter&quot;));</span><br><span class=\"line\">    ft.commit();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Flutter-接受参数\"><a href=\"#Flutter-接受参数\" class=\"headerlink\" title=\"Flutter 接受参数\"></a>Flutter 接受参数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;dart:ui&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">void main =&gt; runApp(MyApp(initParams: window.defaultRouteName))</span><br><span class=\"line\"></span><br><span class=\"line\">class MyApp extends StatelessWidget &#123;</span><br><span class=\"line\">  //接受initParams参数</span><br><span class=\"line\">  final String initParams</span><br><span class=\"line\"></span><br><span class=\"line\">  const MyApp(&#123;Key key, this.initParams&#125;) : super(key:key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h3><h4 id=\"iOS-集成-Flutter\"><a href=\"#iOS-集成-Flutter\" class=\"headerlink\" title=\"iOS 集成 Flutter\"></a>iOS 集成 Flutter</h4><ul>\n<li>在 ios 项目下 pod init</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Podfile</span><br><span class=\"line\"></span><br><span class=\"line\"># Uncomment the next line to define a global platform for your project</span><br><span class=\"line\"># platform :ios, &apos;9.0&apos;</span><br><span class=\"line\">target &apos;FlutterHybridiOS&apos; do</span><br><span class=\"line\">  # Uncomment the next line if you&apos;re using Swift or would like to use dynamic frameworks</span><br><span class=\"line\">  # use_frameworks!</span><br><span class=\"line\"></span><br><span class=\"line\">  # Pods for FlutterHybridiOS</span><br><span class=\"line\"></span><br><span class=\"line\">  //flutter项目的路径</span><br><span class=\"line\">  flutter_application_path = &apos;../flutter_module/&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">  eval(File.read(File.join(flutter_application_path,&apos;.ios&apos;, &apos;Flutter&apos;, &apos;podhelper.rb&apos;)),binding)</span><br><span class=\"line\"></span><br><span class=\"line\">  target &apos;FlutterHybridiOSTests&apos; do</span><br><span class=\"line\">    inherit! :search_paths</span><br><span class=\"line\">    # Pods for testing</span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\">  target &apos;FlutterHybridiOSUITests&apos; do</span><br><span class=\"line\">    inherit! :search_paths</span><br><span class=\"line\">    # Pods for testing</span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>pod install</p>\n</li>\n<li><p>FlutterHybridiOS.xcworkspace 打开 iOS 项目</p>\n</li>\n<li><p>【TAGETS】→【Build Setttings】→【Build Options】→【Enable Bitcode】来禁用 Bitcode</p>\n</li>\n<li><p>【Enable Phases】，然后点击左上角的加号新建一个“New Run Script Phase”，添加如下脚本代码。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh&quot; build</span><br><span class=\"line\">&quot;$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh&quot; embed</span><br></pre></td></tr></table></figure>\n<ul>\n<li>build 项目成功即完成</li>\n</ul>\n<h4 id=\"Object-c-调用-Flutter-module\"><a href=\"#Object-c-调用-Flutter-module\" class=\"headerlink\" title=\"Object-c 调用 Flutter module\"></a>Object-c 调用 Flutter module</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ViewController.m</span><br><span class=\"line\"></span><br><span class=\"line\">#import &lt;Flutter/Flutter.h&gt;</span><br><span class=\"line\">#import &quot;AppDelegate.h&quot;</span><br><span class=\"line\">#import &quot;ViewController.h&quot;</span><br><span class=\"line\">#import &lt;FlutterPluginRegistrant/GeneratedPluginRegistrant.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface ViewController ()</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation ViewController</span><br><span class=\"line\">- (void)viewDidLoad &#123;</span><br><span class=\"line\">    [super viewDidLoad];</span><br><span class=\"line\">    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];</span><br><span class=\"line\">    [button addTarget:self</span><br><span class=\"line\">               action:@selector(handleButtonAction)</span><br><span class=\"line\">     forControlEvents:UIControlEventTouchUpInside];</span><br><span class=\"line\">    [button setTitle:@&quot;Test&quot; forState:UIControlStateNormal];</span><br><span class=\"line\">    [button setBackgroundColor:[UIColor redColor]];</span><br><span class=\"line\">    button.frame = CGRectMake(80.0,210.0,160.0,40.0);</span><br><span class=\"line\">    [self.view addSubview:button];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (void)handleButtonAction &#123;</span><br><span class=\"line\">    //以一个完整页面打开Flutter模块</span><br><span class=\"line\">    FlutterViewController *flutterViewController = [FlutterViewController new];</span><br><span class=\"line\"></span><br><span class=\"line\">    [flutterViewController setInitialRoute:@&quot;&#123;name:&apos;devio&apos;,dataList:[&apos;aa&apos;,&apos;bb&apos;,&apos;&apos;cc]&#125;&quot;];</span><br><span class=\"line\"></span><br><span class=\"line\">    [self presentViewController:flutterViewController animated:true completion:nil];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<h3 id=\"Flutter-和-H5-混合开发\"><a href=\"#Flutter-和-H5-混合开发\" class=\"headerlink\" title=\"Flutter 和 H5 混合开发\"></a>Flutter 和 H5 混合开发</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter_webview_plugin: ^0.3.11</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">import &apos;dart:async&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &apos;package:flutter/material.dart&apos;;</span><br><span class=\"line\">import &apos;package:flutter_webview_plugin/flutter_webview_plugin.dart&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">//白名单</span><br><span class=\"line\">const CATCH_URLS = [&apos;m.ctrip.com/&apos;, &apos;m.ctrip.com/html5/&apos;, &apos;m.ctrip.com/html5&apos;, &apos;dp.ctrip.com/&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">class Webview extends StatefulWidget &#123;</span><br><span class=\"line\">  final String url;</span><br><span class=\"line\">  final String statusBarColor;</span><br><span class=\"line\">  final String title;</span><br><span class=\"line\">  final bool hideAppBar;</span><br><span class=\"line\">  final bool backForbid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  Webview(&#123;Key key, this.url , this.statusBarColor, this.title, this.hideAppBar, this.backForbid=false&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _WebviewState createState() =&gt; _WebviewState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class _WebviewState extends State&lt;Webview&gt;&#123;</span><br><span class=\"line\">  final webviewReference = FlutterWebviewPlugin();</span><br><span class=\"line\">  StreamSubscription&lt;String&gt; _onUrlChanged;</span><br><span class=\"line\">  StreamSubscription&lt;WebViewStateChanged&gt; _onStateChanged;</span><br><span class=\"line\">  StreamSubscription&lt;WebViewHttpError&gt; _onHttpError;</span><br><span class=\"line\">  bool exiting = false;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void initState() &#123;</span><br><span class=\"line\">    super.initState();</span><br><span class=\"line\">    //防止页面重新打开</span><br><span class=\"line\">    webviewReference.close();</span><br><span class=\"line\">    //注册监听，页面url发生变化进行监听，返回String</span><br><span class=\"line\">    _onUrlChanged = webviewReference.onUrlChanged.listen((String url) &#123;&#125;);</span><br><span class=\"line\">    //注册页面状态发生变化</span><br><span class=\"line\">    //startLoad开始加载的时候</span><br><span class=\"line\">    _onStateChanged = webviewReference.onStateChanged.listen((WebViewStateChanged state) &#123;</span><br><span class=\"line\">      switch (state.type) &#123;</span><br><span class=\"line\">        case WebViewState.startLoad:</span><br><span class=\"line\">          if (_isToMain(state.url) &amp;&amp; !exiting) &#123;</span><br><span class=\"line\">            if (widget.backForbid) &#123;</span><br><span class=\"line\">              webviewReference.launch(widget.url);</span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\">              Navigator.pop(context);</span><br><span class=\"line\">              exiting = true;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">          break;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    //url发生错误</span><br><span class=\"line\">    _onHttpError = webviewReference.onHttpError.listen((WebViewHttpError error) &#123;</span><br><span class=\"line\">      print(error);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void dispose() &#123;</span><br><span class=\"line\">    super.dispose();</span><br><span class=\"line\">    //页面关闭将对应的监听取消</span><br><span class=\"line\">    _onUrlChanged.cancel();</span><br><span class=\"line\">    _onStateChanged.cancel();</span><br><span class=\"line\">    _onHttpError.cancel();</span><br><span class=\"line\">    webviewReference.dispose();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //判断是否在白名单，在的话返回Flutter的上一个页面，不在不做任何处理</span><br><span class=\"line\">  _isToMain(String url) &#123;</span><br><span class=\"line\">    bool contain = false;</span><br><span class=\"line\">    for (final value in CATCH_URLS) &#123;</span><br><span class=\"line\">      if (url?.endsWith(value)??false) &#123;</span><br><span class=\"line\">        contain = true;</span><br><span class=\"line\">        break;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return contain;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    String statusBarColorStr = widget.statusBarColor ?? &apos;ffffff&apos;;</span><br><span class=\"line\">    Color backButtonColor;</span><br><span class=\"line\">    if (statusBarColorStr == &apos;ffffff&apos;) &#123;</span><br><span class=\"line\">      backButtonColor = Colors.black;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      backButtonColor = Colors.white;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return Scaffold(</span><br><span class=\"line\">      body: Column(</span><br><span class=\"line\">        children: &lt;Widget&gt;[</span><br><span class=\"line\">          _appBar(Color(int.parse(&apos;0xff&apos;+statusBarColorStr)),backButtonColor),</span><br><span class=\"line\">          Expanded(</span><br><span class=\"line\">            child: WebviewScaffold(</span><br><span class=\"line\">              url: widget.url,</span><br><span class=\"line\">              withZoom: true,</span><br><span class=\"line\">              hidden: true,</span><br><span class=\"line\">              initialChild: Container(</span><br><span class=\"line\">                color: Colors.white,</span><br><span class=\"line\">                child: Center(</span><br><span class=\"line\">                  child: Text(&apos;Waiting.....&apos;),</span><br><span class=\"line\">                )</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          )</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  _appBar(Color backgroundColor, Color backButtonColor) &#123;</span><br><span class=\"line\">    if (widget.hideAppBar??false) &#123;</span><br><span class=\"line\">      return Container(</span><br><span class=\"line\">        color: backgroundColor,</span><br><span class=\"line\">        height: 30,</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return Container(</span><br><span class=\"line\">      child: FractionallySizedBox(</span><br><span class=\"line\">        child:  Stack(</span><br><span class=\"line\">          children: &lt;Widget&gt;[</span><br><span class=\"line\">            GestureDetector(</span><br><span class=\"line\">              child: Container(</span><br><span class=\"line\">                margin: EdgeInsets.only(left:10),</span><br><span class=\"line\">                child: Icon(</span><br><span class=\"line\">                  Icons.close,</span><br><span class=\"line\">                  color: backButtonColor,</span><br><span class=\"line\">                  size: 26,</span><br><span class=\"line\">                )</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            Positioned(</span><br><span class=\"line\">              left: 0,</span><br><span class=\"line\">              right: 0,</span><br><span class=\"line\">              child: Center(</span><br><span class=\"line\">                child: Text(</span><br><span class=\"line\">                  widget.title,</span><br><span class=\"line\">                  style: TextStyle(color:backgroundColor,fontSize:20),</span><br><span class=\"line\">                ),</span><br><span class=\"line\">              ),</span><br><span class=\"line\">            )</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Flutter学习之路 - 适配和打包","date":"2020-08-11T09:25:47.000Z","_content":"\n### 适配和打包\n\n<!-- more -->\n\n### 解决启动白屏\n\n- 新建的 flutter 项目没有 MainActivity.java，只有 MainActivity.kt,对于已有项目，如果把/ios 和/android 文件夹删掉，运行\n\n```\nflutter create -i objc -a java new_app\n```\n\n- flutter 启动应用，初始化 SDK，flutter 的代码加载到内存里面，完成渲染，在这个加载过程中，没有内容显示，所以会出现白屏。\n\n分别为 android 和 ios 启动屏添加启动屏图片\n\n### 全面屏适配\n\n1. SafeArea 将组件进行包裹即可\n\n2. MediaQuery.of(context).padding 计算顶部和底部的 padding 值\n\n```\nfinal EdgeInsets paddings = MediaQuery.of(context).padding;\n```\n\n```\nandroid\n\nAndroidManifest.xml\n\n<!--适配全面屏-->\n<meta-data\n  android:name=\"android.max_aspect\"\n  android:value=\"2.3\" />\n```\n\n### 项目优化\n\n- 代码优化\n\n- 包大小\n\n  压缩本地图片\n\n  使用单架构 so\n\n- 流畅性优化\n\n- 内存优化\n\n### Android 打包\n\n- AndroidMainifest.xml\n\n```\n添加APP名：android:label\n<application\n  android:name=\"io.flutter.app.FlutterApplication\"\n  android:label=\"FlutterDemo\"\n  android:icon=\"@mipmap/ic_launcher\">\n```\n\nmain.dart 文件的 title 进行修改\n\n- 检查和配置 build.gradle(Module:app) 文件\n\n```\nandroid: {\n  compileSdkVersion: 28 //兼容到android28\n\n  defaultConfig: {\n    applicationId ''  //包名\n    minSdkVersion 16 //兼容到android最低版本16,也就是安卓4.1\n    targetSdkVersion 28\n    versionCode 1 //版本\n    versionName: '1.0.0' //版本号\n  }\n}\n```\n\n- 启动图标\n\nres-mipmap-ic_launcher\n\n- APP 签名\n\nandroidStudio 的 build - Generate Signed Bundle / APK\n\n选择 APK - create new\n\n创建一个名为 <app dir>/android/key.properties 的文件，它包含了密钥库位置的定义.填写创建签名的信息\n\n在 gradle 中配置签名\n\n```\n通过编辑 <app dir>/android/app/build.gradle 文件来为我们的 app 配置签名：\n在 android 代码块之前添加：\n\ndef keystoreProperties = new Properties()\ndef keystorePropertiesFile = rootProject.file('key.properties')\nif (keystorePropertiesFile.exists()) {\n    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))\n}\n\nandroid {\n      ...\n}\n\n\n在 buildTypes 代码块之前添加：\n\n signingConfigs {\n    release {\n      keyAlias keystoreProperties['keyAlias']\n      keyPassword keystoreProperties['keyPassword']\n      storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null\n      storePassword keystoreProperties['storePassword']\n    }\n}\nbuildTypes {\n  release {\n    signingConfig signingConfigs.release\n  }\n}\n```\n\n启用混淆器，具体看官网\n\nflutter build apk\n\n### 升级\n\n- 更新 Flutter SDK 和 packages\n\n```\n根目录运行\nflutter upgrade\n```\n\n- 只更新包\n\n```\n手动式-插件官网\n\n命令式\nflutter packages upgrade\nflutter packages get\n```\n","source":"_posts/flutter-7-build.md","raw":"---\ntitle: Flutter学习之路 - 适配和打包\ndate: 2020-08-11 17:25:47\ntags: ['Flutter']\ncategories: Flutter\n---\n\n### 适配和打包\n\n<!-- more -->\n\n### 解决启动白屏\n\n- 新建的 flutter 项目没有 MainActivity.java，只有 MainActivity.kt,对于已有项目，如果把/ios 和/android 文件夹删掉，运行\n\n```\nflutter create -i objc -a java new_app\n```\n\n- flutter 启动应用，初始化 SDK，flutter 的代码加载到内存里面，完成渲染，在这个加载过程中，没有内容显示，所以会出现白屏。\n\n分别为 android 和 ios 启动屏添加启动屏图片\n\n### 全面屏适配\n\n1. SafeArea 将组件进行包裹即可\n\n2. MediaQuery.of(context).padding 计算顶部和底部的 padding 值\n\n```\nfinal EdgeInsets paddings = MediaQuery.of(context).padding;\n```\n\n```\nandroid\n\nAndroidManifest.xml\n\n<!--适配全面屏-->\n<meta-data\n  android:name=\"android.max_aspect\"\n  android:value=\"2.3\" />\n```\n\n### 项目优化\n\n- 代码优化\n\n- 包大小\n\n  压缩本地图片\n\n  使用单架构 so\n\n- 流畅性优化\n\n- 内存优化\n\n### Android 打包\n\n- AndroidMainifest.xml\n\n```\n添加APP名：android:label\n<application\n  android:name=\"io.flutter.app.FlutterApplication\"\n  android:label=\"FlutterDemo\"\n  android:icon=\"@mipmap/ic_launcher\">\n```\n\nmain.dart 文件的 title 进行修改\n\n- 检查和配置 build.gradle(Module:app) 文件\n\n```\nandroid: {\n  compileSdkVersion: 28 //兼容到android28\n\n  defaultConfig: {\n    applicationId ''  //包名\n    minSdkVersion 16 //兼容到android最低版本16,也就是安卓4.1\n    targetSdkVersion 28\n    versionCode 1 //版本\n    versionName: '1.0.0' //版本号\n  }\n}\n```\n\n- 启动图标\n\nres-mipmap-ic_launcher\n\n- APP 签名\n\nandroidStudio 的 build - Generate Signed Bundle / APK\n\n选择 APK - create new\n\n创建一个名为 <app dir>/android/key.properties 的文件，它包含了密钥库位置的定义.填写创建签名的信息\n\n在 gradle 中配置签名\n\n```\n通过编辑 <app dir>/android/app/build.gradle 文件来为我们的 app 配置签名：\n在 android 代码块之前添加：\n\ndef keystoreProperties = new Properties()\ndef keystorePropertiesFile = rootProject.file('key.properties')\nif (keystorePropertiesFile.exists()) {\n    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))\n}\n\nandroid {\n      ...\n}\n\n\n在 buildTypes 代码块之前添加：\n\n signingConfigs {\n    release {\n      keyAlias keystoreProperties['keyAlias']\n      keyPassword keystoreProperties['keyPassword']\n      storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null\n      storePassword keystoreProperties['storePassword']\n    }\n}\nbuildTypes {\n  release {\n    signingConfig signingConfigs.release\n  }\n}\n```\n\n启用混淆器，具体看官网\n\nflutter build apk\n\n### 升级\n\n- 更新 Flutter SDK 和 packages\n\n```\n根目录运行\nflutter upgrade\n```\n\n- 只更新包\n\n```\n手动式-插件官网\n\n命令式\nflutter packages upgrade\nflutter packages get\n```\n","slug":"flutter-7-build","published":1,"updated":"2020-08-11T09:26:30.638Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq42e0024he6jvjewuvv8","content":"<h3 id=\"适配和打包\"><a href=\"#适配和打包\" class=\"headerlink\" title=\"适配和打包\"></a>适配和打包</h3><a id=\"more\"></a>\n<h3 id=\"解决启动白屏\"><a href=\"#解决启动白屏\" class=\"headerlink\" title=\"解决启动白屏\"></a>解决启动白屏</h3><ul>\n<li>新建的 flutter 项目没有 MainActivity.java，只有 MainActivity.kt,对于已有项目，如果把/ios 和/android 文件夹删掉，运行</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter create -i objc -a java new_app</span><br></pre></td></tr></table></figure>\n<ul>\n<li>flutter 启动应用，初始化 SDK，flutter 的代码加载到内存里面，完成渲染，在这个加载过程中，没有内容显示，所以会出现白屏。</li>\n</ul>\n<p>分别为 android 和 ios 启动屏添加启动屏图片</p>\n<h3 id=\"全面屏适配\"><a href=\"#全面屏适配\" class=\"headerlink\" title=\"全面屏适配\"></a>全面屏适配</h3><ol>\n<li><p>SafeArea 将组件进行包裹即可</p>\n</li>\n<li><p>MediaQuery.of(context).padding 计算顶部和底部的 padding 值</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final EdgeInsets paddings = MediaQuery.of(context).padding;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android</span><br><span class=\"line\"></span><br><span class=\"line\">AndroidManifest.xml</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--适配全面屏--&gt;</span><br><span class=\"line\">&lt;meta-data</span><br><span class=\"line\">  android:name=&quot;android.max_aspect&quot;</span><br><span class=\"line\">  android:value=&quot;2.3&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"项目优化\"><a href=\"#项目优化\" class=\"headerlink\" title=\"项目优化\"></a>项目优化</h3><ul>\n<li><p>代码优化</p>\n</li>\n<li><p>包大小</p>\n<p>压缩本地图片</p>\n<p>使用单架构 so</p>\n</li>\n<li><p>流畅性优化</p>\n</li>\n<li><p>内存优化</p>\n</li>\n</ul>\n<h3 id=\"Android-打包\"><a href=\"#Android-打包\" class=\"headerlink\" title=\"Android 打包\"></a>Android 打包</h3><ul>\n<li>AndroidMainifest.xml</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">添加APP名：android:label</span><br><span class=\"line\">&lt;application</span><br><span class=\"line\">  android:name=&quot;io.flutter.app.FlutterApplication&quot;</span><br><span class=\"line\">  android:label=&quot;FlutterDemo&quot;</span><br><span class=\"line\">  android:icon=&quot;@mipmap/ic_launcher&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p>main.dart 文件的 title 进行修改</p>\n<ul>\n<li>检查和配置 build.gradle(Module:app) 文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android: &#123;</span><br><span class=\"line\">  compileSdkVersion: 28 //兼容到android28</span><br><span class=\"line\"></span><br><span class=\"line\">  defaultConfig: &#123;</span><br><span class=\"line\">    applicationId &apos;&apos;  //包名</span><br><span class=\"line\">    minSdkVersion 16 //兼容到android最低版本16,也就是安卓4.1</span><br><span class=\"line\">    targetSdkVersion 28</span><br><span class=\"line\">    versionCode 1 //版本</span><br><span class=\"line\">    versionName: &apos;1.0.0&apos; //版本号</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动图标</li>\n</ul>\n<p>res-mipmap-ic_launcher</p>\n<ul>\n<li>APP 签名</li>\n</ul>\n<p>androidStudio 的 build - Generate Signed Bundle / APK</p>\n<p>选择 APK - create new</p>\n<p>创建一个名为 <app dir=\"\">/android/key.properties 的文件，它包含了密钥库位置的定义.填写创建签名的信息</app></p>\n<p>在 gradle 中配置签名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过编辑 &lt;app dir&gt;/android/app/build.gradle 文件来为我们的 app 配置签名：</span><br><span class=\"line\">在 android 代码块之前添加：</span><br><span class=\"line\"></span><br><span class=\"line\">def keystoreProperties = new Properties()</span><br><span class=\"line\">def keystorePropertiesFile = rootProject.file(&apos;key.properties&apos;)</span><br><span class=\"line\">if (keystorePropertiesFile.exists()) &#123;</span><br><span class=\"line\">    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">在 buildTypes 代码块之前添加：</span><br><span class=\"line\"></span><br><span class=\"line\"> signingConfigs &#123;</span><br><span class=\"line\">    release &#123;</span><br><span class=\"line\">      keyAlias keystoreProperties[&apos;keyAlias&apos;]</span><br><span class=\"line\">      keyPassword keystoreProperties[&apos;keyPassword&apos;]</span><br><span class=\"line\">      storeFile keystoreProperties[&apos;storeFile&apos;] ? file(keystoreProperties[&apos;storeFile&apos;]) : null</span><br><span class=\"line\">      storePassword keystoreProperties[&apos;storePassword&apos;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">buildTypes &#123;</span><br><span class=\"line\">  release &#123;</span><br><span class=\"line\">    signingConfig signingConfigs.release</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启用混淆器，具体看官网</p>\n<p>flutter build apk</p>\n<h3 id=\"升级\"><a href=\"#升级\" class=\"headerlink\" title=\"升级\"></a>升级</h3><ul>\n<li>更新 Flutter SDK 和 packages</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">根目录运行</span><br><span class=\"line\">flutter upgrade</span><br></pre></td></tr></table></figure>\n<ul>\n<li>只更新包</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">手动式-插件官网</span><br><span class=\"line\"></span><br><span class=\"line\">命令式</span><br><span class=\"line\">flutter packages upgrade</span><br><span class=\"line\">flutter packages get</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"适配和打包\"><a href=\"#适配和打包\" class=\"headerlink\" title=\"适配和打包\"></a>适配和打包</h3>","more":"<h3 id=\"解决启动白屏\"><a href=\"#解决启动白屏\" class=\"headerlink\" title=\"解决启动白屏\"></a>解决启动白屏</h3><ul>\n<li>新建的 flutter 项目没有 MainActivity.java，只有 MainActivity.kt,对于已有项目，如果把/ios 和/android 文件夹删掉，运行</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter create -i objc -a java new_app</span><br></pre></td></tr></table></figure>\n<ul>\n<li>flutter 启动应用，初始化 SDK，flutter 的代码加载到内存里面，完成渲染，在这个加载过程中，没有内容显示，所以会出现白屏。</li>\n</ul>\n<p>分别为 android 和 ios 启动屏添加启动屏图片</p>\n<h3 id=\"全面屏适配\"><a href=\"#全面屏适配\" class=\"headerlink\" title=\"全面屏适配\"></a>全面屏适配</h3><ol>\n<li><p>SafeArea 将组件进行包裹即可</p>\n</li>\n<li><p>MediaQuery.of(context).padding 计算顶部和底部的 padding 值</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">final EdgeInsets paddings = MediaQuery.of(context).padding;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android</span><br><span class=\"line\"></span><br><span class=\"line\">AndroidManifest.xml</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--适配全面屏--&gt;</span><br><span class=\"line\">&lt;meta-data</span><br><span class=\"line\">  android:name=&quot;android.max_aspect&quot;</span><br><span class=\"line\">  android:value=&quot;2.3&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"项目优化\"><a href=\"#项目优化\" class=\"headerlink\" title=\"项目优化\"></a>项目优化</h3><ul>\n<li><p>代码优化</p>\n</li>\n<li><p>包大小</p>\n<p>压缩本地图片</p>\n<p>使用单架构 so</p>\n</li>\n<li><p>流畅性优化</p>\n</li>\n<li><p>内存优化</p>\n</li>\n</ul>\n<h3 id=\"Android-打包\"><a href=\"#Android-打包\" class=\"headerlink\" title=\"Android 打包\"></a>Android 打包</h3><ul>\n<li>AndroidMainifest.xml</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">添加APP名：android:label</span><br><span class=\"line\">&lt;application</span><br><span class=\"line\">  android:name=&quot;io.flutter.app.FlutterApplication&quot;</span><br><span class=\"line\">  android:label=&quot;FlutterDemo&quot;</span><br><span class=\"line\">  android:icon=&quot;@mipmap/ic_launcher&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p>main.dart 文件的 title 进行修改</p>\n<ul>\n<li>检查和配置 build.gradle(Module:app) 文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android: &#123;</span><br><span class=\"line\">  compileSdkVersion: 28 //兼容到android28</span><br><span class=\"line\"></span><br><span class=\"line\">  defaultConfig: &#123;</span><br><span class=\"line\">    applicationId &apos;&apos;  //包名</span><br><span class=\"line\">    minSdkVersion 16 //兼容到android最低版本16,也就是安卓4.1</span><br><span class=\"line\">    targetSdkVersion 28</span><br><span class=\"line\">    versionCode 1 //版本</span><br><span class=\"line\">    versionName: &apos;1.0.0&apos; //版本号</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动图标</li>\n</ul>\n<p>res-mipmap-ic_launcher</p>\n<ul>\n<li>APP 签名</li>\n</ul>\n<p>androidStudio 的 build - Generate Signed Bundle / APK</p>\n<p>选择 APK - create new</p>\n<p>创建一个名为 <app dir=\"\">/android/key.properties 的文件，它包含了密钥库位置的定义.填写创建签名的信息</app></p>\n<p>在 gradle 中配置签名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过编辑 &lt;app dir&gt;/android/app/build.gradle 文件来为我们的 app 配置签名：</span><br><span class=\"line\">在 android 代码块之前添加：</span><br><span class=\"line\"></span><br><span class=\"line\">def keystoreProperties = new Properties()</span><br><span class=\"line\">def keystorePropertiesFile = rootProject.file(&apos;key.properties&apos;)</span><br><span class=\"line\">if (keystorePropertiesFile.exists()) &#123;</span><br><span class=\"line\">    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">在 buildTypes 代码块之前添加：</span><br><span class=\"line\"></span><br><span class=\"line\"> signingConfigs &#123;</span><br><span class=\"line\">    release &#123;</span><br><span class=\"line\">      keyAlias keystoreProperties[&apos;keyAlias&apos;]</span><br><span class=\"line\">      keyPassword keystoreProperties[&apos;keyPassword&apos;]</span><br><span class=\"line\">      storeFile keystoreProperties[&apos;storeFile&apos;] ? file(keystoreProperties[&apos;storeFile&apos;]) : null</span><br><span class=\"line\">      storePassword keystoreProperties[&apos;storePassword&apos;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">buildTypes &#123;</span><br><span class=\"line\">  release &#123;</span><br><span class=\"line\">    signingConfig signingConfigs.release</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启用混淆器，具体看官网</p>\n<p>flutter build apk</p>\n<h3 id=\"升级\"><a href=\"#升级\" class=\"headerlink\" title=\"升级\"></a>升级</h3><ul>\n<li>更新 Flutter SDK 和 packages</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">根目录运行</span><br><span class=\"line\">flutter upgrade</span><br></pre></td></tr></table></figure>\n<ul>\n<li>只更新包</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">手动式-插件官网</span><br><span class=\"line\"></span><br><span class=\"line\">命令式</span><br><span class=\"line\">flutter packages upgrade</span><br><span class=\"line\">flutter packages get</span><br></pre></td></tr></table></figure>"},{"title":"H5的支付","date":"2018-09-30T16:00:00.000Z","_content":"### JSSDK微信支付、h5浏览器支付宝支付、微信h5支付\n<!-- more -->\n\n### 微信支付\n#### 引入JS文件\n```\nhttp://res2.wx.qq.com/open/js/jweixin-1.4.0.js \n```\n#### 通过config接口注入权限验证配置\n使用JSSDK的页面必须先配置信息，否则无法使用。配置的信息通过后端接口返回，前端调用。\nchooseWXPay:微信支付的接口\n```\nwx.config({\n    debug: true, // 开启调试模式\n    appId: '', // 必填，公众号的唯一标识\n    timestamp: , // 必填，生成签名的时间戳\n    nonceStr: '', // 必填，生成签名的随机串\n    signature: '',// 必填，签名\n    jsApiList: ['chooseWXPay'] // 必填，需要使用的JS接口列表\n});\n```\n#### 通过ready接口处理成功验证\nconfig信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。\n```\nwx.ready(function(){\n    wx.chooseWXPay({\n        timestamp: , // 支付签名时间戳\n        nonceStr: , // 支付签名随机串，不长于 32 位\n        package:, // 统一支付接口返回的prepay_id参数值，提交格式如：prepay_id=\\*\\*\\*）\n        signType: 'MD5', // 签名方式，默认为'SHA1'，使用新版支付需传入'MD5'\n        paySign: , // 支付签名\n        success: function (res) {\n            if(res.errMsg == \"chooseWXPay:ok\"){\n                alert(\"支付成功\")\n            }else{\n                alert(res.errMsg);\n            }\n        }\n    });\n});\n```\n1.坑：当支付成功时，前端看到支付成功，有个坑可能会出现，就是后端订单的支付信息可能会显示未支付状态\n2.出现的原因：用户支付完成，直接退出，后端未接收到支付完成的回调\n3.解决方法：后端提供支付订单状态接口，在支付成功时调用后端接口来确认订单支付状态\n\n### 非微信浏览器的微信h5支付\n```\nwxpay.mweb_url,直接从后台返回的URL跳转唤起微信支付\nwindow.location.href = wxpay.mweb_url\n```\n后端接口返回wxpay参数下面的mweb_url,前端跳转唤起微信支付即可，前端无需做任何处理\n### 支付宝支付\n1.关于在h5浏览器的支付宝支付，前端直接调用后端接口\n2.后端提供接口alipay里有关于html页面，显示支付宝支付页面，继续支付和已完成支付，点击继续支付即可完成支付\n3.坑：后端提供的接口是否可以跳转支付页面，需要前后端联调\n前端处理\n```\nres => {    \n    const div = document.createElement('div');\n    div.innerHTML = res.html; //接口返回的html\n    document.body.appendChild(div);\n    document.forms.alipaysubmit.submit(); \n}\n```\n","source":"_posts/h5-pay.md","raw":"---\ntitle: H5的支付\ndate: 2018-10-01\ntags: ['wx.chooseWXPay','Alipay']\ncategories: H5\n---\n### JSSDK微信支付、h5浏览器支付宝支付、微信h5支付\n<!-- more -->\n\n### 微信支付\n#### 引入JS文件\n```\nhttp://res2.wx.qq.com/open/js/jweixin-1.4.0.js \n```\n#### 通过config接口注入权限验证配置\n使用JSSDK的页面必须先配置信息，否则无法使用。配置的信息通过后端接口返回，前端调用。\nchooseWXPay:微信支付的接口\n```\nwx.config({\n    debug: true, // 开启调试模式\n    appId: '', // 必填，公众号的唯一标识\n    timestamp: , // 必填，生成签名的时间戳\n    nonceStr: '', // 必填，生成签名的随机串\n    signature: '',// 必填，签名\n    jsApiList: ['chooseWXPay'] // 必填，需要使用的JS接口列表\n});\n```\n#### 通过ready接口处理成功验证\nconfig信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。\n```\nwx.ready(function(){\n    wx.chooseWXPay({\n        timestamp: , // 支付签名时间戳\n        nonceStr: , // 支付签名随机串，不长于 32 位\n        package:, // 统一支付接口返回的prepay_id参数值，提交格式如：prepay_id=\\*\\*\\*）\n        signType: 'MD5', // 签名方式，默认为'SHA1'，使用新版支付需传入'MD5'\n        paySign: , // 支付签名\n        success: function (res) {\n            if(res.errMsg == \"chooseWXPay:ok\"){\n                alert(\"支付成功\")\n            }else{\n                alert(res.errMsg);\n            }\n        }\n    });\n});\n```\n1.坑：当支付成功时，前端看到支付成功，有个坑可能会出现，就是后端订单的支付信息可能会显示未支付状态\n2.出现的原因：用户支付完成，直接退出，后端未接收到支付完成的回调\n3.解决方法：后端提供支付订单状态接口，在支付成功时调用后端接口来确认订单支付状态\n\n### 非微信浏览器的微信h5支付\n```\nwxpay.mweb_url,直接从后台返回的URL跳转唤起微信支付\nwindow.location.href = wxpay.mweb_url\n```\n后端接口返回wxpay参数下面的mweb_url,前端跳转唤起微信支付即可，前端无需做任何处理\n### 支付宝支付\n1.关于在h5浏览器的支付宝支付，前端直接调用后端接口\n2.后端提供接口alipay里有关于html页面，显示支付宝支付页面，继续支付和已完成支付，点击继续支付即可完成支付\n3.坑：后端提供的接口是否可以跳转支付页面，需要前后端联调\n前端处理\n```\nres => {    \n    const div = document.createElement('div');\n    div.innerHTML = res.html; //接口返回的html\n    document.body.appendChild(div);\n    document.forms.alipaysubmit.submit(); \n}\n```\n","slug":"h5-pay","published":1,"updated":"2018-10-09T15:01:50.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq42g0029he6ja3ow5ox4","content":"<h3 id=\"JSSDK微信支付、h5浏览器支付宝支付、微信h5支付\"><a href=\"#JSSDK微信支付、h5浏览器支付宝支付、微信h5支付\" class=\"headerlink\" title=\"JSSDK微信支付、h5浏览器支付宝支付、微信h5支付\"></a>JSSDK微信支付、h5浏览器支付宝支付、微信h5支付</h3><a id=\"more\"></a>\n<h3 id=\"微信支付\"><a href=\"#微信支付\" class=\"headerlink\" title=\"微信支付\"></a>微信支付</h3><h4 id=\"引入JS文件\"><a href=\"#引入JS文件\" class=\"headerlink\" title=\"引入JS文件\"></a>引入JS文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://res2.wx.qq.com/open/js/jweixin-1.4.0.js</span><br></pre></td></tr></table></figure>\n<h4 id=\"通过config接口注入权限验证配置\"><a href=\"#通过config接口注入权限验证配置\" class=\"headerlink\" title=\"通过config接口注入权限验证配置\"></a>通过config接口注入权限验证配置</h4><p>使用JSSDK的页面必须先配置信息，否则无法使用。配置的信息通过后端接口返回，前端调用。<br>chooseWXPay:微信支付的接口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.config(&#123;</span><br><span class=\"line\">    debug: true, // 开启调试模式</span><br><span class=\"line\">    appId: &apos;&apos;, // 必填，公众号的唯一标识</span><br><span class=\"line\">    timestamp: , // 必填，生成签名的时间戳</span><br><span class=\"line\">    nonceStr: &apos;&apos;, // 必填，生成签名的随机串</span><br><span class=\"line\">    signature: &apos;&apos;,// 必填，签名</span><br><span class=\"line\">    jsApiList: [&apos;chooseWXPay&apos;] // 必填，需要使用的JS接口列表</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"通过ready接口处理成功验证\"><a href=\"#通过ready接口处理成功验证\" class=\"headerlink\" title=\"通过ready接口处理成功验证\"></a>通过ready接口处理成功验证</h4><p>config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.ready(function()&#123;</span><br><span class=\"line\">    wx.chooseWXPay(&#123;</span><br><span class=\"line\">        timestamp: , // 支付签名时间戳</span><br><span class=\"line\">        nonceStr: , // 支付签名随机串，不长于 32 位</span><br><span class=\"line\">        package:, // 统一支付接口返回的prepay_id参数值，提交格式如：prepay_id=\\*\\*\\*）</span><br><span class=\"line\">        signType: &apos;MD5&apos;, // 签名方式，默认为&apos;SHA1&apos;，使用新版支付需传入&apos;MD5&apos;</span><br><span class=\"line\">        paySign: , // 支付签名</span><br><span class=\"line\">        success: function (res) &#123;</span><br><span class=\"line\">            if(res.errMsg == &quot;chooseWXPay:ok&quot;)&#123;</span><br><span class=\"line\">                alert(&quot;支付成功&quot;)</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                alert(res.errMsg);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>1.坑：当支付成功时，前端看到支付成功，有个坑可能会出现，就是后端订单的支付信息可能会显示未支付状态<br>2.出现的原因：用户支付完成，直接退出，后端未接收到支付完成的回调<br>3.解决方法：后端提供支付订单状态接口，在支付成功时调用后端接口来确认订单支付状态</p>\n<h3 id=\"非微信浏览器的微信h5支付\"><a href=\"#非微信浏览器的微信h5支付\" class=\"headerlink\" title=\"非微信浏览器的微信h5支付\"></a>非微信浏览器的微信h5支付</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wxpay.mweb_url,直接从后台返回的URL跳转唤起微信支付</span><br><span class=\"line\">window.location.href = wxpay.mweb_url</span><br></pre></td></tr></table></figure>\n<p>后端接口返回wxpay参数下面的mweb_url,前端跳转唤起微信支付即可，前端无需做任何处理</p>\n<h3 id=\"支付宝支付\"><a href=\"#支付宝支付\" class=\"headerlink\" title=\"支付宝支付\"></a>支付宝支付</h3><p>1.关于在h5浏览器的支付宝支付，前端直接调用后端接口<br>2.后端提供接口alipay里有关于html页面，显示支付宝支付页面，继续支付和已完成支付，点击继续支付即可完成支付<br>3.坑：后端提供的接口是否可以跳转支付页面，需要前后端联调<br>前端处理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res =&gt; &#123;    </span><br><span class=\"line\">    const div = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">    div.innerHTML = res.html; //接口返回的html</span><br><span class=\"line\">    document.body.appendChild(div);</span><br><span class=\"line\">    document.forms.alipaysubmit.submit(); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"JSSDK微信支付、h5浏览器支付宝支付、微信h5支付\"><a href=\"#JSSDK微信支付、h5浏览器支付宝支付、微信h5支付\" class=\"headerlink\" title=\"JSSDK微信支付、h5浏览器支付宝支付、微信h5支付\"></a>JSSDK微信支付、h5浏览器支付宝支付、微信h5支付</h3>","more":"<h3 id=\"微信支付\"><a href=\"#微信支付\" class=\"headerlink\" title=\"微信支付\"></a>微信支付</h3><h4 id=\"引入JS文件\"><a href=\"#引入JS文件\" class=\"headerlink\" title=\"引入JS文件\"></a>引入JS文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://res2.wx.qq.com/open/js/jweixin-1.4.0.js</span><br></pre></td></tr></table></figure>\n<h4 id=\"通过config接口注入权限验证配置\"><a href=\"#通过config接口注入权限验证配置\" class=\"headerlink\" title=\"通过config接口注入权限验证配置\"></a>通过config接口注入权限验证配置</h4><p>使用JSSDK的页面必须先配置信息，否则无法使用。配置的信息通过后端接口返回，前端调用。<br>chooseWXPay:微信支付的接口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.config(&#123;</span><br><span class=\"line\">    debug: true, // 开启调试模式</span><br><span class=\"line\">    appId: &apos;&apos;, // 必填，公众号的唯一标识</span><br><span class=\"line\">    timestamp: , // 必填，生成签名的时间戳</span><br><span class=\"line\">    nonceStr: &apos;&apos;, // 必填，生成签名的随机串</span><br><span class=\"line\">    signature: &apos;&apos;,// 必填，签名</span><br><span class=\"line\">    jsApiList: [&apos;chooseWXPay&apos;] // 必填，需要使用的JS接口列表</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"通过ready接口处理成功验证\"><a href=\"#通过ready接口处理成功验证\" class=\"headerlink\" title=\"通过ready接口处理成功验证\"></a>通过ready接口处理成功验证</h4><p>config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.ready(function()&#123;</span><br><span class=\"line\">    wx.chooseWXPay(&#123;</span><br><span class=\"line\">        timestamp: , // 支付签名时间戳</span><br><span class=\"line\">        nonceStr: , // 支付签名随机串，不长于 32 位</span><br><span class=\"line\">        package:, // 统一支付接口返回的prepay_id参数值，提交格式如：prepay_id=\\*\\*\\*）</span><br><span class=\"line\">        signType: &apos;MD5&apos;, // 签名方式，默认为&apos;SHA1&apos;，使用新版支付需传入&apos;MD5&apos;</span><br><span class=\"line\">        paySign: , // 支付签名</span><br><span class=\"line\">        success: function (res) &#123;</span><br><span class=\"line\">            if(res.errMsg == &quot;chooseWXPay:ok&quot;)&#123;</span><br><span class=\"line\">                alert(&quot;支付成功&quot;)</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                alert(res.errMsg);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>1.坑：当支付成功时，前端看到支付成功，有个坑可能会出现，就是后端订单的支付信息可能会显示未支付状态<br>2.出现的原因：用户支付完成，直接退出，后端未接收到支付完成的回调<br>3.解决方法：后端提供支付订单状态接口，在支付成功时调用后端接口来确认订单支付状态</p>\n<h3 id=\"非微信浏览器的微信h5支付\"><a href=\"#非微信浏览器的微信h5支付\" class=\"headerlink\" title=\"非微信浏览器的微信h5支付\"></a>非微信浏览器的微信h5支付</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wxpay.mweb_url,直接从后台返回的URL跳转唤起微信支付</span><br><span class=\"line\">window.location.href = wxpay.mweb_url</span><br></pre></td></tr></table></figure>\n<p>后端接口返回wxpay参数下面的mweb_url,前端跳转唤起微信支付即可，前端无需做任何处理</p>\n<h3 id=\"支付宝支付\"><a href=\"#支付宝支付\" class=\"headerlink\" title=\"支付宝支付\"></a>支付宝支付</h3><p>1.关于在h5浏览器的支付宝支付，前端直接调用后端接口<br>2.后端提供接口alipay里有关于html页面，显示支付宝支付页面，继续支付和已完成支付，点击继续支付即可完成支付<br>3.坑：后端提供的接口是否可以跳转支付页面，需要前后端联调<br>前端处理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res =&gt; &#123;    </span><br><span class=\"line\">    const div = document.createElement(&apos;div&apos;);</span><br><span class=\"line\">    div.innerHTML = res.html; //接口返回的html</span><br><span class=\"line\">    document.body.appendChild(div);</span><br><span class=\"line\">    document.forms.alipaysubmit.submit(); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"JavaScript的作用域和变量提升、函数声明","date":"2019-01-03T15:03:37.000Z","_content":"\n### 什么是作用域\n<!-- more -->\n1. 作用域就是指程序源代码定义变量的区域。\n2. 作用域规定如何查找变量，确定对当前执行代码对变量对访问权限。\n```\nvar value = 1;\n\nfunction foo() {\n    console.log(value);\n}\n\nfunction bar() {\n    var value = 2;\n    foo();\n}\n\nbar();\n```\n首先是bar()函数执行，在bar()函数内部foo()函数执行，先在foo函数对当前作用域进行查找，如果没有，则查找上面一层的代码，也就是 value 等于 1，所以结果会打印 1。\n\n### 顺序执行\n```\nvar foo = function () {\n\n    console.log('foo1');\n\n}\n\nfoo();  // foo1\n\nvar foo = function () {\n\n    console.log('foo2');\n\n}\n\nfoo(); // foo2\n```\n```\nfunction foo() {\n\n    console.log('foo1');\n\n}\n\nfoo();  // foo2\n\nfunction foo() {\n\n    console.log('foo2');\n\n}\n\nfoo(); // foo2\n```\n JavaScript 引擎并非一行一行地分析和执行程序，而是一段一段地分析执行。当执行一段代码的时候，会进行一个“准备工作”，比如第一个例子中的变量提升，和第二个例子中的函数提升。\n\n ### 变量提升\n 1. 通常JS引擎会在正式执行之前先进行一次预编译，在这个过程中，首先将变量声明及函数声明提升至当前作用域的顶端，然后进行接下来的处理。\n 2. 如果在当前作用域存在此声明对变量，无论它在什么地方声明，引用此变量时就会在当前作用域中查找，不会去外层作用域了。\n ```\nvar foo = 3;\n\nfunction hoistVariable() {\n\n    var foo = foo || 5;\n\n    console.log(foo); // 5\n}\n\nhoistVariable();\n ```\n 虽然外层作用域有个foo变量，但函数内是不会去引用的。先在当前作用域寻找foo变量，如果当前作用域foo不存在，则通过作用域链往上继续找foo变量，如果继续不存在而又未定义则报错。\n\n ### 函数提升\n 1. 为什么函数可以在声明之前就可以调用，并且跟变量声明不同的是，它还能得到正确的结果，其实引擎是把函数声明整个地提升到了当前作用域的顶部\n ```\n function hoistFunction() {\n    foo(); // output: I am hoisted\n\n    function foo() {\n        console.log('I am hoisted');\n    }\n}\n\nhoistFunction();\n ```\n 2. 如果在同一个作用域中存在多个同名函数声明，后面出现的将会覆盖前面的函数声明：\n ```\n function hoistFunction() {\n    function foo() {\n        console.log(1);\n    }\n\n    foo(); // output: 2\n\n    function foo() {\n        console.log(2);\n    }\n}\n\nhoistFunction();\n ```\n 3. 函数声明和函数表达式\n ```\n// 函数声明\nfunction foo() {\n    console.log('function declaration');\n}\n\n// 匿名函数表达式\nvar foo = function() {\n    console.log('anonymous function expression');\n};\n\n// 具名函数表达式\nvar foo = function bar() {\n    console.log('named function expression');\n};\n ```\n1. 匿名函数表达式，其实是将一个不带名字的函数声明赋值给了一个变量，\n2. 具名函数表达式，则是带名字的函数赋值给一个变量，需要注意到是，这个函数名只能在此函数内部使用。\n3. 函数表达式可以通过变量访问，所以也存在变量提升同样的效果。\n4. 函数的优先权是最高的，它永远被提升至作用域最顶部，然后才是函数表达式和变量按顺序执行\n","source":"_posts/js-shangxiawen.md","raw":"---\ntitle: JavaScript的作用域和变量提升、函数声明\ndate: 2019-01-03 23:03:37\ntags: ['JavaScript']\ncategories: JavaScript\n---\n\n### 什么是作用域\n<!-- more -->\n1. 作用域就是指程序源代码定义变量的区域。\n2. 作用域规定如何查找变量，确定对当前执行代码对变量对访问权限。\n```\nvar value = 1;\n\nfunction foo() {\n    console.log(value);\n}\n\nfunction bar() {\n    var value = 2;\n    foo();\n}\n\nbar();\n```\n首先是bar()函数执行，在bar()函数内部foo()函数执行，先在foo函数对当前作用域进行查找，如果没有，则查找上面一层的代码，也就是 value 等于 1，所以结果会打印 1。\n\n### 顺序执行\n```\nvar foo = function () {\n\n    console.log('foo1');\n\n}\n\nfoo();  // foo1\n\nvar foo = function () {\n\n    console.log('foo2');\n\n}\n\nfoo(); // foo2\n```\n```\nfunction foo() {\n\n    console.log('foo1');\n\n}\n\nfoo();  // foo2\n\nfunction foo() {\n\n    console.log('foo2');\n\n}\n\nfoo(); // foo2\n```\n JavaScript 引擎并非一行一行地分析和执行程序，而是一段一段地分析执行。当执行一段代码的时候，会进行一个“准备工作”，比如第一个例子中的变量提升，和第二个例子中的函数提升。\n\n ### 变量提升\n 1. 通常JS引擎会在正式执行之前先进行一次预编译，在这个过程中，首先将变量声明及函数声明提升至当前作用域的顶端，然后进行接下来的处理。\n 2. 如果在当前作用域存在此声明对变量，无论它在什么地方声明，引用此变量时就会在当前作用域中查找，不会去外层作用域了。\n ```\nvar foo = 3;\n\nfunction hoistVariable() {\n\n    var foo = foo || 5;\n\n    console.log(foo); // 5\n}\n\nhoistVariable();\n ```\n 虽然外层作用域有个foo变量，但函数内是不会去引用的。先在当前作用域寻找foo变量，如果当前作用域foo不存在，则通过作用域链往上继续找foo变量，如果继续不存在而又未定义则报错。\n\n ### 函数提升\n 1. 为什么函数可以在声明之前就可以调用，并且跟变量声明不同的是，它还能得到正确的结果，其实引擎是把函数声明整个地提升到了当前作用域的顶部\n ```\n function hoistFunction() {\n    foo(); // output: I am hoisted\n\n    function foo() {\n        console.log('I am hoisted');\n    }\n}\n\nhoistFunction();\n ```\n 2. 如果在同一个作用域中存在多个同名函数声明，后面出现的将会覆盖前面的函数声明：\n ```\n function hoistFunction() {\n    function foo() {\n        console.log(1);\n    }\n\n    foo(); // output: 2\n\n    function foo() {\n        console.log(2);\n    }\n}\n\nhoistFunction();\n ```\n 3. 函数声明和函数表达式\n ```\n// 函数声明\nfunction foo() {\n    console.log('function declaration');\n}\n\n// 匿名函数表达式\nvar foo = function() {\n    console.log('anonymous function expression');\n};\n\n// 具名函数表达式\nvar foo = function bar() {\n    console.log('named function expression');\n};\n ```\n1. 匿名函数表达式，其实是将一个不带名字的函数声明赋值给了一个变量，\n2. 具名函数表达式，则是带名字的函数赋值给一个变量，需要注意到是，这个函数名只能在此函数内部使用。\n3. 函数表达式可以通过变量访问，所以也存在变量提升同样的效果。\n4. 函数的优先权是最高的，它永远被提升至作用域最顶部，然后才是函数表达式和变量按顺序执行\n","slug":"js-shangxiawen","published":1,"updated":"2019-01-03T15:27:18.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq42h002bhe6jxq6ug25b","content":"<h3 id=\"什么是作用域\"><a href=\"#什么是作用域\" class=\"headerlink\" title=\"什么是作用域\"></a>什么是作用域</h3><a id=\"more\"></a>\n<ol>\n<li>作用域就是指程序源代码定义变量的区域。</li>\n<li>作用域规定如何查找变量，确定对当前执行代码对变量对访问权限。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var value = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    console.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function bar() &#123;</span><br><span class=\"line\">    var value = 2;</span><br><span class=\"line\">    foo();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bar();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>首先是bar()函数执行，在bar()函数内部foo()函数执行，先在foo函数对当前作用域进行查找，如果没有，则查找上面一层的代码，也就是 value 等于 1，所以结果会打印 1。</p>\n<h3 id=\"顺序执行\"><a href=\"#顺序执行\" class=\"headerlink\" title=\"顺序执行\"></a>顺序执行</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var foo = function () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;foo1&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo();  // foo1</span><br><span class=\"line\"></span><br><span class=\"line\">var foo = function () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;foo2&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo(); // foo2</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;foo1&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo();  // foo2</span><br><span class=\"line\"></span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;foo2&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo(); // foo2</span><br></pre></td></tr></table></figure>\n<p> JavaScript 引擎并非一行一行地分析和执行程序，而是一段一段地分析执行。当执行一段代码的时候，会进行一个“准备工作”，比如第一个例子中的变量提升，和第二个例子中的函数提升。</p>\n<h3 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h3><ol>\n<li>通常JS引擎会在正式执行之前先进行一次预编译，在这个过程中，首先将变量声明及函数声明提升至当前作用域的顶端，然后进行接下来的处理。</li>\n<li><p>如果在当前作用域存在此声明对变量，无论它在什么地方声明，引用此变量时就会在当前作用域中查找，不会去外层作用域了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var foo = 3;</span><br><span class=\"line\"></span><br><span class=\"line\">function hoistVariable() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var foo = foo || 5;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(foo); // 5</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">hoistVariable();</span><br></pre></td></tr></table></figure>\n<p>虽然外层作用域有个foo变量，但函数内是不会去引用的。先在当前作用域寻找foo变量，如果当前作用域foo不存在，则通过作用域链往上继续找foo变量，如果继续不存在而又未定义则报错。</p>\n<h3 id=\"函数提升\"><a href=\"#函数提升\" class=\"headerlink\" title=\"函数提升\"></a>函数提升</h3></li>\n<li><p>为什么函数可以在声明之前就可以调用，并且跟变量声明不同的是，它还能得到正确的结果，其实引擎是把函数声明整个地提升到了当前作用域的顶部</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> function hoistFunction() &#123;</span><br><span class=\"line\">    foo(); // output: I am hoisted</span><br><span class=\"line\"></span><br><span class=\"line\">    function foo() &#123;</span><br><span class=\"line\">        console.log(&apos;I am hoisted&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">hoistFunction();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果在同一个作用域中存在多个同名函数声明，后面出现的将会覆盖前面的函数声明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> function hoistFunction() &#123;</span><br><span class=\"line\">    function foo() &#123;</span><br><span class=\"line\">        console.log(1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    foo(); // output: 2</span><br><span class=\"line\"></span><br><span class=\"line\">    function foo() &#123;</span><br><span class=\"line\">        console.log(2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">hoistFunction();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数声明和函数表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 函数声明</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    console.log(&apos;function declaration&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 匿名函数表达式</span><br><span class=\"line\">var foo = function() &#123;</span><br><span class=\"line\">    console.log(&apos;anonymous function expression&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 具名函数表达式</span><br><span class=\"line\">var foo = function bar() &#123;</span><br><span class=\"line\">    console.log(&apos;named function expression&apos;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li>匿名函数表达式，其实是将一个不带名字的函数声明赋值给了一个变量，</li>\n<li>具名函数表达式，则是带名字的函数赋值给一个变量，需要注意到是，这个函数名只能在此函数内部使用。</li>\n<li>函数表达式可以通过变量访问，所以也存在变量提升同样的效果。</li>\n<li>函数的优先权是最高的，它永远被提升至作用域最顶部，然后才是函数表达式和变量按顺序执行</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"什么是作用域\"><a href=\"#什么是作用域\" class=\"headerlink\" title=\"什么是作用域\"></a>什么是作用域</h3>","more":"<ol>\n<li>作用域就是指程序源代码定义变量的区域。</li>\n<li>作用域规定如何查找变量，确定对当前执行代码对变量对访问权限。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var value = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    console.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function bar() &#123;</span><br><span class=\"line\">    var value = 2;</span><br><span class=\"line\">    foo();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">bar();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>首先是bar()函数执行，在bar()函数内部foo()函数执行，先在foo函数对当前作用域进行查找，如果没有，则查找上面一层的代码，也就是 value 等于 1，所以结果会打印 1。</p>\n<h3 id=\"顺序执行\"><a href=\"#顺序执行\" class=\"headerlink\" title=\"顺序执行\"></a>顺序执行</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var foo = function () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;foo1&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo();  // foo1</span><br><span class=\"line\"></span><br><span class=\"line\">var foo = function () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;foo2&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo(); // foo2</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;foo1&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo();  // foo2</span><br><span class=\"line\"></span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;foo2&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo(); // foo2</span><br></pre></td></tr></table></figure>\n<p> JavaScript 引擎并非一行一行地分析和执行程序，而是一段一段地分析执行。当执行一段代码的时候，会进行一个“准备工作”，比如第一个例子中的变量提升，和第二个例子中的函数提升。</p>\n<h3 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h3><ol>\n<li>通常JS引擎会在正式执行之前先进行一次预编译，在这个过程中，首先将变量声明及函数声明提升至当前作用域的顶端，然后进行接下来的处理。</li>\n<li><p>如果在当前作用域存在此声明对变量，无论它在什么地方声明，引用此变量时就会在当前作用域中查找，不会去外层作用域了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var foo = 3;</span><br><span class=\"line\"></span><br><span class=\"line\">function hoistVariable() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    var foo = foo || 5;</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(foo); // 5</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">hoistVariable();</span><br></pre></td></tr></table></figure>\n<p>虽然外层作用域有个foo变量，但函数内是不会去引用的。先在当前作用域寻找foo变量，如果当前作用域foo不存在，则通过作用域链往上继续找foo变量，如果继续不存在而又未定义则报错。</p>\n<h3 id=\"函数提升\"><a href=\"#函数提升\" class=\"headerlink\" title=\"函数提升\"></a>函数提升</h3></li>\n<li><p>为什么函数可以在声明之前就可以调用，并且跟变量声明不同的是，它还能得到正确的结果，其实引擎是把函数声明整个地提升到了当前作用域的顶部</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> function hoistFunction() &#123;</span><br><span class=\"line\">    foo(); // output: I am hoisted</span><br><span class=\"line\"></span><br><span class=\"line\">    function foo() &#123;</span><br><span class=\"line\">        console.log(&apos;I am hoisted&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">hoistFunction();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果在同一个作用域中存在多个同名函数声明，后面出现的将会覆盖前面的函数声明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> function hoistFunction() &#123;</span><br><span class=\"line\">    function foo() &#123;</span><br><span class=\"line\">        console.log(1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    foo(); // output: 2</span><br><span class=\"line\"></span><br><span class=\"line\">    function foo() &#123;</span><br><span class=\"line\">        console.log(2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">hoistFunction();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数声明和函数表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 函数声明</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">    console.log(&apos;function declaration&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 匿名函数表达式</span><br><span class=\"line\">var foo = function() &#123;</span><br><span class=\"line\">    console.log(&apos;anonymous function expression&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 具名函数表达式</span><br><span class=\"line\">var foo = function bar() &#123;</span><br><span class=\"line\">    console.log(&apos;named function expression&apos;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li>匿名函数表达式，其实是将一个不带名字的函数声明赋值给了一个变量，</li>\n<li>具名函数表达式，则是带名字的函数赋值给一个变量，需要注意到是，这个函数名只能在此函数内部使用。</li>\n<li>函数表达式可以通过变量访问，所以也存在变量提升同样的效果。</li>\n<li>函数的优先权是最高的，它永远被提升至作用域最顶部，然后才是函数表达式和变量按顺序执行</li>\n</ol>"},{"title":"令牌无感知刷新","date":"2019-08-29T08:45:13.000Z","_content":"\n### 令牌无感知刷新\n<!-- more -->\n\n![image](/images/token.jpg)\n\n### h5   \n1. 把用户的账号密码保存在缓存里，从缓存中读取账号密码获取token\n\n2. access_token和refresh_token双令牌\n如果access_token过期，用refresh_token重新获取access_token。\n如果refresh_token也过期的情况下，每次获取access_token,同时刷新refresh_token,解决refresh_token过期时间\n\n### 小程序\n1. 小程序启动时，验证令牌是否合法，合法不做任何处理，不合法发放新的令牌\n\n2. 正常情况下，正常携带令牌。令牌无效，返回code值进行判断处理，重新获取令牌，接口请求进行二次重发\n\n```\n// # 解构\nclass HTTP {\n    request({\n        url,\n        data = {},\n        method = 'GET'\n    }) {\n        return new Promise((resolve, reject) => {\n            this._request(url, resolve, reject, data, method)\n        })\n    }\n    // 2小时\n    // token1 1小时59分59秒 超过2小时\n    // 退出 \n    // 自动 无感知帮助他重新刷新令牌\n    // 退出 短时间 二次重发机制\n    _request(url, resolve, reject, data = {}, method = 'GET', noRefetch = false) {\n        wx.request({\n            url: config.api_base_url + url,\n            method: method,\n            data: data,\n            header: {\n                'content-type': 'application/json',\n                Authorization: this._encode()\n            },\n            success: (res) => {\n                const code = res.statusCode.toString()\n                if (code.startsWith('2')) {\n                    resolve(res.data)\n                } else {\n                    if (code == '403') {\n                        if (!noRefetch) {\n                            this._refetch(\n                                url,\n                                resolve,\n                                reject,\n                                data,\n                                method\n                            )\n                        }\n                    } else {\n                        reject()\n                        const error_code = res.data.error_code\n                        this._show_error(error_code)\n                    }\n                }\n            },\n            fail: (err) => {\n                reject()\n                this._show_error(1)\n            }\n        })\n\n    }\n\n    _show_error(error_code) {\n        if (!error_code) {\n            error_code = 1\n        }\n        const tip = tips[error_code]\n        wx.showToast({\n            title: tip ? tip : tips[1],\n            icon: 'none',\n            duration: 2000\n        })\n    }\n\n    _refetch(...param) {\n        var token = new Token();\n        token.getTokenFromServer((token) => {\n            this._request(...param, true);\n        });\n    }\n\n    _encode() {\n        const token = wx.getStorageSync('token')\n        const base64 = new Base64()\n        const result = base64.encode(token + ':')\n        return 'Basic ' + result\n    }\n\n\n}\n```\n\n```\nclass Token {\n    constructor() {\n        this.verifyUrl = config.api_base_url + 'token/verify';\n        this.tokenUrl = config.api_base_url + 'token';\n    }\n\n    verify() {\n        var token = wx.getStorageSync('token');\n        if (!token) {\n            this.getTokenFromServer();\n        } else {\n            this._veirfyFromServer(token);\n        }\n    }\n\n    _veirfyFromServer(token) {\n        var that = this;\n        wx.request({\n            url: that.verifyUrl,\n            method: 'POST',\n            data: {\n                token: token\n            },\n            success: function (res) {\n                console.log(res)\n                var valid = res.data.isValid;\n                if (!valid) {\n                    that.getTokenFromServer();\n                }\n            }\n        })\n    }\n\n    getTokenFromServer(callBack) {\n        var that = this;\n        wx.login({\n            success: function (res) {\n                wx.request({\n                    url: that.tokenUrl,\n                    method: 'POST',\n                    data: {\n                        account: res.code,\n                        type: 100\n                    },\n                    success: function (res) {\n                        wx.setStorageSync('token', res.data.token);\n                        console.log(res)\n                        callBack && callBack(res.data.token);\n                    }\n                })\n            }\n        })\n    }\n}\n```\n\n```\napp.js\n\nApp({\n    onLaunch: function () {\n        const token = new Token()\n        token.verify()\n    }\n})\n```\n\n\n","source":"_posts/js-token.md","raw":"---\ntitle: 令牌无感知刷新\ndate: 2019-08-29 16:45:13\ntags: ['JavaScript']\ncategories: JavaScript\n---\n\n### 令牌无感知刷新\n<!-- more -->\n\n![image](/images/token.jpg)\n\n### h5   \n1. 把用户的账号密码保存在缓存里，从缓存中读取账号密码获取token\n\n2. access_token和refresh_token双令牌\n如果access_token过期，用refresh_token重新获取access_token。\n如果refresh_token也过期的情况下，每次获取access_token,同时刷新refresh_token,解决refresh_token过期时间\n\n### 小程序\n1. 小程序启动时，验证令牌是否合法，合法不做任何处理，不合法发放新的令牌\n\n2. 正常情况下，正常携带令牌。令牌无效，返回code值进行判断处理，重新获取令牌，接口请求进行二次重发\n\n```\n// # 解构\nclass HTTP {\n    request({\n        url,\n        data = {},\n        method = 'GET'\n    }) {\n        return new Promise((resolve, reject) => {\n            this._request(url, resolve, reject, data, method)\n        })\n    }\n    // 2小时\n    // token1 1小时59分59秒 超过2小时\n    // 退出 \n    // 自动 无感知帮助他重新刷新令牌\n    // 退出 短时间 二次重发机制\n    _request(url, resolve, reject, data = {}, method = 'GET', noRefetch = false) {\n        wx.request({\n            url: config.api_base_url + url,\n            method: method,\n            data: data,\n            header: {\n                'content-type': 'application/json',\n                Authorization: this._encode()\n            },\n            success: (res) => {\n                const code = res.statusCode.toString()\n                if (code.startsWith('2')) {\n                    resolve(res.data)\n                } else {\n                    if (code == '403') {\n                        if (!noRefetch) {\n                            this._refetch(\n                                url,\n                                resolve,\n                                reject,\n                                data,\n                                method\n                            )\n                        }\n                    } else {\n                        reject()\n                        const error_code = res.data.error_code\n                        this._show_error(error_code)\n                    }\n                }\n            },\n            fail: (err) => {\n                reject()\n                this._show_error(1)\n            }\n        })\n\n    }\n\n    _show_error(error_code) {\n        if (!error_code) {\n            error_code = 1\n        }\n        const tip = tips[error_code]\n        wx.showToast({\n            title: tip ? tip : tips[1],\n            icon: 'none',\n            duration: 2000\n        })\n    }\n\n    _refetch(...param) {\n        var token = new Token();\n        token.getTokenFromServer((token) => {\n            this._request(...param, true);\n        });\n    }\n\n    _encode() {\n        const token = wx.getStorageSync('token')\n        const base64 = new Base64()\n        const result = base64.encode(token + ':')\n        return 'Basic ' + result\n    }\n\n\n}\n```\n\n```\nclass Token {\n    constructor() {\n        this.verifyUrl = config.api_base_url + 'token/verify';\n        this.tokenUrl = config.api_base_url + 'token';\n    }\n\n    verify() {\n        var token = wx.getStorageSync('token');\n        if (!token) {\n            this.getTokenFromServer();\n        } else {\n            this._veirfyFromServer(token);\n        }\n    }\n\n    _veirfyFromServer(token) {\n        var that = this;\n        wx.request({\n            url: that.verifyUrl,\n            method: 'POST',\n            data: {\n                token: token\n            },\n            success: function (res) {\n                console.log(res)\n                var valid = res.data.isValid;\n                if (!valid) {\n                    that.getTokenFromServer();\n                }\n            }\n        })\n    }\n\n    getTokenFromServer(callBack) {\n        var that = this;\n        wx.login({\n            success: function (res) {\n                wx.request({\n                    url: that.tokenUrl,\n                    method: 'POST',\n                    data: {\n                        account: res.code,\n                        type: 100\n                    },\n                    success: function (res) {\n                        wx.setStorageSync('token', res.data.token);\n                        console.log(res)\n                        callBack && callBack(res.data.token);\n                    }\n                })\n            }\n        })\n    }\n}\n```\n\n```\napp.js\n\nApp({\n    onLaunch: function () {\n        const token = new Token()\n        token.verify()\n    }\n})\n```\n\n\n","slug":"js-token","published":1,"updated":"2019-08-29T08:53:28.825Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq42j002ghe6jjfionoxq","content":"<h3 id=\"令牌无感知刷新\"><a href=\"#令牌无感知刷新\" class=\"headerlink\" title=\"令牌无感知刷新\"></a>令牌无感知刷新</h3><a id=\"more\"></a>\n<p><img src=\"/images/token.jpg\" alt=\"image\"></p>\n<h3 id=\"h5\"><a href=\"#h5\" class=\"headerlink\" title=\"h5\"></a>h5</h3><ol>\n<li><p>把用户的账号密码保存在缓存里，从缓存中读取账号密码获取token</p>\n</li>\n<li><p>access_token和refresh_token双令牌<br>如果access_token过期，用refresh_token重新获取access_token。<br>如果refresh_token也过期的情况下，每次获取access_token,同时刷新refresh_token,解决refresh_token过期时间</p>\n</li>\n</ol>\n<h3 id=\"小程序\"><a href=\"#小程序\" class=\"headerlink\" title=\"小程序\"></a>小程序</h3><ol>\n<li><p>小程序启动时，验证令牌是否合法，合法不做任何处理，不合法发放新的令牌</p>\n</li>\n<li><p>正常情况下，正常携带令牌。令牌无效，返回code值进行判断处理，重新获取令牌，接口请求进行二次重发</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// # 解构</span><br><span class=\"line\">class HTTP &#123;</span><br><span class=\"line\">    request(&#123;</span><br><span class=\"line\">        url,</span><br><span class=\"line\">        data = &#123;&#125;,</span><br><span class=\"line\">        method = &apos;GET&apos;</span><br><span class=\"line\">    &#125;) &#123;</span><br><span class=\"line\">        return new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">            this._request(url, resolve, reject, data, method)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 2小时</span><br><span class=\"line\">    // token1 1小时59分59秒 超过2小时</span><br><span class=\"line\">    // 退出 </span><br><span class=\"line\">    // 自动 无感知帮助他重新刷新令牌</span><br><span class=\"line\">    // 退出 短时间 二次重发机制</span><br><span class=\"line\">    _request(url, resolve, reject, data = &#123;&#125;, method = &apos;GET&apos;, noRefetch = false) &#123;</span><br><span class=\"line\">        wx.request(&#123;</span><br><span class=\"line\">            url: config.api_base_url + url,</span><br><span class=\"line\">            method: method,</span><br><span class=\"line\">            data: data,</span><br><span class=\"line\">            header: &#123;</span><br><span class=\"line\">                &apos;content-type&apos;: &apos;application/json&apos;,</span><br><span class=\"line\">                Authorization: this._encode()</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            success: (res) =&gt; &#123;</span><br><span class=\"line\">                const code = res.statusCode.toString()</span><br><span class=\"line\">                if (code.startsWith(&apos;2&apos;)) &#123;</span><br><span class=\"line\">                    resolve(res.data)</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    if (code == &apos;403&apos;) &#123;</span><br><span class=\"line\">                        if (!noRefetch) &#123;</span><br><span class=\"line\">                            this._refetch(</span><br><span class=\"line\">                                url,</span><br><span class=\"line\">                                resolve,</span><br><span class=\"line\">                                reject,</span><br><span class=\"line\">                                data,</span><br><span class=\"line\">                                method</span><br><span class=\"line\">                            )</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        reject()</span><br><span class=\"line\">                        const error_code = res.data.error_code</span><br><span class=\"line\">                        this._show_error(error_code)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            fail: (err) =&gt; &#123;</span><br><span class=\"line\">                reject()</span><br><span class=\"line\">                this._show_error(1)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    _show_error(error_code) &#123;</span><br><span class=\"line\">        if (!error_code) &#123;</span><br><span class=\"line\">            error_code = 1</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        const tip = tips[error_code]</span><br><span class=\"line\">        wx.showToast(&#123;</span><br><span class=\"line\">            title: tip ? tip : tips[1],</span><br><span class=\"line\">            icon: &apos;none&apos;,</span><br><span class=\"line\">            duration: 2000</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    _refetch(...param) &#123;</span><br><span class=\"line\">        var token = new Token();</span><br><span class=\"line\">        token.getTokenFromServer((token) =&gt; &#123;</span><br><span class=\"line\">            this._request(...param, true);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    _encode() &#123;</span><br><span class=\"line\">        const token = wx.getStorageSync(&apos;token&apos;)</span><br><span class=\"line\">        const base64 = new Base64()</span><br><span class=\"line\">        const result = base64.encode(token + &apos;:&apos;)</span><br><span class=\"line\">        return &apos;Basic &apos; + result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Token &#123;</span><br><span class=\"line\">    constructor() &#123;</span><br><span class=\"line\">        this.verifyUrl = config.api_base_url + &apos;token/verify&apos;;</span><br><span class=\"line\">        this.tokenUrl = config.api_base_url + &apos;token&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    verify() &#123;</span><br><span class=\"line\">        var token = wx.getStorageSync(&apos;token&apos;);</span><br><span class=\"line\">        if (!token) &#123;</span><br><span class=\"line\">            this.getTokenFromServer();</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            this._veirfyFromServer(token);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    _veirfyFromServer(token) &#123;</span><br><span class=\"line\">        var that = this;</span><br><span class=\"line\">        wx.request(&#123;</span><br><span class=\"line\">            url: that.verifyUrl,</span><br><span class=\"line\">            method: &apos;POST&apos;,</span><br><span class=\"line\">            data: &#123;</span><br><span class=\"line\">                token: token</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            success: function (res) &#123;</span><br><span class=\"line\">                console.log(res)</span><br><span class=\"line\">                var valid = res.data.isValid;</span><br><span class=\"line\">                if (!valid) &#123;</span><br><span class=\"line\">                    that.getTokenFromServer();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getTokenFromServer(callBack) &#123;</span><br><span class=\"line\">        var that = this;</span><br><span class=\"line\">        wx.login(&#123;</span><br><span class=\"line\">            success: function (res) &#123;</span><br><span class=\"line\">                wx.request(&#123;</span><br><span class=\"line\">                    url: that.tokenUrl,</span><br><span class=\"line\">                    method: &apos;POST&apos;,</span><br><span class=\"line\">                    data: &#123;</span><br><span class=\"line\">                        account: res.code,</span><br><span class=\"line\">                        type: 100</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    success: function (res) &#123;</span><br><span class=\"line\">                        wx.setStorageSync(&apos;token&apos;, res.data.token);</span><br><span class=\"line\">                        console.log(res)</span><br><span class=\"line\">                        callBack &amp;&amp; callBack(res.data.token);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.js</span><br><span class=\"line\"></span><br><span class=\"line\">App(&#123;</span><br><span class=\"line\">    onLaunch: function () &#123;</span><br><span class=\"line\">        const token = new Token()</span><br><span class=\"line\">        token.verify()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"令牌无感知刷新\"><a href=\"#令牌无感知刷新\" class=\"headerlink\" title=\"令牌无感知刷新\"></a>令牌无感知刷新</h3>","more":"<p><img src=\"/images/token.jpg\" alt=\"image\"></p>\n<h3 id=\"h5\"><a href=\"#h5\" class=\"headerlink\" title=\"h5\"></a>h5</h3><ol>\n<li><p>把用户的账号密码保存在缓存里，从缓存中读取账号密码获取token</p>\n</li>\n<li><p>access_token和refresh_token双令牌<br>如果access_token过期，用refresh_token重新获取access_token。<br>如果refresh_token也过期的情况下，每次获取access_token,同时刷新refresh_token,解决refresh_token过期时间</p>\n</li>\n</ol>\n<h3 id=\"小程序\"><a href=\"#小程序\" class=\"headerlink\" title=\"小程序\"></a>小程序</h3><ol>\n<li><p>小程序启动时，验证令牌是否合法，合法不做任何处理，不合法发放新的令牌</p>\n</li>\n<li><p>正常情况下，正常携带令牌。令牌无效，返回code值进行判断处理，重新获取令牌，接口请求进行二次重发</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// # 解构</span><br><span class=\"line\">class HTTP &#123;</span><br><span class=\"line\">    request(&#123;</span><br><span class=\"line\">        url,</span><br><span class=\"line\">        data = &#123;&#125;,</span><br><span class=\"line\">        method = &apos;GET&apos;</span><br><span class=\"line\">    &#125;) &#123;</span><br><span class=\"line\">        return new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">            this._request(url, resolve, reject, data, method)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 2小时</span><br><span class=\"line\">    // token1 1小时59分59秒 超过2小时</span><br><span class=\"line\">    // 退出 </span><br><span class=\"line\">    // 自动 无感知帮助他重新刷新令牌</span><br><span class=\"line\">    // 退出 短时间 二次重发机制</span><br><span class=\"line\">    _request(url, resolve, reject, data = &#123;&#125;, method = &apos;GET&apos;, noRefetch = false) &#123;</span><br><span class=\"line\">        wx.request(&#123;</span><br><span class=\"line\">            url: config.api_base_url + url,</span><br><span class=\"line\">            method: method,</span><br><span class=\"line\">            data: data,</span><br><span class=\"line\">            header: &#123;</span><br><span class=\"line\">                &apos;content-type&apos;: &apos;application/json&apos;,</span><br><span class=\"line\">                Authorization: this._encode()</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            success: (res) =&gt; &#123;</span><br><span class=\"line\">                const code = res.statusCode.toString()</span><br><span class=\"line\">                if (code.startsWith(&apos;2&apos;)) &#123;</span><br><span class=\"line\">                    resolve(res.data)</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    if (code == &apos;403&apos;) &#123;</span><br><span class=\"line\">                        if (!noRefetch) &#123;</span><br><span class=\"line\">                            this._refetch(</span><br><span class=\"line\">                                url,</span><br><span class=\"line\">                                resolve,</span><br><span class=\"line\">                                reject,</span><br><span class=\"line\">                                data,</span><br><span class=\"line\">                                method</span><br><span class=\"line\">                            )</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        reject()</span><br><span class=\"line\">                        const error_code = res.data.error_code</span><br><span class=\"line\">                        this._show_error(error_code)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            fail: (err) =&gt; &#123;</span><br><span class=\"line\">                reject()</span><br><span class=\"line\">                this._show_error(1)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    _show_error(error_code) &#123;</span><br><span class=\"line\">        if (!error_code) &#123;</span><br><span class=\"line\">            error_code = 1</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        const tip = tips[error_code]</span><br><span class=\"line\">        wx.showToast(&#123;</span><br><span class=\"line\">            title: tip ? tip : tips[1],</span><br><span class=\"line\">            icon: &apos;none&apos;,</span><br><span class=\"line\">            duration: 2000</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    _refetch(...param) &#123;</span><br><span class=\"line\">        var token = new Token();</span><br><span class=\"line\">        token.getTokenFromServer((token) =&gt; &#123;</span><br><span class=\"line\">            this._request(...param, true);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    _encode() &#123;</span><br><span class=\"line\">        const token = wx.getStorageSync(&apos;token&apos;)</span><br><span class=\"line\">        const base64 = new Base64()</span><br><span class=\"line\">        const result = base64.encode(token + &apos;:&apos;)</span><br><span class=\"line\">        return &apos;Basic &apos; + result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Token &#123;</span><br><span class=\"line\">    constructor() &#123;</span><br><span class=\"line\">        this.verifyUrl = config.api_base_url + &apos;token/verify&apos;;</span><br><span class=\"line\">        this.tokenUrl = config.api_base_url + &apos;token&apos;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    verify() &#123;</span><br><span class=\"line\">        var token = wx.getStorageSync(&apos;token&apos;);</span><br><span class=\"line\">        if (!token) &#123;</span><br><span class=\"line\">            this.getTokenFromServer();</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            this._veirfyFromServer(token);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    _veirfyFromServer(token) &#123;</span><br><span class=\"line\">        var that = this;</span><br><span class=\"line\">        wx.request(&#123;</span><br><span class=\"line\">            url: that.verifyUrl,</span><br><span class=\"line\">            method: &apos;POST&apos;,</span><br><span class=\"line\">            data: &#123;</span><br><span class=\"line\">                token: token</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            success: function (res) &#123;</span><br><span class=\"line\">                console.log(res)</span><br><span class=\"line\">                var valid = res.data.isValid;</span><br><span class=\"line\">                if (!valid) &#123;</span><br><span class=\"line\">                    that.getTokenFromServer();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    getTokenFromServer(callBack) &#123;</span><br><span class=\"line\">        var that = this;</span><br><span class=\"line\">        wx.login(&#123;</span><br><span class=\"line\">            success: function (res) &#123;</span><br><span class=\"line\">                wx.request(&#123;</span><br><span class=\"line\">                    url: that.tokenUrl,</span><br><span class=\"line\">                    method: &apos;POST&apos;,</span><br><span class=\"line\">                    data: &#123;</span><br><span class=\"line\">                        account: res.code,</span><br><span class=\"line\">                        type: 100</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    success: function (res) &#123;</span><br><span class=\"line\">                        wx.setStorageSync(&apos;token&apos;, res.data.token);</span><br><span class=\"line\">                        console.log(res)</span><br><span class=\"line\">                        callBack &amp;&amp; callBack(res.data.token);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.js</span><br><span class=\"line\"></span><br><span class=\"line\">App(&#123;</span><br><span class=\"line\">    onLaunch: function () &#123;</span><br><span class=\"line\">        const token = new Token()</span><br><span class=\"line\">        token.verify()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>"},{"title":"moment在vue时间格式化","date":"2018-10-09T16:00:00.000Z","_content":"### Vue--moment时间格式插件安装和使用\n<!-- more -->\n\n### [moment文档](http://momentjs.cn/)\n\n### 安装插件\n```\nyarn add moment -S\n```\n\n### 导入使用\n```\nimport moment from 'moment'\n\nfilters: {\n    dateyear(time){\n        return moment(time*1000).format(\"YYYY年MM月DD日\")\n    },\n    formatDate(time) {\n        return moment(time*1000).format(\"YYYY-MM-DD HH:mm:ss\")\n    }\n},\n```\nfilters过滤器，time时间戳的形参，time为什么要乘以1000？因为我公司的后端是PHP，PHP返回的时间戳需要乘以1000,格式化的时间才准确显示。\n```\n<template>\n    <div>{{item.add_time | formatDate}}</div>\n</template>\n```\n在vue模版时间格式化的显示","source":"_posts/moment.md","raw":"---\ntitle: moment在vue时间格式化\ndate: 2018-10-10\ntags: [\"vue\"]\ncategories: vue\n---\n### Vue--moment时间格式插件安装和使用\n<!-- more -->\n\n### [moment文档](http://momentjs.cn/)\n\n### 安装插件\n```\nyarn add moment -S\n```\n\n### 导入使用\n```\nimport moment from 'moment'\n\nfilters: {\n    dateyear(time){\n        return moment(time*1000).format(\"YYYY年MM月DD日\")\n    },\n    formatDate(time) {\n        return moment(time*1000).format(\"YYYY-MM-DD HH:mm:ss\")\n    }\n},\n```\nfilters过滤器，time时间戳的形参，time为什么要乘以1000？因为我公司的后端是PHP，PHP返回的时间戳需要乘以1000,格式化的时间才准确显示。\n```\n<template>\n    <div>{{item.add_time | formatDate}}</div>\n</template>\n```\n在vue模版时间格式化的显示","slug":"moment","published":1,"updated":"2018-10-10T13:44:04.946Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq42k002jhe6jqdtbtwkn","content":"<h3 id=\"Vue–moment时间格式插件安装和使用\"><a href=\"#Vue–moment时间格式插件安装和使用\" class=\"headerlink\" title=\"Vue–moment时间格式插件安装和使用\"></a>Vue–moment时间格式插件安装和使用</h3><a id=\"more\"></a>\n<h3 id=\"moment文档\"><a href=\"#moment文档\" class=\"headerlink\" title=\"moment文档\"></a><a href=\"http://momentjs.cn/\" target=\"_blank\" rel=\"noopener\">moment文档</a></h3><h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add moment -S</span><br></pre></td></tr></table></figure>\n<h3 id=\"导入使用\"><a href=\"#导入使用\" class=\"headerlink\" title=\"导入使用\"></a>导入使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import moment from &apos;moment&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">filters: &#123;</span><br><span class=\"line\">    dateyear(time)&#123;</span><br><span class=\"line\">        return moment(time*1000).format(&quot;YYYY年MM月DD日&quot;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    formatDate(time) &#123;</span><br><span class=\"line\">        return moment(time*1000).format(&quot;YYYY-MM-DD HH:mm:ss&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>filters过滤器，time时间戳的形参，time为什么要乘以1000？因为我公司的后端是PHP，PHP返回的时间戳需要乘以1000,格式化的时间才准确显示。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;&#123;&#123;item.add_time | formatDate&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在vue模版时间格式化的显示</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"Vue–moment时间格式插件安装和使用\"><a href=\"#Vue–moment时间格式插件安装和使用\" class=\"headerlink\" title=\"Vue–moment时间格式插件安装和使用\"></a>Vue–moment时间格式插件安装和使用</h3>","more":"<h3 id=\"moment文档\"><a href=\"#moment文档\" class=\"headerlink\" title=\"moment文档\"></a><a href=\"http://momentjs.cn/\" target=\"_blank\" rel=\"noopener\">moment文档</a></h3><h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add moment -S</span><br></pre></td></tr></table></figure>\n<h3 id=\"导入使用\"><a href=\"#导入使用\" class=\"headerlink\" title=\"导入使用\"></a>导入使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import moment from &apos;moment&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">filters: &#123;</span><br><span class=\"line\">    dateyear(time)&#123;</span><br><span class=\"line\">        return moment(time*1000).format(&quot;YYYY年MM月DD日&quot;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    formatDate(time) &#123;</span><br><span class=\"line\">        return moment(time*1000).format(&quot;YYYY-MM-DD HH:mm:ss&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>filters过滤器，time时间戳的形参，time为什么要乘以1000？因为我公司的后端是PHP，PHP返回的时间戳需要乘以1000,格式化的时间才准确显示。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;&#123;&#123;item.add_time | formatDate&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在vue模版时间格式化的显示</p>"},{"title":"Node.js-http","date":"2019-05-29T15:40:30.000Z","_content":"\n### Node.js处理http请求\n<!-- more -->\n\n### 输入url，发生什么\n1. DNS解析，建立TCP连接，发送http请求\nDNS解析：通过域名解析到一个ip地址，Remote Address（ip地址）\n\n2. server接收到http请求，处理，并返回\n\n3. 客户端收到返回数据，处理数据（如渲染页面，执行js）\n\n### 处理get请求\n#### 示例\n```\nconst http = require('http')\n\nconst server = http.createServer( (req,res) => {\n    res.end('hello world')\n})\n\nserver.listen(8000)\n```\n\n#### get请求\n1. get请求，即客户端要向server端获取数据，如查询列表\n2. 通过querystring来传递数据，如a.html?a=100&b=200\n3. 浏览器直接访问，就发送get请求 \n```\nconst http = require('http')\nconst querystring = require('querystring')\n\nconst server = http.createServer( (req,res) => {\n    // req.method 请求方法\n    const url = req.url //获取请求端完整url\n    req.query = querystring.parse(url.split(?)[1]) //解析querystring\n    res.end(JSON.stringify(req.query)) 将querystring返回\n})\n\nserver.listen(8000)\n```\n\n### post请求\n1. post请求，即客户端要像服务端传递数据，如新建\n\n2. 通过post data传递数据，后面会演示\n\n3. 浏览器无法直接模拟，需要手写js，活着使用postman\n```\nconst http = require('http')\n\nconst server = http.createServer( (req.res) => {\n    if (req.methods === \"POST\") {\n        //req数据格式\n        console.log('req content-type',req.headers['content-type'])\n\n        let postData = ''\n        req.on('data', chunk => {\n            postData += chunk.toString()\n        })\n\n         req.on('on', chunk => {\n            res.end('hello word')\n        })\n\n    }\n})\n```\n\n### node处理http请求\n```\nconst http = require('http')\n\nconst querystring = require('querystring')\n/**\n * url : http://localhost:8000/api/bolg/list?author=zhangsan&key=A\n *\n */\nserver = http.createServer( (req,res) => {\n    const method = req.method\n    const url = req.url\n    const path = url.split('?')[0]\n    const query = querystring.parse(url.split('?')[1])\n\n    //设置返回格式为JSON\n    res.setHeader('Content-type','application/json')\n\n    //返回的数据\n    const resData = {\n        method,\n        url,\n        path,\n        query\n    }\n\n    //返回\n    if (method === \"GET\") {\n        res.end(JSON.stringify(resData))\n    }\n\n    if (req.methods === \"POST\") {\n\n        let postData = ''\n        req.on('data', chunk => {\n            postData += chunk.toString()\n        })\n\n         req.on('end', () => {\n            resData.postData = postData\n            res.end(JSON.stringify(resData))\n        })\n\n    }\n    \n    //{\"method\":\"GET\",\"url\":\"/api/bolg/list?author=zhangsan&key=A\",\"path\":\"/api/bolg/list\",\"query\":{\"author\":\"zhangsan\",\"key\":\"A\"}}\n\n})\n\nserver.listen(8000)\n\n```\n","source":"_posts/node-http.md","raw":"---\ntitle: Node.js-http\ndate: 2019-05-29 23:40:30\ntags: ['Node.js']\ncategories: Node.js\n---\n\n### Node.js处理http请求\n<!-- more -->\n\n### 输入url，发生什么\n1. DNS解析，建立TCP连接，发送http请求\nDNS解析：通过域名解析到一个ip地址，Remote Address（ip地址）\n\n2. server接收到http请求，处理，并返回\n\n3. 客户端收到返回数据，处理数据（如渲染页面，执行js）\n\n### 处理get请求\n#### 示例\n```\nconst http = require('http')\n\nconst server = http.createServer( (req,res) => {\n    res.end('hello world')\n})\n\nserver.listen(8000)\n```\n\n#### get请求\n1. get请求，即客户端要向server端获取数据，如查询列表\n2. 通过querystring来传递数据，如a.html?a=100&b=200\n3. 浏览器直接访问，就发送get请求 \n```\nconst http = require('http')\nconst querystring = require('querystring')\n\nconst server = http.createServer( (req,res) => {\n    // req.method 请求方法\n    const url = req.url //获取请求端完整url\n    req.query = querystring.parse(url.split(?)[1]) //解析querystring\n    res.end(JSON.stringify(req.query)) 将querystring返回\n})\n\nserver.listen(8000)\n```\n\n### post请求\n1. post请求，即客户端要像服务端传递数据，如新建\n\n2. 通过post data传递数据，后面会演示\n\n3. 浏览器无法直接模拟，需要手写js，活着使用postman\n```\nconst http = require('http')\n\nconst server = http.createServer( (req.res) => {\n    if (req.methods === \"POST\") {\n        //req数据格式\n        console.log('req content-type',req.headers['content-type'])\n\n        let postData = ''\n        req.on('data', chunk => {\n            postData += chunk.toString()\n        })\n\n         req.on('on', chunk => {\n            res.end('hello word')\n        })\n\n    }\n})\n```\n\n### node处理http请求\n```\nconst http = require('http')\n\nconst querystring = require('querystring')\n/**\n * url : http://localhost:8000/api/bolg/list?author=zhangsan&key=A\n *\n */\nserver = http.createServer( (req,res) => {\n    const method = req.method\n    const url = req.url\n    const path = url.split('?')[0]\n    const query = querystring.parse(url.split('?')[1])\n\n    //设置返回格式为JSON\n    res.setHeader('Content-type','application/json')\n\n    //返回的数据\n    const resData = {\n        method,\n        url,\n        path,\n        query\n    }\n\n    //返回\n    if (method === \"GET\") {\n        res.end(JSON.stringify(resData))\n    }\n\n    if (req.methods === \"POST\") {\n\n        let postData = ''\n        req.on('data', chunk => {\n            postData += chunk.toString()\n        })\n\n         req.on('end', () => {\n            resData.postData = postData\n            res.end(JSON.stringify(resData))\n        })\n\n    }\n    \n    //{\"method\":\"GET\",\"url\":\"/api/bolg/list?author=zhangsan&key=A\",\"path\":\"/api/bolg/list\",\"query\":{\"author\":\"zhangsan\",\"key\":\"A\"}}\n\n})\n\nserver.listen(8000)\n\n```\n","slug":"node-http","published":1,"updated":"2019-06-12T02:55:38.064Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq42m002ohe6jhncidsgm","content":"<h3 id=\"Node-js处理http请求\"><a href=\"#Node-js处理http请求\" class=\"headerlink\" title=\"Node.js处理http请求\"></a>Node.js处理http请求</h3><a id=\"more\"></a>\n<h3 id=\"输入url，发生什么\"><a href=\"#输入url，发生什么\" class=\"headerlink\" title=\"输入url，发生什么\"></a>输入url，发生什么</h3><ol>\n<li><p>DNS解析，建立TCP连接，发送http请求<br>DNS解析：通过域名解析到一个ip地址，Remote Address（ip地址）</p>\n</li>\n<li><p>server接收到http请求，处理，并返回</p>\n</li>\n<li><p>客户端收到返回数据，处理数据（如渲染页面，执行js）</p>\n</li>\n</ol>\n<h3 id=\"处理get请求\"><a href=\"#处理get请求\" class=\"headerlink\" title=\"处理get请求\"></a>处理get请求</h3><h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http = require(&apos;http&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">const server = http.createServer( (req,res) =&gt; &#123;</span><br><span class=\"line\">    res.end(&apos;hello world&apos;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(8000)</span><br></pre></td></tr></table></figure>\n<h4 id=\"get请求\"><a href=\"#get请求\" class=\"headerlink\" title=\"get请求\"></a>get请求</h4><ol>\n<li>get请求，即客户端要向server端获取数据，如查询列表</li>\n<li>通过querystring来传递数据，如a.html?a=100&amp;b=200</li>\n<li>浏览器直接访问，就发送get请求 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http = require(&apos;http&apos;)</span><br><span class=\"line\">const querystring = require(&apos;querystring&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">const server = http.createServer( (req,res) =&gt; &#123;</span><br><span class=\"line\">    // req.method 请求方法</span><br><span class=\"line\">    const url = req.url //获取请求端完整url</span><br><span class=\"line\">    req.query = querystring.parse(url.split(?)[1]) //解析querystring</span><br><span class=\"line\">    res.end(JSON.stringify(req.query)) 将querystring返回</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(8000)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"post请求\"><a href=\"#post请求\" class=\"headerlink\" title=\"post请求\"></a>post请求</h3><ol>\n<li><p>post请求，即客户端要像服务端传递数据，如新建</p>\n</li>\n<li><p>通过post data传递数据，后面会演示</p>\n</li>\n<li><p>浏览器无法直接模拟，需要手写js，活着使用postman</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http = require(&apos;http&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">const server = http.createServer( (req.res) =&gt; &#123;</span><br><span class=\"line\">    if (req.methods === &quot;POST&quot;) &#123;</span><br><span class=\"line\">        //req数据格式</span><br><span class=\"line\">        console.log(&apos;req content-type&apos;,req.headers[&apos;content-type&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">        let postData = &apos;&apos;</span><br><span class=\"line\">        req.on(&apos;data&apos;, chunk =&gt; &#123;</span><br><span class=\"line\">            postData += chunk.toString()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">         req.on(&apos;on&apos;, chunk =&gt; &#123;</span><br><span class=\"line\">            res.end(&apos;hello word&apos;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"node处理http请求\"><a href=\"#node处理http请求\" class=\"headerlink\" title=\"node处理http请求\"></a>node处理http请求</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http = require(&apos;http&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">const querystring = require(&apos;querystring&apos;)</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * url : http://localhost:8000/api/bolg/list?author=zhangsan&amp;key=A</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">server = http.createServer( (req,res) =&gt; &#123;</span><br><span class=\"line\">    const method = req.method</span><br><span class=\"line\">    const url = req.url</span><br><span class=\"line\">    const path = url.split(&apos;?&apos;)[0]</span><br><span class=\"line\">    const query = querystring.parse(url.split(&apos;?&apos;)[1])</span><br><span class=\"line\"></span><br><span class=\"line\">    //设置返回格式为JSON</span><br><span class=\"line\">    res.setHeader(&apos;Content-type&apos;,&apos;application/json&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    //返回的数据</span><br><span class=\"line\">    const resData = &#123;</span><br><span class=\"line\">        method,</span><br><span class=\"line\">        url,</span><br><span class=\"line\">        path,</span><br><span class=\"line\">        query</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //返回</span><br><span class=\"line\">    if (method === &quot;GET&quot;) &#123;</span><br><span class=\"line\">        res.end(JSON.stringify(resData))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (req.methods === &quot;POST&quot;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        let postData = &apos;&apos;</span><br><span class=\"line\">        req.on(&apos;data&apos;, chunk =&gt; &#123;</span><br><span class=\"line\">            postData += chunk.toString()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">         req.on(&apos;end&apos;, () =&gt; &#123;</span><br><span class=\"line\">            resData.postData = postData</span><br><span class=\"line\">            res.end(JSON.stringify(resData))</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //&#123;&quot;method&quot;:&quot;GET&quot;,&quot;url&quot;:&quot;/api/bolg/list?author=zhangsan&amp;key=A&quot;,&quot;path&quot;:&quot;/api/bolg/list&quot;,&quot;query&quot;:&#123;&quot;author&quot;:&quot;zhangsan&quot;,&quot;key&quot;:&quot;A&quot;&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(8000)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"Node-js处理http请求\"><a href=\"#Node-js处理http请求\" class=\"headerlink\" title=\"Node.js处理http请求\"></a>Node.js处理http请求</h3>","more":"<h3 id=\"输入url，发生什么\"><a href=\"#输入url，发生什么\" class=\"headerlink\" title=\"输入url，发生什么\"></a>输入url，发生什么</h3><ol>\n<li><p>DNS解析，建立TCP连接，发送http请求<br>DNS解析：通过域名解析到一个ip地址，Remote Address（ip地址）</p>\n</li>\n<li><p>server接收到http请求，处理，并返回</p>\n</li>\n<li><p>客户端收到返回数据，处理数据（如渲染页面，执行js）</p>\n</li>\n</ol>\n<h3 id=\"处理get请求\"><a href=\"#处理get请求\" class=\"headerlink\" title=\"处理get请求\"></a>处理get请求</h3><h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http = require(&apos;http&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">const server = http.createServer( (req,res) =&gt; &#123;</span><br><span class=\"line\">    res.end(&apos;hello world&apos;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(8000)</span><br></pre></td></tr></table></figure>\n<h4 id=\"get请求\"><a href=\"#get请求\" class=\"headerlink\" title=\"get请求\"></a>get请求</h4><ol>\n<li>get请求，即客户端要向server端获取数据，如查询列表</li>\n<li>通过querystring来传递数据，如a.html?a=100&amp;b=200</li>\n<li>浏览器直接访问，就发送get请求 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http = require(&apos;http&apos;)</span><br><span class=\"line\">const querystring = require(&apos;querystring&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">const server = http.createServer( (req,res) =&gt; &#123;</span><br><span class=\"line\">    // req.method 请求方法</span><br><span class=\"line\">    const url = req.url //获取请求端完整url</span><br><span class=\"line\">    req.query = querystring.parse(url.split(?)[1]) //解析querystring</span><br><span class=\"line\">    res.end(JSON.stringify(req.query)) 将querystring返回</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(8000)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"post请求\"><a href=\"#post请求\" class=\"headerlink\" title=\"post请求\"></a>post请求</h3><ol>\n<li><p>post请求，即客户端要像服务端传递数据，如新建</p>\n</li>\n<li><p>通过post data传递数据，后面会演示</p>\n</li>\n<li><p>浏览器无法直接模拟，需要手写js，活着使用postman</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http = require(&apos;http&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">const server = http.createServer( (req.res) =&gt; &#123;</span><br><span class=\"line\">    if (req.methods === &quot;POST&quot;) &#123;</span><br><span class=\"line\">        //req数据格式</span><br><span class=\"line\">        console.log(&apos;req content-type&apos;,req.headers[&apos;content-type&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">        let postData = &apos;&apos;</span><br><span class=\"line\">        req.on(&apos;data&apos;, chunk =&gt; &#123;</span><br><span class=\"line\">            postData += chunk.toString()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">         req.on(&apos;on&apos;, chunk =&gt; &#123;</span><br><span class=\"line\">            res.end(&apos;hello word&apos;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"node处理http请求\"><a href=\"#node处理http请求\" class=\"headerlink\" title=\"node处理http请求\"></a>node处理http请求</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http = require(&apos;http&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">const querystring = require(&apos;querystring&apos;)</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * url : http://localhost:8000/api/bolg/list?author=zhangsan&amp;key=A</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">server = http.createServer( (req,res) =&gt; &#123;</span><br><span class=\"line\">    const method = req.method</span><br><span class=\"line\">    const url = req.url</span><br><span class=\"line\">    const path = url.split(&apos;?&apos;)[0]</span><br><span class=\"line\">    const query = querystring.parse(url.split(&apos;?&apos;)[1])</span><br><span class=\"line\"></span><br><span class=\"line\">    //设置返回格式为JSON</span><br><span class=\"line\">    res.setHeader(&apos;Content-type&apos;,&apos;application/json&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">    //返回的数据</span><br><span class=\"line\">    const resData = &#123;</span><br><span class=\"line\">        method,</span><br><span class=\"line\">        url,</span><br><span class=\"line\">        path,</span><br><span class=\"line\">        query</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //返回</span><br><span class=\"line\">    if (method === &quot;GET&quot;) &#123;</span><br><span class=\"line\">        res.end(JSON.stringify(resData))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (req.methods === &quot;POST&quot;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        let postData = &apos;&apos;</span><br><span class=\"line\">        req.on(&apos;data&apos;, chunk =&gt; &#123;</span><br><span class=\"line\">            postData += chunk.toString()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">         req.on(&apos;end&apos;, () =&gt; &#123;</span><br><span class=\"line\">            resData.postData = postData</span><br><span class=\"line\">            res.end(JSON.stringify(resData))</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //&#123;&quot;method&quot;:&quot;GET&quot;,&quot;url&quot;:&quot;/api/bolg/list?author=zhangsan&amp;key=A&quot;,&quot;path&quot;:&quot;/api/bolg/list&quot;,&quot;query&quot;:&#123;&quot;author&quot;:&quot;zhangsan&quot;,&quot;key&quot;:&quot;A&quot;&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(8000)</span><br></pre></td></tr></table></figure>"},{"title":"阿里云部署nodejs","date":"2020-04-24T08:38:37.000Z","_content":"\n### 阿里云部署nodejs\n<!-- more -->\n\n### 购买阿里云服务器\n\n```\n启动\nssh root@ip\n```\n```\n退出\nexit\n```\n\n### 安装nodejs\n\n```\n安装环境之前先更新一下已有的包\n\nyum update\n```\n\n```\n使用yum安装指定版本node\n\ncurl --silent --location https://rpm.nodesource.com/setup_10.x | sudo bash -\n\nyum install -y nodejs\n\nnode -v\n\nnpm -v\n\nnpm i nvm pm2 -g\n```\n\n### 安装MySQL\n\n```\n安装\n\nyum install mysql\nyum install mysql-server\nyum install mysql-devel\n\n```\n\n```\n修改mysql密码并配置远程连接\nmysqladmin -u root password '密码'  这里我暂时用root\n使用命令进入数据库：\nmysql -uroot -proot\n```\n\n```\n解决mysql“Access denied for user 'root'@'IP地址'\ngrant all privileges on *.* to 'root'@'%' with grant option;\nflush privileges;\n```\n\n```\n添加安全组规则\n\n类型： MySQL(3306)\n优先级： 100\n授权类型： 地址段访问\n授权对象: 0.0.0.0/0\n```\n\n### 安装nginx \n\n```\nyum install nginx\n\nnginx -s reload\n```\n\n```\n解决nginx 启动问题\nvim /etc/nginx/conf.d/default.conf\n\nlisten       80 default_server;\nlisten       [::]:80 default_server;\n\n修改为:\nlisten       80;\n#listen       [::]:80 default_server;\n```\n\n```\n添加安全组\n\n类型： HTTP（80）\n优先级： 100\n授权类型： 地址段访问\n授权对象: 0.0.0.0/0\n```\n\n### 部署nodejs项目\n\n```\n下载git \nyum install git\n\ngit --version #查看版本\n```\n\n```\n根目录建立service文件夹\nmkdir service \n\n进入service\ngit clone https://github.com/itsRaul/koa2-weibo-code.git\n\n下载\nnpm i\n\n然后以pm2启动项目\nnpm run prd\n\npm2 list # 列表 PM2 启动的所有的应用程序\n\npm2 reload all # 重启 cluster mode下的所有应用\n\n```\n\n```\n安全组配置\n类型： TCP（80）\n端口范围: 3000/3000\n优先级： 100\n授权类型： 地址段访问\n授权对象: 0.0.0.0/0\n```\n\n### 安装redis\n```\n1. 设置Redis的仓库地址\nyum install epel-release\n\n2. 安装redis\nyum install redis\n\n3.默认安装目录：配置文件在/etc/redis.conf；服务器和客户端在 /usr/bin/redis-server     redis-cli\nwhereis redis //可以查看配置文件在哪\n\n4.修改配置文件vim /etc/redis.conf  \n进入redis.conf shift+i可以修改文件  :wq保存修改\n\n#监听所有的IP地址（61行）\nbind 127.0.0.1注释掉为#bind 127.0.0.1\n#设置为守护进程（128行）\ndaemonize no 改为 daemonize yes \n#设置密码（480行）不用设置密码\nrequirepass xxx\n#最大物理内存设置（537行）在真实环境必须部署，否则物理内存会被耗尽。一般配置200mb/500mb/1gb/2gb。配置了最大内存 maxmemory 之后记得配置过期删除策略\nmaxmemory 200mb\n#过期删除策略（560行）volatile-lru -> 根据LRU算法生成的过期时间来删除。 # allkeys-lru -> 根据LRU算法删除任何key。 # volatile-random -> 根据过期设置来随机删除key。 # allkeys->random -> 无差别随机删。 # volatile-ttl -> 根据最近过期时间来删除（辅以TTL） # noeviction -> 谁也不删，直接在写操作时返回错误。\nmaxmemory-ploicy volatile-lru\n\n5.启动redis\nservice redis start \n如果需要设置开机自动启动\nchkconfig redis on \n\n6.查看版本\nredis-server -v\n\n7.测试启动\nredis-cli ping\n返回PONG，启动成功\n\n8.redis-cli 启动redis客户端\n#无密码 \nredis-cli -h 主机ip -p 端口\n#有密码\nredis-cli -h 主机ip -p 端口 -a 密码 \n　或 先redis-cli,之后输入auth+空格+密码\n\nhttps://www.cnblogs.com/kingsonfu/p/9819657.html\n```\n\n### 部署react 项目\n\n```\n1. 建立website 文件\n2. 拉取项目\n3. 在/etc/nginx/conf.d目录下新建配置文件\n```\ntouch demo_client.conf \nvim /etc/nginx/conf.d/demo_client.conf\n\nserver {\n        listen 8080;\n        root    /root/website/demo-client/build;\n        index   index.html index.html;\n        location / {\n         try_files $uri $uri/ /index.html;\n        }\n}\n\n:wq\n```\n\n解决nginx 500  是因为用户权限不一致\nvim /etc/nginx/nginx.conf\nuse nginx 改成 use root \n```","source":"_posts/nodejs-aliyun.md","raw":"---\ntitle: 阿里云部署nodejs\ndate: 2020-04-24 16:38:37\ntags: ['Node.js']\ncategories: Node.js\n---\n\n### 阿里云部署nodejs\n<!-- more -->\n\n### 购买阿里云服务器\n\n```\n启动\nssh root@ip\n```\n```\n退出\nexit\n```\n\n### 安装nodejs\n\n```\n安装环境之前先更新一下已有的包\n\nyum update\n```\n\n```\n使用yum安装指定版本node\n\ncurl --silent --location https://rpm.nodesource.com/setup_10.x | sudo bash -\n\nyum install -y nodejs\n\nnode -v\n\nnpm -v\n\nnpm i nvm pm2 -g\n```\n\n### 安装MySQL\n\n```\n安装\n\nyum install mysql\nyum install mysql-server\nyum install mysql-devel\n\n```\n\n```\n修改mysql密码并配置远程连接\nmysqladmin -u root password '密码'  这里我暂时用root\n使用命令进入数据库：\nmysql -uroot -proot\n```\n\n```\n解决mysql“Access denied for user 'root'@'IP地址'\ngrant all privileges on *.* to 'root'@'%' with grant option;\nflush privileges;\n```\n\n```\n添加安全组规则\n\n类型： MySQL(3306)\n优先级： 100\n授权类型： 地址段访问\n授权对象: 0.0.0.0/0\n```\n\n### 安装nginx \n\n```\nyum install nginx\n\nnginx -s reload\n```\n\n```\n解决nginx 启动问题\nvim /etc/nginx/conf.d/default.conf\n\nlisten       80 default_server;\nlisten       [::]:80 default_server;\n\n修改为:\nlisten       80;\n#listen       [::]:80 default_server;\n```\n\n```\n添加安全组\n\n类型： HTTP（80）\n优先级： 100\n授权类型： 地址段访问\n授权对象: 0.0.0.0/0\n```\n\n### 部署nodejs项目\n\n```\n下载git \nyum install git\n\ngit --version #查看版本\n```\n\n```\n根目录建立service文件夹\nmkdir service \n\n进入service\ngit clone https://github.com/itsRaul/koa2-weibo-code.git\n\n下载\nnpm i\n\n然后以pm2启动项目\nnpm run prd\n\npm2 list # 列表 PM2 启动的所有的应用程序\n\npm2 reload all # 重启 cluster mode下的所有应用\n\n```\n\n```\n安全组配置\n类型： TCP（80）\n端口范围: 3000/3000\n优先级： 100\n授权类型： 地址段访问\n授权对象: 0.0.0.0/0\n```\n\n### 安装redis\n```\n1. 设置Redis的仓库地址\nyum install epel-release\n\n2. 安装redis\nyum install redis\n\n3.默认安装目录：配置文件在/etc/redis.conf；服务器和客户端在 /usr/bin/redis-server     redis-cli\nwhereis redis //可以查看配置文件在哪\n\n4.修改配置文件vim /etc/redis.conf  \n进入redis.conf shift+i可以修改文件  :wq保存修改\n\n#监听所有的IP地址（61行）\nbind 127.0.0.1注释掉为#bind 127.0.0.1\n#设置为守护进程（128行）\ndaemonize no 改为 daemonize yes \n#设置密码（480行）不用设置密码\nrequirepass xxx\n#最大物理内存设置（537行）在真实环境必须部署，否则物理内存会被耗尽。一般配置200mb/500mb/1gb/2gb。配置了最大内存 maxmemory 之后记得配置过期删除策略\nmaxmemory 200mb\n#过期删除策略（560行）volatile-lru -> 根据LRU算法生成的过期时间来删除。 # allkeys-lru -> 根据LRU算法删除任何key。 # volatile-random -> 根据过期设置来随机删除key。 # allkeys->random -> 无差别随机删。 # volatile-ttl -> 根据最近过期时间来删除（辅以TTL） # noeviction -> 谁也不删，直接在写操作时返回错误。\nmaxmemory-ploicy volatile-lru\n\n5.启动redis\nservice redis start \n如果需要设置开机自动启动\nchkconfig redis on \n\n6.查看版本\nredis-server -v\n\n7.测试启动\nredis-cli ping\n返回PONG，启动成功\n\n8.redis-cli 启动redis客户端\n#无密码 \nredis-cli -h 主机ip -p 端口\n#有密码\nredis-cli -h 主机ip -p 端口 -a 密码 \n　或 先redis-cli,之后输入auth+空格+密码\n\nhttps://www.cnblogs.com/kingsonfu/p/9819657.html\n```\n\n### 部署react 项目\n\n```\n1. 建立website 文件\n2. 拉取项目\n3. 在/etc/nginx/conf.d目录下新建配置文件\n```\ntouch demo_client.conf \nvim /etc/nginx/conf.d/demo_client.conf\n\nserver {\n        listen 8080;\n        root    /root/website/demo-client/build;\n        index   index.html index.html;\n        location / {\n         try_files $uri $uri/ /index.html;\n        }\n}\n\n:wq\n```\n\n解决nginx 500  是因为用户权限不一致\nvim /etc/nginx/nginx.conf\nuse nginx 改成 use root \n```","slug":"nodejs-aliyun","published":1,"updated":"2020-04-24T08:39:13.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq42o002rhe6jeod8ij7s","content":"<h3 id=\"阿里云部署nodejs\"><a href=\"#阿里云部署nodejs\" class=\"headerlink\" title=\"阿里云部署nodejs\"></a>阿里云部署nodejs</h3><a id=\"more\"></a>\n<h3 id=\"购买阿里云服务器\"><a href=\"#购买阿里云服务器\" class=\"headerlink\" title=\"购买阿里云服务器\"></a>购买阿里云服务器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动</span><br><span class=\"line\">ssh root@ip</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">退出</span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装环境之前先更新一下已有的包</span><br><span class=\"line\"></span><br><span class=\"line\">yum update</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用yum安装指定版本node</span><br><span class=\"line\"></span><br><span class=\"line\">curl --silent --location https://rpm.nodesource.com/setup_10.x | sudo bash -</span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y nodejs</span><br><span class=\"line\"></span><br><span class=\"line\">node -v</span><br><span class=\"line\"></span><br><span class=\"line\">npm -v</span><br><span class=\"line\"></span><br><span class=\"line\">npm i nvm pm2 -g</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装</span><br><span class=\"line\"></span><br><span class=\"line\">yum install mysql</span><br><span class=\"line\">yum install mysql-server</span><br><span class=\"line\">yum install mysql-devel</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修改mysql密码并配置远程连接</span><br><span class=\"line\">mysqladmin -u root password &apos;密码&apos;  这里我暂时用root</span><br><span class=\"line\">使用命令进入数据库：</span><br><span class=\"line\">mysql -uroot -proot</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决mysql“Access denied for user &apos;root&apos;@&apos;IP地址&apos;</span><br><span class=\"line\">grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; with grant option;</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">添加安全组规则</span><br><span class=\"line\"></span><br><span class=\"line\">类型： MySQL(3306)</span><br><span class=\"line\">优先级： 100</span><br><span class=\"line\">授权类型： 地址段访问</span><br><span class=\"line\">授权对象: 0.0.0.0/0</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决nginx 启动问题</span><br><span class=\"line\">vim /etc/nginx/conf.d/default.conf</span><br><span class=\"line\"></span><br><span class=\"line\">listen       80 default_server;</span><br><span class=\"line\">listen       [::]:80 default_server;</span><br><span class=\"line\"></span><br><span class=\"line\">修改为:</span><br><span class=\"line\">listen       80;</span><br><span class=\"line\">#listen       [::]:80 default_server;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">添加安全组</span><br><span class=\"line\"></span><br><span class=\"line\">类型： HTTP（80）</span><br><span class=\"line\">优先级： 100</span><br><span class=\"line\">授权类型： 地址段访问</span><br><span class=\"line\">授权对象: 0.0.0.0/0</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署nodejs项目\"><a href=\"#部署nodejs项目\" class=\"headerlink\" title=\"部署nodejs项目\"></a>部署nodejs项目</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载git </span><br><span class=\"line\">yum install git</span><br><span class=\"line\"></span><br><span class=\"line\">git --version #查看版本</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">根目录建立service文件夹</span><br><span class=\"line\">mkdir service </span><br><span class=\"line\"></span><br><span class=\"line\">进入service</span><br><span class=\"line\">git clone https://github.com/itsRaul/koa2-weibo-code.git</span><br><span class=\"line\"></span><br><span class=\"line\">下载</span><br><span class=\"line\">npm i</span><br><span class=\"line\"></span><br><span class=\"line\">然后以pm2启动项目</span><br><span class=\"line\">npm run prd</span><br><span class=\"line\"></span><br><span class=\"line\">pm2 list # 列表 PM2 启动的所有的应用程序</span><br><span class=\"line\"></span><br><span class=\"line\">pm2 reload all # 重启 cluster mode下的所有应用</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安全组配置</span><br><span class=\"line\">类型： TCP（80）</span><br><span class=\"line\">端口范围: 3000/3000</span><br><span class=\"line\">优先级： 100</span><br><span class=\"line\">授权类型： 地址段访问</span><br><span class=\"line\">授权对象: 0.0.0.0/0</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装redis\"><a href=\"#安装redis\" class=\"headerlink\" title=\"安装redis\"></a>安装redis</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 设置Redis的仓库地址</span><br><span class=\"line\">yum install epel-release</span><br><span class=\"line\"></span><br><span class=\"line\">2. 安装redis</span><br><span class=\"line\">yum install redis</span><br><span class=\"line\"></span><br><span class=\"line\">3.默认安装目录：配置文件在/etc/redis.conf；服务器和客户端在 /usr/bin/redis-server     redis-cli</span><br><span class=\"line\">whereis redis //可以查看配置文件在哪</span><br><span class=\"line\"></span><br><span class=\"line\">4.修改配置文件vim /etc/redis.conf  </span><br><span class=\"line\">进入redis.conf shift+i可以修改文件  :wq保存修改</span><br><span class=\"line\"></span><br><span class=\"line\">#监听所有的IP地址（61行）</span><br><span class=\"line\">bind 127.0.0.1注释掉为#bind 127.0.0.1</span><br><span class=\"line\">#设置为守护进程（128行）</span><br><span class=\"line\">daemonize no 改为 daemonize yes </span><br><span class=\"line\">#设置密码（480行）不用设置密码</span><br><span class=\"line\">requirepass xxx</span><br><span class=\"line\">#最大物理内存设置（537行）在真实环境必须部署，否则物理内存会被耗尽。一般配置200mb/500mb/1gb/2gb。配置了最大内存 maxmemory 之后记得配置过期删除策略</span><br><span class=\"line\">maxmemory 200mb</span><br><span class=\"line\">#过期删除策略（560行）volatile-lru -&gt; 根据LRU算法生成的过期时间来删除。 # allkeys-lru -&gt; 根据LRU算法删除任何key。 # volatile-random -&gt; 根据过期设置来随机删除key。 # allkeys-&gt;random -&gt; 无差别随机删。 # volatile-ttl -&gt; 根据最近过期时间来删除（辅以TTL） # noeviction -&gt; 谁也不删，直接在写操作时返回错误。</span><br><span class=\"line\">maxmemory-ploicy volatile-lru</span><br><span class=\"line\"></span><br><span class=\"line\">5.启动redis</span><br><span class=\"line\">service redis start </span><br><span class=\"line\">如果需要设置开机自动启动</span><br><span class=\"line\">chkconfig redis on </span><br><span class=\"line\"></span><br><span class=\"line\">6.查看版本</span><br><span class=\"line\">redis-server -v</span><br><span class=\"line\"></span><br><span class=\"line\">7.测试启动</span><br><span class=\"line\">redis-cli ping</span><br><span class=\"line\">返回PONG，启动成功</span><br><span class=\"line\"></span><br><span class=\"line\">8.redis-cli 启动redis客户端</span><br><span class=\"line\">#无密码 </span><br><span class=\"line\">redis-cli -h 主机ip -p 端口</span><br><span class=\"line\">#有密码</span><br><span class=\"line\">redis-cli -h 主机ip -p 端口 -a 密码 </span><br><span class=\"line\">　或 先redis-cli,之后输入auth+空格+密码</span><br><span class=\"line\"></span><br><span class=\"line\">https://www.cnblogs.com/kingsonfu/p/9819657.html</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署react-项目\"><a href=\"#部署react-项目\" class=\"headerlink\" title=\"部署react 项目\"></a>部署react 项目</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 建立website 文件</span><br><span class=\"line\">2. 拉取项目</span><br><span class=\"line\">3. 在/etc/nginx/conf.d目录下新建配置文件</span><br></pre></td></tr></table></figure>\n<p>touch demo_client.conf<br>vim /etc/nginx/conf.d/demo_client.conf</p>\n<p>server {<br>        listen 8080;<br>        root    /root/website/demo-client/build;<br>        index   index.html index.html;<br>        location / {<br>         try_files $uri $uri/ /index.html;<br>        }<br>}</p>\n<p>:wq<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">解决nginx 500  是因为用户权限不一致</span><br><span class=\"line\">vim /etc/nginx/nginx.conf</span><br><span class=\"line\">use nginx 改成 use root</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"阿里云部署nodejs\"><a href=\"#阿里云部署nodejs\" class=\"headerlink\" title=\"阿里云部署nodejs\"></a>阿里云部署nodejs</h3>","more":"<h3 id=\"购买阿里云服务器\"><a href=\"#购买阿里云服务器\" class=\"headerlink\" title=\"购买阿里云服务器\"></a>购买阿里云服务器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动</span><br><span class=\"line\">ssh root@ip</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">退出</span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装环境之前先更新一下已有的包</span><br><span class=\"line\"></span><br><span class=\"line\">yum update</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用yum安装指定版本node</span><br><span class=\"line\"></span><br><span class=\"line\">curl --silent --location https://rpm.nodesource.com/setup_10.x | sudo bash -</span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y nodejs</span><br><span class=\"line\"></span><br><span class=\"line\">node -v</span><br><span class=\"line\"></span><br><span class=\"line\">npm -v</span><br><span class=\"line\"></span><br><span class=\"line\">npm i nvm pm2 -g</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装MySQL\"><a href=\"#安装MySQL\" class=\"headerlink\" title=\"安装MySQL\"></a>安装MySQL</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装</span><br><span class=\"line\"></span><br><span class=\"line\">yum install mysql</span><br><span class=\"line\">yum install mysql-server</span><br><span class=\"line\">yum install mysql-devel</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修改mysql密码并配置远程连接</span><br><span class=\"line\">mysqladmin -u root password &apos;密码&apos;  这里我暂时用root</span><br><span class=\"line\">使用命令进入数据库：</span><br><span class=\"line\">mysql -uroot -proot</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决mysql“Access denied for user &apos;root&apos;@&apos;IP地址&apos;</span><br><span class=\"line\">grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; with grant option;</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">添加安全组规则</span><br><span class=\"line\"></span><br><span class=\"line\">类型： MySQL(3306)</span><br><span class=\"line\">优先级： 100</span><br><span class=\"line\">授权类型： 地址段访问</span><br><span class=\"line\">授权对象: 0.0.0.0/0</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">解决nginx 启动问题</span><br><span class=\"line\">vim /etc/nginx/conf.d/default.conf</span><br><span class=\"line\"></span><br><span class=\"line\">listen       80 default_server;</span><br><span class=\"line\">listen       [::]:80 default_server;</span><br><span class=\"line\"></span><br><span class=\"line\">修改为:</span><br><span class=\"line\">listen       80;</span><br><span class=\"line\">#listen       [::]:80 default_server;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">添加安全组</span><br><span class=\"line\"></span><br><span class=\"line\">类型： HTTP（80）</span><br><span class=\"line\">优先级： 100</span><br><span class=\"line\">授权类型： 地址段访问</span><br><span class=\"line\">授权对象: 0.0.0.0/0</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署nodejs项目\"><a href=\"#部署nodejs项目\" class=\"headerlink\" title=\"部署nodejs项目\"></a>部署nodejs项目</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载git </span><br><span class=\"line\">yum install git</span><br><span class=\"line\"></span><br><span class=\"line\">git --version #查看版本</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">根目录建立service文件夹</span><br><span class=\"line\">mkdir service </span><br><span class=\"line\"></span><br><span class=\"line\">进入service</span><br><span class=\"line\">git clone https://github.com/itsRaul/koa2-weibo-code.git</span><br><span class=\"line\"></span><br><span class=\"line\">下载</span><br><span class=\"line\">npm i</span><br><span class=\"line\"></span><br><span class=\"line\">然后以pm2启动项目</span><br><span class=\"line\">npm run prd</span><br><span class=\"line\"></span><br><span class=\"line\">pm2 list # 列表 PM2 启动的所有的应用程序</span><br><span class=\"line\"></span><br><span class=\"line\">pm2 reload all # 重启 cluster mode下的所有应用</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安全组配置</span><br><span class=\"line\">类型： TCP（80）</span><br><span class=\"line\">端口范围: 3000/3000</span><br><span class=\"line\">优先级： 100</span><br><span class=\"line\">授权类型： 地址段访问</span><br><span class=\"line\">授权对象: 0.0.0.0/0</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装redis\"><a href=\"#安装redis\" class=\"headerlink\" title=\"安装redis\"></a>安装redis</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 设置Redis的仓库地址</span><br><span class=\"line\">yum install epel-release</span><br><span class=\"line\"></span><br><span class=\"line\">2. 安装redis</span><br><span class=\"line\">yum install redis</span><br><span class=\"line\"></span><br><span class=\"line\">3.默认安装目录：配置文件在/etc/redis.conf；服务器和客户端在 /usr/bin/redis-server     redis-cli</span><br><span class=\"line\">whereis redis //可以查看配置文件在哪</span><br><span class=\"line\"></span><br><span class=\"line\">4.修改配置文件vim /etc/redis.conf  </span><br><span class=\"line\">进入redis.conf shift+i可以修改文件  :wq保存修改</span><br><span class=\"line\"></span><br><span class=\"line\">#监听所有的IP地址（61行）</span><br><span class=\"line\">bind 127.0.0.1注释掉为#bind 127.0.0.1</span><br><span class=\"line\">#设置为守护进程（128行）</span><br><span class=\"line\">daemonize no 改为 daemonize yes </span><br><span class=\"line\">#设置密码（480行）不用设置密码</span><br><span class=\"line\">requirepass xxx</span><br><span class=\"line\">#最大物理内存设置（537行）在真实环境必须部署，否则物理内存会被耗尽。一般配置200mb/500mb/1gb/2gb。配置了最大内存 maxmemory 之后记得配置过期删除策略</span><br><span class=\"line\">maxmemory 200mb</span><br><span class=\"line\">#过期删除策略（560行）volatile-lru -&gt; 根据LRU算法生成的过期时间来删除。 # allkeys-lru -&gt; 根据LRU算法删除任何key。 # volatile-random -&gt; 根据过期设置来随机删除key。 # allkeys-&gt;random -&gt; 无差别随机删。 # volatile-ttl -&gt; 根据最近过期时间来删除（辅以TTL） # noeviction -&gt; 谁也不删，直接在写操作时返回错误。</span><br><span class=\"line\">maxmemory-ploicy volatile-lru</span><br><span class=\"line\"></span><br><span class=\"line\">5.启动redis</span><br><span class=\"line\">service redis start </span><br><span class=\"line\">如果需要设置开机自动启动</span><br><span class=\"line\">chkconfig redis on </span><br><span class=\"line\"></span><br><span class=\"line\">6.查看版本</span><br><span class=\"line\">redis-server -v</span><br><span class=\"line\"></span><br><span class=\"line\">7.测试启动</span><br><span class=\"line\">redis-cli ping</span><br><span class=\"line\">返回PONG，启动成功</span><br><span class=\"line\"></span><br><span class=\"line\">8.redis-cli 启动redis客户端</span><br><span class=\"line\">#无密码 </span><br><span class=\"line\">redis-cli -h 主机ip -p 端口</span><br><span class=\"line\">#有密码</span><br><span class=\"line\">redis-cli -h 主机ip -p 端口 -a 密码 </span><br><span class=\"line\">　或 先redis-cli,之后输入auth+空格+密码</span><br><span class=\"line\"></span><br><span class=\"line\">https://www.cnblogs.com/kingsonfu/p/9819657.html</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署react-项目\"><a href=\"#部署react-项目\" class=\"headerlink\" title=\"部署react 项目\"></a>部署react 项目</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 建立website 文件</span><br><span class=\"line\">2. 拉取项目</span><br><span class=\"line\">3. 在/etc/nginx/conf.d目录下新建配置文件</span><br></pre></td></tr></table></figure>\n<p>touch demo_client.conf<br>vim /etc/nginx/conf.d/demo_client.conf</p>\n<p>server {<br>        listen 8080;<br>        root    /root/website/demo-client/build;<br>        index   index.html index.html;<br>        location / {<br>         try_files $uri $uri/ /index.html;<br>        }<br>}</p>\n<p>:wq<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">解决nginx 500  是因为用户权限不一致</span><br><span class=\"line\">vim /etc/nginx/nginx.conf</span><br><span class=\"line\">use nginx 改成 use root</span><br></pre></td></tr></table></figure></p>"},{"title":"nodejs开发简易版微博","date":"2020-04-24T08:36:09.000Z","_content":"\n### nodejs开发简易版微博\n<!-- more -->\n\n### 创建 Koa2 项目\n\n1.项目\n```\nkoa2 -e name (-e用ejs作为模版引擎)\n\nnpm i \n\nnpm run dev\n```\n\n2.环境变量，更新内容不需要重启服务\n```\nnpm i cross-env\n\n\"dev\": \"cross-env NODE_ENV=dev ./node_modules/.bin/nodemon bin/www\",\n\n\"prd\": \"cross-env NODE_ENV=production pm2 start bin/www\",\n```\n\n### ejs的使用\n\n```\n引入title参数\n\n<p>EJS Welcome to <%= title %></p>\n```\n\n```\n引入ejs组件\n\n<%- include('./user-info',{\n    isMe\n}) %>\n```\n\n```\nif 判断\n\n<div>\n    <% if (isMe) { %>\n        <p>真</p>\n    <% } else { %>\n        <p>假</p>\n    <% } %>\n</div>\n```\n\n```\n循环\n\n<ul>\n    <% blogList.forEach(blog => { %>\n        <li> <%= blog%> </li>\n    <% }) %>\n</ul>\n\n<script>\n    console.log('100')\n</sctipt>\n```\n\n### mysql\n\n#### 查询语句\n\n```\n1.增\ninsert into users(username,`password`,nickname) values('list','123','李四');\npassword是关键字\n\n2.查\nselect * from users; 查询整个表\n\nselect username,nickname from users where username='lisi' and password='123'; 关键字段查询\n\nselect * from blogs order by id desc; 倒序查询\n\nselect count(id) as `count` from blogs; 查询总数，*号查询所有的列\n\nselect * from blogs order by id desc limit 3; 倒序查询blog表的3条数据\n\nselect * from blogs order by id desc limit 2 offset 2; 一页2条数据，这是第二页\n\nselect blogs.*, users.username,users.nickname from blogs inner join users on users.id = blogs.userid; 查询blogs和users两个表的数据\n\nselect blogs.*, users.username,users.nickname from blogs inner join users on users.id = blogs.userid whers users.username = 'lisi'; 查询关联lisi的数据\n\n3.更新\nupdate blogs set content='内容1111' where id=2;\n\n4.删\ndelete from blogs where id=4;\n```\n\n#### 连接mysql\n\n```\nseq.js\n\nconst Sequelize = require('sequelize')\n\nconst conf = {\n    host: 'localhost',\n    dialect: 'mysql'\n}\n\nconst seq = new Sequelize('koa2_weibo_db','root','',conf)\n\n// seq.authenticate().then(() => {\n//     console.log('ok')\n// }).catch(() => {\n//     console.log('err')\n// })\n\nmodule.exports = seq\n```\n\n#### 创建模型\n\n```\nconst Sequelize = require('sequelize')\nconst seq = require('./seq')\n\n//创建 User 模型，数据表的名字是users\nconst User = seq.define('user',{\n    //id 会自动创建，并设为主键、自增\n    userName: {\n        type: Sequelize.STRING, //varchar(255)\n        allowNull: false //不能为空\n    },\n    password: {\n        type: Sequelize.STRING,\n        allowNull: false\n    },\n    nickName: {\n        type: Sequelize.STRING,\n        comment: '昵称' //注释\n    }\n})\n\nconst Blog = seq.define('blog',{\n    //id 会自动创建，并设为主键、自增\n    title: {\n        type: Sequelize.STRING, //varchar(255)\n        allowNull: false //不能为空\n    },\n    content: {\n        type: Sequelize.STRING,\n        allowNull: false\n    },\n    userId: {\n        type: Sequelize.INTEGER,\n        allowNull: false\n    }\n})\n\n// 外键关联\nBlog.belongsTo(User, {\n    //创建外键 Blog.userId => User.id\n    foreignKey: 'userId'\n})\nUser.hasMany(Blog, {\n    foreignKey: 'userId'\n})\n\nmodule.exports = {\n    User,\n    Blog\n}\n```\n\n#### 添加数据\n\n```\nconst { User, Blog } = require('./model')\n\n!(async function() {\n\n    //创建用户\n    const zhangsan = await User.create({\n        userName: 'zhangsan',\n        password: '123',\n        nickName: '张三',\n    })\n\n    console.log('zhangsan', zhangsan.dataValues)\n})()\n```\n\n#### 查找数据\n\n```\nconst { Bolg, User } = require('./model')\n\n!(async function () {\n\n    const zhangsan = await User.findOne({\n        where: {\n            userName: 'zhangsan'\n        }\n    })\n    console.log('zhangsan',zhangsan.dataValues)\n})()\n```\n\n### nodejs 调试\n\n```\n \"dev\": \"cross-env NODE_ENV=dev ./node_modules/.bin/nodemon --inspect=9229 bin/www\"\n\n chrome://inspect/#devices\n\n 点击inspect\n```\n\n### jwt\n\n1. jwt - json web token \n2. 用户认证成功之后，server 端返回一个加密的token给客户端\n3. 客户端后续每次请求都带token,以示当前用户的身份\n\n```\napp.js\n\nnpm i koa-jwt jsonwebtoken\n\napp.use(jwtKoa({\n\tsecret: SECRET, //加密规则\n}).unless({\n\tpath: [/^\\/users\\/login/] //自定义哪些目录忽略 jwt 验证\n}))\n```\n\n```\nconst jwt = require('jsonwebtoken')\nconst util = require('util')\nconst verify = util.promisify(jwt.verify)\n\n模拟登录接口 SECRET加密规则\nlet token \nif (userInfo) {\n    token = jwt.sign(userInfo, SECRET, {expiresIn: '1h'})\n}\n\n模拟个人信息接口，解密个人信息\nrouter.get('/getUserInfo',async (ctx,next) => {\n\tconst token = ctx.header.authorization\n\ttry {\n\t\tconst payload = await verify(token.split(' ')[1],SECRET)\n\t\tctx.body = {\n\t\t\tcode:0,\n\t\t\tdata: {\n\t\t\t\tuserInfo:payload\n\t\t\t},\n\t\t\tmsg: '成功'\n\t\t}\n\t} catch (error) {\n\t\tctx.body = {\n\t\t\tcode: -1,\n\t\t\tmsg: 'failed'\n\t\t}\n\t}\n})\n```\n\n```\n前端头部携带token\nBearer + 空格 + 服务端返回的token\nAuthorization Bearer token\n```\n\n### ajv 数据校验规则\n\n```\nnpm i ajv\n\n_validate.js\n\nconst Ajv = require('ajv')\nconst ajv = new Ajv({\n    // allErrors: true // 输出所有的错误（比较慢）\n})\n\n/**\n * json schema 校验\n * @param {Object} schema json schema 规则\n * @param {Object} data 待校验的数据\n */\nfunction validate(schema, data = {}) {\n    const valid = ajv.validate(schema, data)\n    if (!valid) {\n        return ajv.errors[0]\n    }\n}\n\nmodule.exports = validate\n\n```\n\n```\nuser.js\n\nconst validate = require('./_validate')\n\n// 校验规则\nconst SCHEMA = {\n    type: 'object',\n    properties: {\n        userName: {\n            type: 'string',\n            pattern: '^[a-zA-Z][a-zA-Z0-9_]+$', // 字母开头，字母数字下划线\n            maxLength: 255,\n            minLength: 2\n        },\n        password: {\n            type: 'string',\n            maxLength: 255,\n            minLength: 3\n        },\n        newPassword: {\n            type: 'string',\n            maxLength: 255,\n            minLength: 3\n        },\n        nickName: {\n            type: 'string',\n            maxLength: 255\n        },\n        picture: {\n            type: 'string',\n            maxLength: 255\n        },\n        city: {\n            type: 'string',\n            maxLength: 255,\n            minLength: 2\n        },\n        gender: {\n            type: 'number',\n            minimum: 1,\n            maximum: 3\n        }\n    }\n}\n\n/**\n * 校验用户数据格式\n * @param {Object} data 用户数据\n */\nfunction userValidate(data = {}) {\n    return validate(SCHEMA, data)\n}\n\nmodule.exports = userValidate\n```\n\n```\n中间件函数\n\nfunction genValidator(validatorFn) {\n    async function validator(ctx,next) {\n        const data = ctx.request.body\n        const error = validatorFn(data)\n        if (error) {\n            ctx.body = new ErrorModel(jsonSchemaFileInfo)\n            return\n        }\n        await next()\n    } \n    return  validator\n}\n\nmodule.exports = {\n    genValidator\n}\n```\n\n### 图片上传\n\n```\nnpm i formidable-upload-koa fs-extra --save\n\nconst koaFrom = require('formidable-upload-koa')\n\n1.上传图片,koaFrom作为一个中间件，返回图片的大小，路径，名字，type\n2.限制图片大小，大于删除图片\n3.防止图片重命名字\n4.创建存放文件的目录\n5.移动默认的目录到新创建的目录\n6.每次启动项目，判断图片存放的目录是否存在\nrouter.post('/upload', loginCheck, koaFrom(), async (ctx,next) => {\n    const file = ctx.req.files['file']\n    const { size, path, name, type } = file\n    ctx.body = await saveFile({\n        size, \n        name, \n        type,\n        filePath: path \n    })\n})\n\nconst path = require('path')\nconst fse = require('fs-extra')\n\n//存放图片的目录\nconst DIST_FOLDER_PATH = path.join(__dirname, '..', '..', 'uploadFiles')\n// 文件最大体积\nconst MIX_SIZE = 1024 * 1024 * 1024\n\n//是否需要创建目录\nfse.pathExists(DIST_FOLDER_PATH).then(exist => {\n    if (!exist) {\n        fse.ensureDir(DIST_FOLDER_PATH)\n    }\n})\n\n/**\n * 保存文件\n * @param {number} size 文件名\n * @param {string} filePath 文件类型\n * @param {string} name 文件体积大小 \n * @param {string} type 文件路径 \n */\nasync function saveFile({ size, filePath, name, type }) {\n    if (size > MIX_SIZE) {\n        await fse.remove(path)\n        return new ErrorModel(uploadFileSizeFailInfo)\n    }\n\n    //移动文件\n    const fileName = Date.now() + '.' + name\n    const distFilePath = path.join(filePath, DIST_FOLDER_PATH)\n    await fse.move(filePath, distFilePath)\n    return new SuccessModel({\n        url: '/' + fileName\n    })\n}\n\napp.js\napp.use(koaStatic(path.join(__dirname, '..','uploadFiles')))\n```\n\n### xss过滤\n\n```\n安装\nnpm i xss --save\n\n引入\nconst xss = require('xss')\nxss(content)\n```\n\n### PM2\n\n#### PM2介绍\nnodejs进程管理工具，可以利用它来简化很多node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。\n守护进程：服务挂掉自动重启\n多进程：更好的利用CPU和内存\n\n#### PM2 配置和使用\n\n```\n查看所有进程的列表\npm2 list\n\n重启pm2的进程\npm2 restart <App name or id>\n\n停止进程服务\npm2 stop <App name or id>\n\n删除进程\npmg2 delete <App name or id>\n\n启动\npm2 start <App name or id>\n\n查看进程信息\npm2 info <App name or id>\n\n监控\npm2 monit www\n```\n\n更好的利用内存和CPU\n进程之间无法通讯，因此 redis mysql要用统一的服务\n\n### nginx 代理\n\n#### nginx介绍\n1.静态资源服务器\n2.负载均衡\n3.反向代理\n","source":"_posts/nodejs-weibo.md","raw":"---\ntitle: nodejs开发简易版微博\ndate: 2020-04-24 16:36:09\ntags: ['Node.js']\ncategories: Node.js\n---\n\n### nodejs开发简易版微博\n<!-- more -->\n\n### 创建 Koa2 项目\n\n1.项目\n```\nkoa2 -e name (-e用ejs作为模版引擎)\n\nnpm i \n\nnpm run dev\n```\n\n2.环境变量，更新内容不需要重启服务\n```\nnpm i cross-env\n\n\"dev\": \"cross-env NODE_ENV=dev ./node_modules/.bin/nodemon bin/www\",\n\n\"prd\": \"cross-env NODE_ENV=production pm2 start bin/www\",\n```\n\n### ejs的使用\n\n```\n引入title参数\n\n<p>EJS Welcome to <%= title %></p>\n```\n\n```\n引入ejs组件\n\n<%- include('./user-info',{\n    isMe\n}) %>\n```\n\n```\nif 判断\n\n<div>\n    <% if (isMe) { %>\n        <p>真</p>\n    <% } else { %>\n        <p>假</p>\n    <% } %>\n</div>\n```\n\n```\n循环\n\n<ul>\n    <% blogList.forEach(blog => { %>\n        <li> <%= blog%> </li>\n    <% }) %>\n</ul>\n\n<script>\n    console.log('100')\n</sctipt>\n```\n\n### mysql\n\n#### 查询语句\n\n```\n1.增\ninsert into users(username,`password`,nickname) values('list','123','李四');\npassword是关键字\n\n2.查\nselect * from users; 查询整个表\n\nselect username,nickname from users where username='lisi' and password='123'; 关键字段查询\n\nselect * from blogs order by id desc; 倒序查询\n\nselect count(id) as `count` from blogs; 查询总数，*号查询所有的列\n\nselect * from blogs order by id desc limit 3; 倒序查询blog表的3条数据\n\nselect * from blogs order by id desc limit 2 offset 2; 一页2条数据，这是第二页\n\nselect blogs.*, users.username,users.nickname from blogs inner join users on users.id = blogs.userid; 查询blogs和users两个表的数据\n\nselect blogs.*, users.username,users.nickname from blogs inner join users on users.id = blogs.userid whers users.username = 'lisi'; 查询关联lisi的数据\n\n3.更新\nupdate blogs set content='内容1111' where id=2;\n\n4.删\ndelete from blogs where id=4;\n```\n\n#### 连接mysql\n\n```\nseq.js\n\nconst Sequelize = require('sequelize')\n\nconst conf = {\n    host: 'localhost',\n    dialect: 'mysql'\n}\n\nconst seq = new Sequelize('koa2_weibo_db','root','',conf)\n\n// seq.authenticate().then(() => {\n//     console.log('ok')\n// }).catch(() => {\n//     console.log('err')\n// })\n\nmodule.exports = seq\n```\n\n#### 创建模型\n\n```\nconst Sequelize = require('sequelize')\nconst seq = require('./seq')\n\n//创建 User 模型，数据表的名字是users\nconst User = seq.define('user',{\n    //id 会自动创建，并设为主键、自增\n    userName: {\n        type: Sequelize.STRING, //varchar(255)\n        allowNull: false //不能为空\n    },\n    password: {\n        type: Sequelize.STRING,\n        allowNull: false\n    },\n    nickName: {\n        type: Sequelize.STRING,\n        comment: '昵称' //注释\n    }\n})\n\nconst Blog = seq.define('blog',{\n    //id 会自动创建，并设为主键、自增\n    title: {\n        type: Sequelize.STRING, //varchar(255)\n        allowNull: false //不能为空\n    },\n    content: {\n        type: Sequelize.STRING,\n        allowNull: false\n    },\n    userId: {\n        type: Sequelize.INTEGER,\n        allowNull: false\n    }\n})\n\n// 外键关联\nBlog.belongsTo(User, {\n    //创建外键 Blog.userId => User.id\n    foreignKey: 'userId'\n})\nUser.hasMany(Blog, {\n    foreignKey: 'userId'\n})\n\nmodule.exports = {\n    User,\n    Blog\n}\n```\n\n#### 添加数据\n\n```\nconst { User, Blog } = require('./model')\n\n!(async function() {\n\n    //创建用户\n    const zhangsan = await User.create({\n        userName: 'zhangsan',\n        password: '123',\n        nickName: '张三',\n    })\n\n    console.log('zhangsan', zhangsan.dataValues)\n})()\n```\n\n#### 查找数据\n\n```\nconst { Bolg, User } = require('./model')\n\n!(async function () {\n\n    const zhangsan = await User.findOne({\n        where: {\n            userName: 'zhangsan'\n        }\n    })\n    console.log('zhangsan',zhangsan.dataValues)\n})()\n```\n\n### nodejs 调试\n\n```\n \"dev\": \"cross-env NODE_ENV=dev ./node_modules/.bin/nodemon --inspect=9229 bin/www\"\n\n chrome://inspect/#devices\n\n 点击inspect\n```\n\n### jwt\n\n1. jwt - json web token \n2. 用户认证成功之后，server 端返回一个加密的token给客户端\n3. 客户端后续每次请求都带token,以示当前用户的身份\n\n```\napp.js\n\nnpm i koa-jwt jsonwebtoken\n\napp.use(jwtKoa({\n\tsecret: SECRET, //加密规则\n}).unless({\n\tpath: [/^\\/users\\/login/] //自定义哪些目录忽略 jwt 验证\n}))\n```\n\n```\nconst jwt = require('jsonwebtoken')\nconst util = require('util')\nconst verify = util.promisify(jwt.verify)\n\n模拟登录接口 SECRET加密规则\nlet token \nif (userInfo) {\n    token = jwt.sign(userInfo, SECRET, {expiresIn: '1h'})\n}\n\n模拟个人信息接口，解密个人信息\nrouter.get('/getUserInfo',async (ctx,next) => {\n\tconst token = ctx.header.authorization\n\ttry {\n\t\tconst payload = await verify(token.split(' ')[1],SECRET)\n\t\tctx.body = {\n\t\t\tcode:0,\n\t\t\tdata: {\n\t\t\t\tuserInfo:payload\n\t\t\t},\n\t\t\tmsg: '成功'\n\t\t}\n\t} catch (error) {\n\t\tctx.body = {\n\t\t\tcode: -1,\n\t\t\tmsg: 'failed'\n\t\t}\n\t}\n})\n```\n\n```\n前端头部携带token\nBearer + 空格 + 服务端返回的token\nAuthorization Bearer token\n```\n\n### ajv 数据校验规则\n\n```\nnpm i ajv\n\n_validate.js\n\nconst Ajv = require('ajv')\nconst ajv = new Ajv({\n    // allErrors: true // 输出所有的错误（比较慢）\n})\n\n/**\n * json schema 校验\n * @param {Object} schema json schema 规则\n * @param {Object} data 待校验的数据\n */\nfunction validate(schema, data = {}) {\n    const valid = ajv.validate(schema, data)\n    if (!valid) {\n        return ajv.errors[0]\n    }\n}\n\nmodule.exports = validate\n\n```\n\n```\nuser.js\n\nconst validate = require('./_validate')\n\n// 校验规则\nconst SCHEMA = {\n    type: 'object',\n    properties: {\n        userName: {\n            type: 'string',\n            pattern: '^[a-zA-Z][a-zA-Z0-9_]+$', // 字母开头，字母数字下划线\n            maxLength: 255,\n            minLength: 2\n        },\n        password: {\n            type: 'string',\n            maxLength: 255,\n            minLength: 3\n        },\n        newPassword: {\n            type: 'string',\n            maxLength: 255,\n            minLength: 3\n        },\n        nickName: {\n            type: 'string',\n            maxLength: 255\n        },\n        picture: {\n            type: 'string',\n            maxLength: 255\n        },\n        city: {\n            type: 'string',\n            maxLength: 255,\n            minLength: 2\n        },\n        gender: {\n            type: 'number',\n            minimum: 1,\n            maximum: 3\n        }\n    }\n}\n\n/**\n * 校验用户数据格式\n * @param {Object} data 用户数据\n */\nfunction userValidate(data = {}) {\n    return validate(SCHEMA, data)\n}\n\nmodule.exports = userValidate\n```\n\n```\n中间件函数\n\nfunction genValidator(validatorFn) {\n    async function validator(ctx,next) {\n        const data = ctx.request.body\n        const error = validatorFn(data)\n        if (error) {\n            ctx.body = new ErrorModel(jsonSchemaFileInfo)\n            return\n        }\n        await next()\n    } \n    return  validator\n}\n\nmodule.exports = {\n    genValidator\n}\n```\n\n### 图片上传\n\n```\nnpm i formidable-upload-koa fs-extra --save\n\nconst koaFrom = require('formidable-upload-koa')\n\n1.上传图片,koaFrom作为一个中间件，返回图片的大小，路径，名字，type\n2.限制图片大小，大于删除图片\n3.防止图片重命名字\n4.创建存放文件的目录\n5.移动默认的目录到新创建的目录\n6.每次启动项目，判断图片存放的目录是否存在\nrouter.post('/upload', loginCheck, koaFrom(), async (ctx,next) => {\n    const file = ctx.req.files['file']\n    const { size, path, name, type } = file\n    ctx.body = await saveFile({\n        size, \n        name, \n        type,\n        filePath: path \n    })\n})\n\nconst path = require('path')\nconst fse = require('fs-extra')\n\n//存放图片的目录\nconst DIST_FOLDER_PATH = path.join(__dirname, '..', '..', 'uploadFiles')\n// 文件最大体积\nconst MIX_SIZE = 1024 * 1024 * 1024\n\n//是否需要创建目录\nfse.pathExists(DIST_FOLDER_PATH).then(exist => {\n    if (!exist) {\n        fse.ensureDir(DIST_FOLDER_PATH)\n    }\n})\n\n/**\n * 保存文件\n * @param {number} size 文件名\n * @param {string} filePath 文件类型\n * @param {string} name 文件体积大小 \n * @param {string} type 文件路径 \n */\nasync function saveFile({ size, filePath, name, type }) {\n    if (size > MIX_SIZE) {\n        await fse.remove(path)\n        return new ErrorModel(uploadFileSizeFailInfo)\n    }\n\n    //移动文件\n    const fileName = Date.now() + '.' + name\n    const distFilePath = path.join(filePath, DIST_FOLDER_PATH)\n    await fse.move(filePath, distFilePath)\n    return new SuccessModel({\n        url: '/' + fileName\n    })\n}\n\napp.js\napp.use(koaStatic(path.join(__dirname, '..','uploadFiles')))\n```\n\n### xss过滤\n\n```\n安装\nnpm i xss --save\n\n引入\nconst xss = require('xss')\nxss(content)\n```\n\n### PM2\n\n#### PM2介绍\nnodejs进程管理工具，可以利用它来简化很多node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。\n守护进程：服务挂掉自动重启\n多进程：更好的利用CPU和内存\n\n#### PM2 配置和使用\n\n```\n查看所有进程的列表\npm2 list\n\n重启pm2的进程\npm2 restart <App name or id>\n\n停止进程服务\npm2 stop <App name or id>\n\n删除进程\npmg2 delete <App name or id>\n\n启动\npm2 start <App name or id>\n\n查看进程信息\npm2 info <App name or id>\n\n监控\npm2 monit www\n```\n\n更好的利用内存和CPU\n进程之间无法通讯，因此 redis mysql要用统一的服务\n\n### nginx 代理\n\n#### nginx介绍\n1.静态资源服务器\n2.负载均衡\n3.反向代理\n","slug":"nodejs-weibo","published":1,"updated":"2020-04-24T08:37:22.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq42q002whe6jpjbj2tjd","content":"<h3 id=\"nodejs开发简易版微博\"><a href=\"#nodejs开发简易版微博\" class=\"headerlink\" title=\"nodejs开发简易版微博\"></a>nodejs开发简易版微博</h3><a id=\"more\"></a>\n<h3 id=\"创建-Koa2-项目\"><a href=\"#创建-Koa2-项目\" class=\"headerlink\" title=\"创建 Koa2 项目\"></a>创建 Koa2 项目</h3><p>1.项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">koa2 -e name (-e用ejs作为模版引擎)</span><br><span class=\"line\"></span><br><span class=\"line\">npm i </span><br><span class=\"line\"></span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure></p>\n<p>2.环境变量，更新内容不需要重启服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i cross-env</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;dev&quot;: &quot;cross-env NODE_ENV=dev ./node_modules/.bin/nodemon bin/www&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;prd&quot;: &quot;cross-env NODE_ENV=production pm2 start bin/www&quot;,</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ejs的使用\"><a href=\"#ejs的使用\" class=\"headerlink\" title=\"ejs的使用\"></a>ejs的使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">引入title参数</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;EJS Welcome to &lt;%= title %&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">引入ejs组件</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%- include(&apos;./user-info&apos;,&#123;</span><br><span class=\"line\">    isMe</span><br><span class=\"line\">&#125;) %&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 判断</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;% if (isMe) &#123; %&gt;</span><br><span class=\"line\">        &lt;p&gt;真&lt;/p&gt;</span><br><span class=\"line\">    &lt;% &#125; else &#123; %&gt;</span><br><span class=\"line\">        &lt;p&gt;假&lt;/p&gt;</span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">循环</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;% blogList.forEach(blog =&gt; &#123; %&gt;</span><br><span class=\"line\">        &lt;li&gt; &lt;%= blog%&gt; &lt;/li&gt;</span><br><span class=\"line\">    &lt;% &#125;) %&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    console.log(&apos;100&apos;)</span><br><span class=\"line\">&lt;/sctipt&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h3><h4 id=\"查询语句\"><a href=\"#查询语句\" class=\"headerlink\" title=\"查询语句\"></a>查询语句</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.增</span><br><span class=\"line\">insert into users(username,`password`,nickname) values(&apos;list&apos;,&apos;123&apos;,&apos;李四&apos;);</span><br><span class=\"line\">password是关键字</span><br><span class=\"line\"></span><br><span class=\"line\">2.查</span><br><span class=\"line\">select * from users; 查询整个表</span><br><span class=\"line\"></span><br><span class=\"line\">select username,nickname from users where username=&apos;lisi&apos; and password=&apos;123&apos;; 关键字段查询</span><br><span class=\"line\"></span><br><span class=\"line\">select * from blogs order by id desc; 倒序查询</span><br><span class=\"line\"></span><br><span class=\"line\">select count(id) as `count` from blogs; 查询总数，*号查询所有的列</span><br><span class=\"line\"></span><br><span class=\"line\">select * from blogs order by id desc limit 3; 倒序查询blog表的3条数据</span><br><span class=\"line\"></span><br><span class=\"line\">select * from blogs order by id desc limit 2 offset 2; 一页2条数据，这是第二页</span><br><span class=\"line\"></span><br><span class=\"line\">select blogs.*, users.username,users.nickname from blogs inner join users on users.id = blogs.userid; 查询blogs和users两个表的数据</span><br><span class=\"line\"></span><br><span class=\"line\">select blogs.*, users.username,users.nickname from blogs inner join users on users.id = blogs.userid whers users.username = &apos;lisi&apos;; 查询关联lisi的数据</span><br><span class=\"line\"></span><br><span class=\"line\">3.更新</span><br><span class=\"line\">update blogs set content=&apos;内容1111&apos; where id=2;</span><br><span class=\"line\"></span><br><span class=\"line\">4.删</span><br><span class=\"line\">delete from blogs where id=4;</span><br></pre></td></tr></table></figure>\n<h4 id=\"连接mysql\"><a href=\"#连接mysql\" class=\"headerlink\" title=\"连接mysql\"></a>连接mysql</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">seq.js</span><br><span class=\"line\"></span><br><span class=\"line\">const Sequelize = require(&apos;sequelize&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">const conf = &#123;</span><br><span class=\"line\">    host: &apos;localhost&apos;,</span><br><span class=\"line\">    dialect: &apos;mysql&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const seq = new Sequelize(&apos;koa2_weibo_db&apos;,&apos;root&apos;,&apos;&apos;,conf)</span><br><span class=\"line\"></span><br><span class=\"line\">// seq.authenticate().then(() =&gt; &#123;</span><br><span class=\"line\">//     console.log(&apos;ok&apos;)</span><br><span class=\"line\">// &#125;).catch(() =&gt; &#123;</span><br><span class=\"line\">//     console.log(&apos;err&apos;)</span><br><span class=\"line\">// &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = seq</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建模型\"><a href=\"#创建模型\" class=\"headerlink\" title=\"创建模型\"></a>创建模型</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Sequelize = require(&apos;sequelize&apos;)</span><br><span class=\"line\">const seq = require(&apos;./seq&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">//创建 User 模型，数据表的名字是users</span><br><span class=\"line\">const User = seq.define(&apos;user&apos;,&#123;</span><br><span class=\"line\">    //id 会自动创建，并设为主键、自增</span><br><span class=\"line\">    userName: &#123;</span><br><span class=\"line\">        type: Sequelize.STRING, //varchar(255)</span><br><span class=\"line\">        allowNull: false //不能为空</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    password: &#123;</span><br><span class=\"line\">        type: Sequelize.STRING,</span><br><span class=\"line\">        allowNull: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    nickName: &#123;</span><br><span class=\"line\">        type: Sequelize.STRING,</span><br><span class=\"line\">        comment: &apos;昵称&apos; //注释</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const Blog = seq.define(&apos;blog&apos;,&#123;</span><br><span class=\"line\">    //id 会自动创建，并设为主键、自增</span><br><span class=\"line\">    title: &#123;</span><br><span class=\"line\">        type: Sequelize.STRING, //varchar(255)</span><br><span class=\"line\">        allowNull: false //不能为空</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        type: Sequelize.STRING,</span><br><span class=\"line\">        allowNull: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    userId: &#123;</span><br><span class=\"line\">        type: Sequelize.INTEGER,</span><br><span class=\"line\">        allowNull: false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 外键关联</span><br><span class=\"line\">Blog.belongsTo(User, &#123;</span><br><span class=\"line\">    //创建外键 Blog.userId =&gt; User.id</span><br><span class=\"line\">    foreignKey: &apos;userId&apos;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">User.hasMany(Blog, &#123;</span><br><span class=\"line\">    foreignKey: &apos;userId&apos;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    User,</span><br><span class=\"line\">    Blog</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; User, Blog &#125; = require(&apos;./model&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">!(async function() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //创建用户</span><br><span class=\"line\">    const zhangsan = await User.create(&#123;</span><br><span class=\"line\">        userName: &apos;zhangsan&apos;,</span><br><span class=\"line\">        password: &apos;123&apos;,</span><br><span class=\"line\">        nickName: &apos;张三&apos;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;zhangsan&apos;, zhangsan.dataValues)</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<h4 id=\"查找数据\"><a href=\"#查找数据\" class=\"headerlink\" title=\"查找数据\"></a>查找数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; Bolg, User &#125; = require(&apos;./model&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">!(async function () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    const zhangsan = await User.findOne(&#123;</span><br><span class=\"line\">        where: &#123;</span><br><span class=\"line\">            userName: &apos;zhangsan&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    console.log(&apos;zhangsan&apos;,zhangsan.dataValues)</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<h3 id=\"nodejs-调试\"><a href=\"#nodejs-调试\" class=\"headerlink\" title=\"nodejs 调试\"></a>nodejs 调试</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;cross-env NODE_ENV=dev ./node_modules/.bin/nodemon --inspect=9229 bin/www&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">chrome://inspect/#devices</span><br><span class=\"line\"></span><br><span class=\"line\">点击inspect</span><br></pre></td></tr></table></figure>\n<h3 id=\"jwt\"><a href=\"#jwt\" class=\"headerlink\" title=\"jwt\"></a>jwt</h3><ol>\n<li>jwt - json web token </li>\n<li>用户认证成功之后，server 端返回一个加密的token给客户端</li>\n<li>客户端后续每次请求都带token,以示当前用户的身份</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.js</span><br><span class=\"line\"></span><br><span class=\"line\">npm i koa-jwt jsonwebtoken</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(jwtKoa(&#123;</span><br><span class=\"line\">\tsecret: SECRET, //加密规则</span><br><span class=\"line\">&#125;).unless(&#123;</span><br><span class=\"line\">\tpath: [/^\\/users\\/login/] //自定义哪些目录忽略 jwt 验证</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const jwt = require(&apos;jsonwebtoken&apos;)</span><br><span class=\"line\">const util = require(&apos;util&apos;)</span><br><span class=\"line\">const verify = util.promisify(jwt.verify)</span><br><span class=\"line\"></span><br><span class=\"line\">模拟登录接口 SECRET加密规则</span><br><span class=\"line\">let token </span><br><span class=\"line\">if (userInfo) &#123;</span><br><span class=\"line\">    token = jwt.sign(userInfo, SECRET, &#123;expiresIn: &apos;1h&apos;&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">模拟个人信息接口，解密个人信息</span><br><span class=\"line\">router.get(&apos;/getUserInfo&apos;,async (ctx,next) =&gt; &#123;</span><br><span class=\"line\">\tconst token = ctx.header.authorization</span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">\t\tconst payload = await verify(token.split(&apos; &apos;)[1],SECRET)</span><br><span class=\"line\">\t\tctx.body = &#123;</span><br><span class=\"line\">\t\t\tcode:0,</span><br><span class=\"line\">\t\t\tdata: &#123;</span><br><span class=\"line\">\t\t\t\tuserInfo:payload</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tmsg: &apos;成功&apos;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; catch (error) &#123;</span><br><span class=\"line\">\t\tctx.body = &#123;</span><br><span class=\"line\">\t\t\tcode: -1,</span><br><span class=\"line\">\t\t\tmsg: &apos;failed&apos;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前端头部携带token</span><br><span class=\"line\">Bearer + 空格 + 服务端返回的token</span><br><span class=\"line\">Authorization Bearer token</span><br></pre></td></tr></table></figure>\n<h3 id=\"ajv-数据校验规则\"><a href=\"#ajv-数据校验规则\" class=\"headerlink\" title=\"ajv 数据校验规则\"></a>ajv 数据校验规则</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i ajv</span><br><span class=\"line\"></span><br><span class=\"line\">_validate.js</span><br><span class=\"line\"></span><br><span class=\"line\">const Ajv = require(&apos;ajv&apos;)</span><br><span class=\"line\">const ajv = new Ajv(&#123;</span><br><span class=\"line\">    // allErrors: true // 输出所有的错误（比较慢）</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * json schema 校验</span><br><span class=\"line\"> * @param &#123;Object&#125; schema json schema 规则</span><br><span class=\"line\"> * @param &#123;Object&#125; data 待校验的数据</span><br><span class=\"line\"> */</span><br><span class=\"line\">function validate(schema, data = &#123;&#125;) &#123;</span><br><span class=\"line\">    const valid = ajv.validate(schema, data)</span><br><span class=\"line\">    if (!valid) &#123;</span><br><span class=\"line\">        return ajv.errors[0]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = validate</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user.js</span><br><span class=\"line\"></span><br><span class=\"line\">const validate = require(&apos;./_validate&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 校验规则</span><br><span class=\"line\">const SCHEMA = &#123;</span><br><span class=\"line\">    type: &apos;object&apos;,</span><br><span class=\"line\">    properties: &#123;</span><br><span class=\"line\">        userName: &#123;</span><br><span class=\"line\">            type: &apos;string&apos;,</span><br><span class=\"line\">            pattern: &apos;^[a-zA-Z][a-zA-Z0-9_]+$&apos;, // 字母开头，字母数字下划线</span><br><span class=\"line\">            maxLength: 255,</span><br><span class=\"line\">            minLength: 2</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        password: &#123;</span><br><span class=\"line\">            type: &apos;string&apos;,</span><br><span class=\"line\">            maxLength: 255,</span><br><span class=\"line\">            minLength: 3</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        newPassword: &#123;</span><br><span class=\"line\">            type: &apos;string&apos;,</span><br><span class=\"line\">            maxLength: 255,</span><br><span class=\"line\">            minLength: 3</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        nickName: &#123;</span><br><span class=\"line\">            type: &apos;string&apos;,</span><br><span class=\"line\">            maxLength: 255</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        picture: &#123;</span><br><span class=\"line\">            type: &apos;string&apos;,</span><br><span class=\"line\">            maxLength: 255</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        city: &#123;</span><br><span class=\"line\">            type: &apos;string&apos;,</span><br><span class=\"line\">            maxLength: 255,</span><br><span class=\"line\">            minLength: 2</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        gender: &#123;</span><br><span class=\"line\">            type: &apos;number&apos;,</span><br><span class=\"line\">            minimum: 1,</span><br><span class=\"line\">            maximum: 3</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 校验用户数据格式</span><br><span class=\"line\"> * @param &#123;Object&#125; data 用户数据</span><br><span class=\"line\"> */</span><br><span class=\"line\">function userValidate(data = &#123;&#125;) &#123;</span><br><span class=\"line\">    return validate(SCHEMA, data)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = userValidate</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">中间件函数</span><br><span class=\"line\"></span><br><span class=\"line\">function genValidator(validatorFn) &#123;</span><br><span class=\"line\">    async function validator(ctx,next) &#123;</span><br><span class=\"line\">        const data = ctx.request.body</span><br><span class=\"line\">        const error = validatorFn(data)</span><br><span class=\"line\">        if (error) &#123;</span><br><span class=\"line\">            ctx.body = new ErrorModel(jsonSchemaFileInfo)</span><br><span class=\"line\">            return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        await next()</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    return  validator</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    genValidator</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"图片上传\"><a href=\"#图片上传\" class=\"headerlink\" title=\"图片上传\"></a>图片上传</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i formidable-upload-koa fs-extra --save</span><br><span class=\"line\"></span><br><span class=\"line\">const koaFrom = require(&apos;formidable-upload-koa&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">1.上传图片,koaFrom作为一个中间件，返回图片的大小，路径，名字，type</span><br><span class=\"line\">2.限制图片大小，大于删除图片</span><br><span class=\"line\">3.防止图片重命名字</span><br><span class=\"line\">4.创建存放文件的目录</span><br><span class=\"line\">5.移动默认的目录到新创建的目录</span><br><span class=\"line\">6.每次启动项目，判断图片存放的目录是否存在</span><br><span class=\"line\">router.post(&apos;/upload&apos;, loginCheck, koaFrom(), async (ctx,next) =&gt; &#123;</span><br><span class=\"line\">    const file = ctx.req.files[&apos;file&apos;]</span><br><span class=\"line\">    const &#123; size, path, name, type &#125; = file</span><br><span class=\"line\">    ctx.body = await saveFile(&#123;</span><br><span class=\"line\">        size, </span><br><span class=\"line\">        name, </span><br><span class=\"line\">        type,</span><br><span class=\"line\">        filePath: path </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const path = require(&apos;path&apos;)</span><br><span class=\"line\">const fse = require(&apos;fs-extra&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">//存放图片的目录</span><br><span class=\"line\">const DIST_FOLDER_PATH = path.join(__dirname, &apos;..&apos;, &apos;..&apos;, &apos;uploadFiles&apos;)</span><br><span class=\"line\">// 文件最大体积</span><br><span class=\"line\">const MIX_SIZE = 1024 * 1024 * 1024</span><br><span class=\"line\"></span><br><span class=\"line\">//是否需要创建目录</span><br><span class=\"line\">fse.pathExists(DIST_FOLDER_PATH).then(exist =&gt; &#123;</span><br><span class=\"line\">    if (!exist) &#123;</span><br><span class=\"line\">        fse.ensureDir(DIST_FOLDER_PATH)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 保存文件</span><br><span class=\"line\"> * @param &#123;number&#125; size 文件名</span><br><span class=\"line\"> * @param &#123;string&#125; filePath 文件类型</span><br><span class=\"line\"> * @param &#123;string&#125; name 文件体积大小 </span><br><span class=\"line\"> * @param &#123;string&#125; type 文件路径 </span><br><span class=\"line\"> */</span><br><span class=\"line\">async function saveFile(&#123; size, filePath, name, type &#125;) &#123;</span><br><span class=\"line\">    if (size &gt; MIX_SIZE) &#123;</span><br><span class=\"line\">        await fse.remove(path)</span><br><span class=\"line\">        return new ErrorModel(uploadFileSizeFailInfo)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //移动文件</span><br><span class=\"line\">    const fileName = Date.now() + &apos;.&apos; + name</span><br><span class=\"line\">    const distFilePath = path.join(filePath, DIST_FOLDER_PATH)</span><br><span class=\"line\">    await fse.move(filePath, distFilePath)</span><br><span class=\"line\">    return new SuccessModel(&#123;</span><br><span class=\"line\">        url: &apos;/&apos; + fileName</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.js</span><br><span class=\"line\">app.use(koaStatic(path.join(__dirname, &apos;..&apos;,&apos;uploadFiles&apos;)))</span><br></pre></td></tr></table></figure>\n<h3 id=\"xss过滤\"><a href=\"#xss过滤\" class=\"headerlink\" title=\"xss过滤\"></a>xss过滤</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装</span><br><span class=\"line\">npm i xss --save</span><br><span class=\"line\"></span><br><span class=\"line\">引入</span><br><span class=\"line\">const xss = require(&apos;xss&apos;)</span><br><span class=\"line\">xss(content)</span><br></pre></td></tr></table></figure>\n<h3 id=\"PM2\"><a href=\"#PM2\" class=\"headerlink\" title=\"PM2\"></a>PM2</h3><h4 id=\"PM2介绍\"><a href=\"#PM2介绍\" class=\"headerlink\" title=\"PM2介绍\"></a>PM2介绍</h4><p>nodejs进程管理工具，可以利用它来简化很多node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。<br>守护进程：服务挂掉自动重启<br>多进程：更好的利用CPU和内存</p>\n<h4 id=\"PM2-配置和使用\"><a href=\"#PM2-配置和使用\" class=\"headerlink\" title=\"PM2 配置和使用\"></a>PM2 配置和使用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看所有进程的列表</span><br><span class=\"line\">pm2 list</span><br><span class=\"line\"></span><br><span class=\"line\">重启pm2的进程</span><br><span class=\"line\">pm2 restart &lt;App name or id&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">停止进程服务</span><br><span class=\"line\">pm2 stop &lt;App name or id&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">删除进程</span><br><span class=\"line\">pmg2 delete &lt;App name or id&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">启动</span><br><span class=\"line\">pm2 start &lt;App name or id&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">查看进程信息</span><br><span class=\"line\">pm2 info &lt;App name or id&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">监控</span><br><span class=\"line\">pm2 monit www</span><br></pre></td></tr></table></figure>\n<p>更好的利用内存和CPU<br>进程之间无法通讯，因此 redis mysql要用统一的服务</p>\n<h3 id=\"nginx-代理\"><a href=\"#nginx-代理\" class=\"headerlink\" title=\"nginx 代理\"></a>nginx 代理</h3><h4 id=\"nginx介绍\"><a href=\"#nginx介绍\" class=\"headerlink\" title=\"nginx介绍\"></a>nginx介绍</h4><p>1.静态资源服务器<br>2.负载均衡<br>3.反向代理</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"nodejs开发简易版微博\"><a href=\"#nodejs开发简易版微博\" class=\"headerlink\" title=\"nodejs开发简易版微博\"></a>nodejs开发简易版微博</h3>","more":"<h3 id=\"创建-Koa2-项目\"><a href=\"#创建-Koa2-项目\" class=\"headerlink\" title=\"创建 Koa2 项目\"></a>创建 Koa2 项目</h3><p>1.项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">koa2 -e name (-e用ejs作为模版引擎)</span><br><span class=\"line\"></span><br><span class=\"line\">npm i </span><br><span class=\"line\"></span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure></p>\n<p>2.环境变量，更新内容不需要重启服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i cross-env</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;dev&quot;: &quot;cross-env NODE_ENV=dev ./node_modules/.bin/nodemon bin/www&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;prd&quot;: &quot;cross-env NODE_ENV=production pm2 start bin/www&quot;,</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ejs的使用\"><a href=\"#ejs的使用\" class=\"headerlink\" title=\"ejs的使用\"></a>ejs的使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">引入title参数</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;p&gt;EJS Welcome to &lt;%= title %&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">引入ejs组件</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%- include(&apos;./user-info&apos;,&#123;</span><br><span class=\"line\">    isMe</span><br><span class=\"line\">&#125;) %&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 判断</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &lt;% if (isMe) &#123; %&gt;</span><br><span class=\"line\">        &lt;p&gt;真&lt;/p&gt;</span><br><span class=\"line\">    &lt;% &#125; else &#123; %&gt;</span><br><span class=\"line\">        &lt;p&gt;假&lt;/p&gt;</span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">循环</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;% blogList.forEach(blog =&gt; &#123; %&gt;</span><br><span class=\"line\">        &lt;li&gt; &lt;%= blog%&gt; &lt;/li&gt;</span><br><span class=\"line\">    &lt;% &#125;) %&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    console.log(&apos;100&apos;)</span><br><span class=\"line\">&lt;/sctipt&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h3><h4 id=\"查询语句\"><a href=\"#查询语句\" class=\"headerlink\" title=\"查询语句\"></a>查询语句</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.增</span><br><span class=\"line\">insert into users(username,`password`,nickname) values(&apos;list&apos;,&apos;123&apos;,&apos;李四&apos;);</span><br><span class=\"line\">password是关键字</span><br><span class=\"line\"></span><br><span class=\"line\">2.查</span><br><span class=\"line\">select * from users; 查询整个表</span><br><span class=\"line\"></span><br><span class=\"line\">select username,nickname from users where username=&apos;lisi&apos; and password=&apos;123&apos;; 关键字段查询</span><br><span class=\"line\"></span><br><span class=\"line\">select * from blogs order by id desc; 倒序查询</span><br><span class=\"line\"></span><br><span class=\"line\">select count(id) as `count` from blogs; 查询总数，*号查询所有的列</span><br><span class=\"line\"></span><br><span class=\"line\">select * from blogs order by id desc limit 3; 倒序查询blog表的3条数据</span><br><span class=\"line\"></span><br><span class=\"line\">select * from blogs order by id desc limit 2 offset 2; 一页2条数据，这是第二页</span><br><span class=\"line\"></span><br><span class=\"line\">select blogs.*, users.username,users.nickname from blogs inner join users on users.id = blogs.userid; 查询blogs和users两个表的数据</span><br><span class=\"line\"></span><br><span class=\"line\">select blogs.*, users.username,users.nickname from blogs inner join users on users.id = blogs.userid whers users.username = &apos;lisi&apos;; 查询关联lisi的数据</span><br><span class=\"line\"></span><br><span class=\"line\">3.更新</span><br><span class=\"line\">update blogs set content=&apos;内容1111&apos; where id=2;</span><br><span class=\"line\"></span><br><span class=\"line\">4.删</span><br><span class=\"line\">delete from blogs where id=4;</span><br></pre></td></tr></table></figure>\n<h4 id=\"连接mysql\"><a href=\"#连接mysql\" class=\"headerlink\" title=\"连接mysql\"></a>连接mysql</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">seq.js</span><br><span class=\"line\"></span><br><span class=\"line\">const Sequelize = require(&apos;sequelize&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">const conf = &#123;</span><br><span class=\"line\">    host: &apos;localhost&apos;,</span><br><span class=\"line\">    dialect: &apos;mysql&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const seq = new Sequelize(&apos;koa2_weibo_db&apos;,&apos;root&apos;,&apos;&apos;,conf)</span><br><span class=\"line\"></span><br><span class=\"line\">// seq.authenticate().then(() =&gt; &#123;</span><br><span class=\"line\">//     console.log(&apos;ok&apos;)</span><br><span class=\"line\">// &#125;).catch(() =&gt; &#123;</span><br><span class=\"line\">//     console.log(&apos;err&apos;)</span><br><span class=\"line\">// &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = seq</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建模型\"><a href=\"#创建模型\" class=\"headerlink\" title=\"创建模型\"></a>创建模型</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Sequelize = require(&apos;sequelize&apos;)</span><br><span class=\"line\">const seq = require(&apos;./seq&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">//创建 User 模型，数据表的名字是users</span><br><span class=\"line\">const User = seq.define(&apos;user&apos;,&#123;</span><br><span class=\"line\">    //id 会自动创建，并设为主键、自增</span><br><span class=\"line\">    userName: &#123;</span><br><span class=\"line\">        type: Sequelize.STRING, //varchar(255)</span><br><span class=\"line\">        allowNull: false //不能为空</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    password: &#123;</span><br><span class=\"line\">        type: Sequelize.STRING,</span><br><span class=\"line\">        allowNull: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    nickName: &#123;</span><br><span class=\"line\">        type: Sequelize.STRING,</span><br><span class=\"line\">        comment: &apos;昵称&apos; //注释</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const Blog = seq.define(&apos;blog&apos;,&#123;</span><br><span class=\"line\">    //id 会自动创建，并设为主键、自增</span><br><span class=\"line\">    title: &#123;</span><br><span class=\"line\">        type: Sequelize.STRING, //varchar(255)</span><br><span class=\"line\">        allowNull: false //不能为空</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        type: Sequelize.STRING,</span><br><span class=\"line\">        allowNull: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    userId: &#123;</span><br><span class=\"line\">        type: Sequelize.INTEGER,</span><br><span class=\"line\">        allowNull: false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 外键关联</span><br><span class=\"line\">Blog.belongsTo(User, &#123;</span><br><span class=\"line\">    //创建外键 Blog.userId =&gt; User.id</span><br><span class=\"line\">    foreignKey: &apos;userId&apos;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">User.hasMany(Blog, &#123;</span><br><span class=\"line\">    foreignKey: &apos;userId&apos;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    User,</span><br><span class=\"line\">    Blog</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; User, Blog &#125; = require(&apos;./model&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">!(async function() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    //创建用户</span><br><span class=\"line\">    const zhangsan = await User.create(&#123;</span><br><span class=\"line\">        userName: &apos;zhangsan&apos;,</span><br><span class=\"line\">        password: &apos;123&apos;,</span><br><span class=\"line\">        nickName: &apos;张三&apos;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(&apos;zhangsan&apos;, zhangsan.dataValues)</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<h4 id=\"查找数据\"><a href=\"#查找数据\" class=\"headerlink\" title=\"查找数据\"></a>查找数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; Bolg, User &#125; = require(&apos;./model&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">!(async function () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    const zhangsan = await User.findOne(&#123;</span><br><span class=\"line\">        where: &#123;</span><br><span class=\"line\">            userName: &apos;zhangsan&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    console.log(&apos;zhangsan&apos;,zhangsan.dataValues)</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<h3 id=\"nodejs-调试\"><a href=\"#nodejs-调试\" class=\"headerlink\" title=\"nodejs 调试\"></a>nodejs 调试</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;cross-env NODE_ENV=dev ./node_modules/.bin/nodemon --inspect=9229 bin/www&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">chrome://inspect/#devices</span><br><span class=\"line\"></span><br><span class=\"line\">点击inspect</span><br></pre></td></tr></table></figure>\n<h3 id=\"jwt\"><a href=\"#jwt\" class=\"headerlink\" title=\"jwt\"></a>jwt</h3><ol>\n<li>jwt - json web token </li>\n<li>用户认证成功之后，server 端返回一个加密的token给客户端</li>\n<li>客户端后续每次请求都带token,以示当前用户的身份</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.js</span><br><span class=\"line\"></span><br><span class=\"line\">npm i koa-jwt jsonwebtoken</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(jwtKoa(&#123;</span><br><span class=\"line\">\tsecret: SECRET, //加密规则</span><br><span class=\"line\">&#125;).unless(&#123;</span><br><span class=\"line\">\tpath: [/^\\/users\\/login/] //自定义哪些目录忽略 jwt 验证</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const jwt = require(&apos;jsonwebtoken&apos;)</span><br><span class=\"line\">const util = require(&apos;util&apos;)</span><br><span class=\"line\">const verify = util.promisify(jwt.verify)</span><br><span class=\"line\"></span><br><span class=\"line\">模拟登录接口 SECRET加密规则</span><br><span class=\"line\">let token </span><br><span class=\"line\">if (userInfo) &#123;</span><br><span class=\"line\">    token = jwt.sign(userInfo, SECRET, &#123;expiresIn: &apos;1h&apos;&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">模拟个人信息接口，解密个人信息</span><br><span class=\"line\">router.get(&apos;/getUserInfo&apos;,async (ctx,next) =&gt; &#123;</span><br><span class=\"line\">\tconst token = ctx.header.authorization</span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">\t\tconst payload = await verify(token.split(&apos; &apos;)[1],SECRET)</span><br><span class=\"line\">\t\tctx.body = &#123;</span><br><span class=\"line\">\t\t\tcode:0,</span><br><span class=\"line\">\t\t\tdata: &#123;</span><br><span class=\"line\">\t\t\t\tuserInfo:payload</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tmsg: &apos;成功&apos;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; catch (error) &#123;</span><br><span class=\"line\">\t\tctx.body = &#123;</span><br><span class=\"line\">\t\t\tcode: -1,</span><br><span class=\"line\">\t\t\tmsg: &apos;failed&apos;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前端头部携带token</span><br><span class=\"line\">Bearer + 空格 + 服务端返回的token</span><br><span class=\"line\">Authorization Bearer token</span><br></pre></td></tr></table></figure>\n<h3 id=\"ajv-数据校验规则\"><a href=\"#ajv-数据校验规则\" class=\"headerlink\" title=\"ajv 数据校验规则\"></a>ajv 数据校验规则</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i ajv</span><br><span class=\"line\"></span><br><span class=\"line\">_validate.js</span><br><span class=\"line\"></span><br><span class=\"line\">const Ajv = require(&apos;ajv&apos;)</span><br><span class=\"line\">const ajv = new Ajv(&#123;</span><br><span class=\"line\">    // allErrors: true // 输出所有的错误（比较慢）</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * json schema 校验</span><br><span class=\"line\"> * @param &#123;Object&#125; schema json schema 规则</span><br><span class=\"line\"> * @param &#123;Object&#125; data 待校验的数据</span><br><span class=\"line\"> */</span><br><span class=\"line\">function validate(schema, data = &#123;&#125;) &#123;</span><br><span class=\"line\">    const valid = ajv.validate(schema, data)</span><br><span class=\"line\">    if (!valid) &#123;</span><br><span class=\"line\">        return ajv.errors[0]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = validate</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user.js</span><br><span class=\"line\"></span><br><span class=\"line\">const validate = require(&apos;./_validate&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 校验规则</span><br><span class=\"line\">const SCHEMA = &#123;</span><br><span class=\"line\">    type: &apos;object&apos;,</span><br><span class=\"line\">    properties: &#123;</span><br><span class=\"line\">        userName: &#123;</span><br><span class=\"line\">            type: &apos;string&apos;,</span><br><span class=\"line\">            pattern: &apos;^[a-zA-Z][a-zA-Z0-9_]+$&apos;, // 字母开头，字母数字下划线</span><br><span class=\"line\">            maxLength: 255,</span><br><span class=\"line\">            minLength: 2</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        password: &#123;</span><br><span class=\"line\">            type: &apos;string&apos;,</span><br><span class=\"line\">            maxLength: 255,</span><br><span class=\"line\">            minLength: 3</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        newPassword: &#123;</span><br><span class=\"line\">            type: &apos;string&apos;,</span><br><span class=\"line\">            maxLength: 255,</span><br><span class=\"line\">            minLength: 3</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        nickName: &#123;</span><br><span class=\"line\">            type: &apos;string&apos;,</span><br><span class=\"line\">            maxLength: 255</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        picture: &#123;</span><br><span class=\"line\">            type: &apos;string&apos;,</span><br><span class=\"line\">            maxLength: 255</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        city: &#123;</span><br><span class=\"line\">            type: &apos;string&apos;,</span><br><span class=\"line\">            maxLength: 255,</span><br><span class=\"line\">            minLength: 2</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        gender: &#123;</span><br><span class=\"line\">            type: &apos;number&apos;,</span><br><span class=\"line\">            minimum: 1,</span><br><span class=\"line\">            maximum: 3</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 校验用户数据格式</span><br><span class=\"line\"> * @param &#123;Object&#125; data 用户数据</span><br><span class=\"line\"> */</span><br><span class=\"line\">function userValidate(data = &#123;&#125;) &#123;</span><br><span class=\"line\">    return validate(SCHEMA, data)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = userValidate</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">中间件函数</span><br><span class=\"line\"></span><br><span class=\"line\">function genValidator(validatorFn) &#123;</span><br><span class=\"line\">    async function validator(ctx,next) &#123;</span><br><span class=\"line\">        const data = ctx.request.body</span><br><span class=\"line\">        const error = validatorFn(data)</span><br><span class=\"line\">        if (error) &#123;</span><br><span class=\"line\">            ctx.body = new ErrorModel(jsonSchemaFileInfo)</span><br><span class=\"line\">            return</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        await next()</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    return  validator</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    genValidator</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"图片上传\"><a href=\"#图片上传\" class=\"headerlink\" title=\"图片上传\"></a>图片上传</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i formidable-upload-koa fs-extra --save</span><br><span class=\"line\"></span><br><span class=\"line\">const koaFrom = require(&apos;formidable-upload-koa&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">1.上传图片,koaFrom作为一个中间件，返回图片的大小，路径，名字，type</span><br><span class=\"line\">2.限制图片大小，大于删除图片</span><br><span class=\"line\">3.防止图片重命名字</span><br><span class=\"line\">4.创建存放文件的目录</span><br><span class=\"line\">5.移动默认的目录到新创建的目录</span><br><span class=\"line\">6.每次启动项目，判断图片存放的目录是否存在</span><br><span class=\"line\">router.post(&apos;/upload&apos;, loginCheck, koaFrom(), async (ctx,next) =&gt; &#123;</span><br><span class=\"line\">    const file = ctx.req.files[&apos;file&apos;]</span><br><span class=\"line\">    const &#123; size, path, name, type &#125; = file</span><br><span class=\"line\">    ctx.body = await saveFile(&#123;</span><br><span class=\"line\">        size, </span><br><span class=\"line\">        name, </span><br><span class=\"line\">        type,</span><br><span class=\"line\">        filePath: path </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const path = require(&apos;path&apos;)</span><br><span class=\"line\">const fse = require(&apos;fs-extra&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">//存放图片的目录</span><br><span class=\"line\">const DIST_FOLDER_PATH = path.join(__dirname, &apos;..&apos;, &apos;..&apos;, &apos;uploadFiles&apos;)</span><br><span class=\"line\">// 文件最大体积</span><br><span class=\"line\">const MIX_SIZE = 1024 * 1024 * 1024</span><br><span class=\"line\"></span><br><span class=\"line\">//是否需要创建目录</span><br><span class=\"line\">fse.pathExists(DIST_FOLDER_PATH).then(exist =&gt; &#123;</span><br><span class=\"line\">    if (!exist) &#123;</span><br><span class=\"line\">        fse.ensureDir(DIST_FOLDER_PATH)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 保存文件</span><br><span class=\"line\"> * @param &#123;number&#125; size 文件名</span><br><span class=\"line\"> * @param &#123;string&#125; filePath 文件类型</span><br><span class=\"line\"> * @param &#123;string&#125; name 文件体积大小 </span><br><span class=\"line\"> * @param &#123;string&#125; type 文件路径 </span><br><span class=\"line\"> */</span><br><span class=\"line\">async function saveFile(&#123; size, filePath, name, type &#125;) &#123;</span><br><span class=\"line\">    if (size &gt; MIX_SIZE) &#123;</span><br><span class=\"line\">        await fse.remove(path)</span><br><span class=\"line\">        return new ErrorModel(uploadFileSizeFailInfo)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //移动文件</span><br><span class=\"line\">    const fileName = Date.now() + &apos;.&apos; + name</span><br><span class=\"line\">    const distFilePath = path.join(filePath, DIST_FOLDER_PATH)</span><br><span class=\"line\">    await fse.move(filePath, distFilePath)</span><br><span class=\"line\">    return new SuccessModel(&#123;</span><br><span class=\"line\">        url: &apos;/&apos; + fileName</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.js</span><br><span class=\"line\">app.use(koaStatic(path.join(__dirname, &apos;..&apos;,&apos;uploadFiles&apos;)))</span><br></pre></td></tr></table></figure>\n<h3 id=\"xss过滤\"><a href=\"#xss过滤\" class=\"headerlink\" title=\"xss过滤\"></a>xss过滤</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装</span><br><span class=\"line\">npm i xss --save</span><br><span class=\"line\"></span><br><span class=\"line\">引入</span><br><span class=\"line\">const xss = require(&apos;xss&apos;)</span><br><span class=\"line\">xss(content)</span><br></pre></td></tr></table></figure>\n<h3 id=\"PM2\"><a href=\"#PM2\" class=\"headerlink\" title=\"PM2\"></a>PM2</h3><h4 id=\"PM2介绍\"><a href=\"#PM2介绍\" class=\"headerlink\" title=\"PM2介绍\"></a>PM2介绍</h4><p>nodejs进程管理工具，可以利用它来简化很多node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。<br>守护进程：服务挂掉自动重启<br>多进程：更好的利用CPU和内存</p>\n<h4 id=\"PM2-配置和使用\"><a href=\"#PM2-配置和使用\" class=\"headerlink\" title=\"PM2 配置和使用\"></a>PM2 配置和使用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看所有进程的列表</span><br><span class=\"line\">pm2 list</span><br><span class=\"line\"></span><br><span class=\"line\">重启pm2的进程</span><br><span class=\"line\">pm2 restart &lt;App name or id&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">停止进程服务</span><br><span class=\"line\">pm2 stop &lt;App name or id&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">删除进程</span><br><span class=\"line\">pmg2 delete &lt;App name or id&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">启动</span><br><span class=\"line\">pm2 start &lt;App name or id&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">查看进程信息</span><br><span class=\"line\">pm2 info &lt;App name or id&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">监控</span><br><span class=\"line\">pm2 monit www</span><br></pre></td></tr></table></figure>\n<p>更好的利用内存和CPU<br>进程之间无法通讯，因此 redis mysql要用统一的服务</p>\n<h3 id=\"nginx-代理\"><a href=\"#nginx-代理\" class=\"headerlink\" title=\"nginx 代理\"></a>nginx 代理</h3><h4 id=\"nginx介绍\"><a href=\"#nginx介绍\" class=\"headerlink\" title=\"nginx介绍\"></a>nginx介绍</h4><p>1.静态资源服务器<br>2.负载均衡<br>3.反向代理</p>"},{"title":"react-native在Android物理回退键的问题","date":"2019-06-23T16:00:00.000Z","_content":"\n### BackHandler\n<!-- more -->\n\nBackHandler：监听设备上的后退按钮事件\nAndroid：监听后退按钮事件。如果没有添加任何监听函数，或者所有的监听函数都返回 false，则会执行默认行为，退出应用。\n\n```\nimport React, {PropTypes} from \"react\";\nimport {BackHandler} from \"react-native\";\n\n/**\n * Android物理回退键处理\n */\nexport default class BackPressUtil {\n  constructor(props) {\n    this._hardwareBackPress = this.onHardwareBackPress.bind(this);\n    this.props = props;\n  }\n\n  componentDidMount() {\n    if (this.props.backPress) BackHandler.addEventListener('hardwareBackPress', this._hardwareBackPress);\n  }\n\n  componentWillUnmount() {\n    if (this.props.backPress) BackHandler.removeEventListener('hardwareBackPress', this._hardwareBackPress);\n  }\n\n  onHardwareBackPress(e) {\n    return this.props.backPress(e);\n  }\n}\n\npage.js\n在返回页面调用navigation的goBack方法返回页面\nconstructor(props, updateState) {\n  this.props = props;\n  this.backPress = new BackPress({backPress: () => this.onBackPress()});\n}\n\nonBackPress() {\n  NavigationUtil.goBack(this.props.navigation);\n}  \n```","source":"_posts/react-native-BackHandler.md","raw":"---\ntitle: react-native在Android物理回退键的问题\ndate: 2019-06-24\ntags: ['React Native']\ncategories: React Native\n---\n\n### BackHandler\n<!-- more -->\n\nBackHandler：监听设备上的后退按钮事件\nAndroid：监听后退按钮事件。如果没有添加任何监听函数，或者所有的监听函数都返回 false，则会执行默认行为，退出应用。\n\n```\nimport React, {PropTypes} from \"react\";\nimport {BackHandler} from \"react-native\";\n\n/**\n * Android物理回退键处理\n */\nexport default class BackPressUtil {\n  constructor(props) {\n    this._hardwareBackPress = this.onHardwareBackPress.bind(this);\n    this.props = props;\n  }\n\n  componentDidMount() {\n    if (this.props.backPress) BackHandler.addEventListener('hardwareBackPress', this._hardwareBackPress);\n  }\n\n  componentWillUnmount() {\n    if (this.props.backPress) BackHandler.removeEventListener('hardwareBackPress', this._hardwareBackPress);\n  }\n\n  onHardwareBackPress(e) {\n    return this.props.backPress(e);\n  }\n}\n\npage.js\n在返回页面调用navigation的goBack方法返回页面\nconstructor(props, updateState) {\n  this.props = props;\n  this.backPress = new BackPress({backPress: () => this.onBackPress()});\n}\n\nonBackPress() {\n  NavigationUtil.goBack(this.props.navigation);\n}  \n```","slug":"react-native-BackHandler","published":1,"updated":"2019-06-24T02:08:55.415Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq42r002zhe6jqgtnbjpm","content":"<h3 id=\"BackHandler\"><a href=\"#BackHandler\" class=\"headerlink\" title=\"BackHandler\"></a>BackHandler</h3><a id=\"more\"></a>\n<p>BackHandler：监听设备上的后退按钮事件<br>Android：监听后退按钮事件。如果没有添加任何监听函数，或者所有的监听函数都返回 false，则会执行默认行为，退出应用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123;PropTypes&#125; from &quot;react&quot;;</span><br><span class=\"line\">import &#123;BackHandler&#125; from &quot;react-native&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Android物理回退键处理</span><br><span class=\"line\"> */</span><br><span class=\"line\">export default class BackPressUtil &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    this._hardwareBackPress = this.onHardwareBackPress.bind(this);</span><br><span class=\"line\">    this.props = props;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    if (this.props.backPress) BackHandler.addEventListener(&apos;hardwareBackPress&apos;, this._hardwareBackPress);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    if (this.props.backPress) BackHandler.removeEventListener(&apos;hardwareBackPress&apos;, this._hardwareBackPress);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  onHardwareBackPress(e) &#123;</span><br><span class=\"line\">    return this.props.backPress(e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">page.js</span><br><span class=\"line\">在返回页面调用navigation的goBack方法返回页面</span><br><span class=\"line\">constructor(props, updateState) &#123;</span><br><span class=\"line\">  this.props = props;</span><br><span class=\"line\">  this.backPress = new BackPress(&#123;backPress: () =&gt; this.onBackPress()&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">onBackPress() &#123;</span><br><span class=\"line\">  NavigationUtil.goBack(this.props.navigation);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"BackHandler\"><a href=\"#BackHandler\" class=\"headerlink\" title=\"BackHandler\"></a>BackHandler</h3>","more":"<p>BackHandler：监听设备上的后退按钮事件<br>Android：监听后退按钮事件。如果没有添加任何监听函数，或者所有的监听函数都返回 false，则会执行默认行为，退出应用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123;PropTypes&#125; from &quot;react&quot;;</span><br><span class=\"line\">import &#123;BackHandler&#125; from &quot;react-native&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * Android物理回退键处理</span><br><span class=\"line\"> */</span><br><span class=\"line\">export default class BackPressUtil &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    this._hardwareBackPress = this.onHardwareBackPress.bind(this);</span><br><span class=\"line\">    this.props = props;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    if (this.props.backPress) BackHandler.addEventListener(&apos;hardwareBackPress&apos;, this._hardwareBackPress);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    if (this.props.backPress) BackHandler.removeEventListener(&apos;hardwareBackPress&apos;, this._hardwareBackPress);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  onHardwareBackPress(e) &#123;</span><br><span class=\"line\">    return this.props.backPress(e);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">page.js</span><br><span class=\"line\">在返回页面调用navigation的goBack方法返回页面</span><br><span class=\"line\">constructor(props, updateState) &#123;</span><br><span class=\"line\">  this.props = props;</span><br><span class=\"line\">  this.backPress = new BackPress(&#123;backPress: () =&gt; this.onBackPress()&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">onBackPress() &#123;</span><br><span class=\"line\">  NavigationUtil.goBack(this.props.navigation);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"FlatList","date":"2019-06-20T16:00:00.000Z","_content":"\n### react-native的FlatList\n<!-- more -->\n\n```\nimport React, {Component} from 'react';\nimport {StyleSheet, Text, View,FlatList,RefreshControl,ActivityIndicator} from 'react-native';\n\nconst CITY_NAMES = ['北京','上海','广州','深圳','佛山','清远','湛江']\ntype Props = {};\nexport default class FlatListDemo extends Component<Props> {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: false,\n      dataArray: CITY_NAMES,\n    }\n  }\n\n  loadData(refreshing) {\n    //如果是下拉刷新顶部loading转\n    if (refreshing) {\n      this.setState({\n        isLoading: true,\n      })\n    }\n  \n    setTimeout( () => {\n      let dataArray = []\n      //判断是下拉刷新还是上拉下载\n      if (refreshing) {\n        for (let i = this.state.dataArray.length-1;i>=0;i--) {\n          dataArray.push(this.state.dataArray[i])\n        }\n      }else {\n        dataArray = this.state.dataArray.concat(CITY_NAMES)\n      }\n      \n      this.setState({\n        dataArray:dataArray,\n        isLoading: false,\n      })\n    },1000)\n  }\n\n  _renderItem(data) {\n    return (\n      <View style={styles.item}>\n        <Text style={styles.text}>{data.item}</Text>\n      </View>\n    )\n  }\n\n  genIndicator() {\n    return (\n      <View style={styles.indicatorContainer}>\n        <ActivityIndicator\n          style={styles.indicator}\n          color={'red'}\n          size={'large'}\n          animating={true}\n        />\n        <Text>正在加载更多</Text>\n      </View>\n    )\n  }\n\n\n  //onRefresh：下拉刷新\n  //refreshing：定义Loading状态\n  //RefreshControl：这一组件可以用在ScrollView或FlatList内部，为其添加下拉刷新的功能\n  //ListFooterComponent：尾部组件\n  //onEndReached：当列表被滚动到距离内容最底部不足onEndReachedThreshold的距离时调用\n  render() {\n    return (\n      <View style={styles.container}>\n        <FlatList\n          data={this.state.dataArray}\n          renderItem={(data)=>this._renderItem(data)}\n          // refreshing={this.state.isLoading}\n          // onRefresh={ () => {\n          //   this.loadData();\n          // }}\n          refreshControl={\n            <RefreshControl\n              title={'Loading'} //loading文字\n              colors={'red'} //android的loading颜色\n              tintColor={'red'} //ios的loading颜色\n              titleColor={'red'} //loading文字颜色\n              refreshing={this.state.isLoading}\n              onRefresh={ () => {\n                this.loadData(true)\n              }}\n            />\n          }\n          ListFooterComponent={ () => this.genIndicator()}\n          onEndReached={ () => {\n            this.loadData()\n          }}\n        />\n      </View>\n    );\n  }\n}\n```\n","source":"_posts/react-native-FlatList.md","raw":"---\ntitle: FlatList\ndate: 2019-06-21\ntags: ['React Native']\ncategories: React Native\n---\n\n### react-native的FlatList\n<!-- more -->\n\n```\nimport React, {Component} from 'react';\nimport {StyleSheet, Text, View,FlatList,RefreshControl,ActivityIndicator} from 'react-native';\n\nconst CITY_NAMES = ['北京','上海','广州','深圳','佛山','清远','湛江']\ntype Props = {};\nexport default class FlatListDemo extends Component<Props> {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: false,\n      dataArray: CITY_NAMES,\n    }\n  }\n\n  loadData(refreshing) {\n    //如果是下拉刷新顶部loading转\n    if (refreshing) {\n      this.setState({\n        isLoading: true,\n      })\n    }\n  \n    setTimeout( () => {\n      let dataArray = []\n      //判断是下拉刷新还是上拉下载\n      if (refreshing) {\n        for (let i = this.state.dataArray.length-1;i>=0;i--) {\n          dataArray.push(this.state.dataArray[i])\n        }\n      }else {\n        dataArray = this.state.dataArray.concat(CITY_NAMES)\n      }\n      \n      this.setState({\n        dataArray:dataArray,\n        isLoading: false,\n      })\n    },1000)\n  }\n\n  _renderItem(data) {\n    return (\n      <View style={styles.item}>\n        <Text style={styles.text}>{data.item}</Text>\n      </View>\n    )\n  }\n\n  genIndicator() {\n    return (\n      <View style={styles.indicatorContainer}>\n        <ActivityIndicator\n          style={styles.indicator}\n          color={'red'}\n          size={'large'}\n          animating={true}\n        />\n        <Text>正在加载更多</Text>\n      </View>\n    )\n  }\n\n\n  //onRefresh：下拉刷新\n  //refreshing：定义Loading状态\n  //RefreshControl：这一组件可以用在ScrollView或FlatList内部，为其添加下拉刷新的功能\n  //ListFooterComponent：尾部组件\n  //onEndReached：当列表被滚动到距离内容最底部不足onEndReachedThreshold的距离时调用\n  render() {\n    return (\n      <View style={styles.container}>\n        <FlatList\n          data={this.state.dataArray}\n          renderItem={(data)=>this._renderItem(data)}\n          // refreshing={this.state.isLoading}\n          // onRefresh={ () => {\n          //   this.loadData();\n          // }}\n          refreshControl={\n            <RefreshControl\n              title={'Loading'} //loading文字\n              colors={'red'} //android的loading颜色\n              tintColor={'red'} //ios的loading颜色\n              titleColor={'red'} //loading文字颜色\n              refreshing={this.state.isLoading}\n              onRefresh={ () => {\n                this.loadData(true)\n              }}\n            />\n          }\n          ListFooterComponent={ () => this.genIndicator()}\n          onEndReached={ () => {\n            this.loadData()\n          }}\n        />\n      </View>\n    );\n  }\n}\n```\n","slug":"react-native-FlatList","published":1,"updated":"2019-06-21T06:14:29.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq42t0034he6jxlkk2agm","content":"<h3 id=\"react-native的FlatList\"><a href=\"#react-native的FlatList\" class=\"headerlink\" title=\"react-native的FlatList\"></a>react-native的FlatList</h3><a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123;Component&#125; from &apos;react&apos;;</span><br><span class=\"line\">import &#123;StyleSheet, Text, View,FlatList,RefreshControl,ActivityIndicator&#125; from &apos;react-native&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">const CITY_NAMES = [&apos;北京&apos;,&apos;上海&apos;,&apos;广州&apos;,&apos;深圳&apos;,&apos;佛山&apos;,&apos;清远&apos;,&apos;湛江&apos;]</span><br><span class=\"line\">type Props = &#123;&#125;;</span><br><span class=\"line\">export default class FlatListDemo extends Component&lt;Props&gt; &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props)</span><br><span class=\"line\">    this.state = &#123;</span><br><span class=\"line\">      isLoading: false,</span><br><span class=\"line\">      dataArray: CITY_NAMES,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  loadData(refreshing) &#123;</span><br><span class=\"line\">    //如果是下拉刷新顶部loading转</span><br><span class=\"line\">    if (refreshing) &#123;</span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">        isLoading: true,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    setTimeout( () =&gt; &#123;</span><br><span class=\"line\">      let dataArray = []</span><br><span class=\"line\">      //判断是下拉刷新还是上拉下载</span><br><span class=\"line\">      if (refreshing) &#123;</span><br><span class=\"line\">        for (let i = this.state.dataArray.length-1;i&gt;=0;i--) &#123;</span><br><span class=\"line\">          dataArray.push(this.state.dataArray[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;else &#123;</span><br><span class=\"line\">        dataArray = this.state.dataArray.concat(CITY_NAMES)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">        dataArray:dataArray,</span><br><span class=\"line\">        isLoading: false,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,1000)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  _renderItem(data) &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;View style=&#123;styles.item&#125;&gt;</span><br><span class=\"line\">        &lt;Text style=&#123;styles.text&#125;&gt;&#123;data.item&#125;&lt;/Text&gt;</span><br><span class=\"line\">      &lt;/View&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  genIndicator() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;View style=&#123;styles.indicatorContainer&#125;&gt;</span><br><span class=\"line\">        &lt;ActivityIndicator</span><br><span class=\"line\">          style=&#123;styles.indicator&#125;</span><br><span class=\"line\">          color=&#123;&apos;red&apos;&#125;</span><br><span class=\"line\">          size=&#123;&apos;large&apos;&#125;</span><br><span class=\"line\">          animating=&#123;true&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">        &lt;Text&gt;正在加载更多&lt;/Text&gt;</span><br><span class=\"line\">      &lt;/View&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  //onRefresh：下拉刷新</span><br><span class=\"line\">  //refreshing：定义Loading状态</span><br><span class=\"line\">  //RefreshControl：这一组件可以用在ScrollView或FlatList内部，为其添加下拉刷新的功能</span><br><span class=\"line\">  //ListFooterComponent：尾部组件</span><br><span class=\"line\">  //onEndReached：当列表被滚动到距离内容最底部不足onEndReachedThreshold的距离时调用</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class=\"line\">        &lt;FlatList</span><br><span class=\"line\">          data=&#123;this.state.dataArray&#125;</span><br><span class=\"line\">          renderItem=&#123;(data)=&gt;this._renderItem(data)&#125;</span><br><span class=\"line\">          // refreshing=&#123;this.state.isLoading&#125;</span><br><span class=\"line\">          // onRefresh=&#123; () =&gt; &#123;</span><br><span class=\"line\">          //   this.loadData();</span><br><span class=\"line\">          // &#125;&#125;</span><br><span class=\"line\">          refreshControl=&#123;</span><br><span class=\"line\">            &lt;RefreshControl</span><br><span class=\"line\">              title=&#123;&apos;Loading&apos;&#125; //loading文字</span><br><span class=\"line\">              colors=&#123;&apos;red&apos;&#125; //android的loading颜色</span><br><span class=\"line\">              tintColor=&#123;&apos;red&apos;&#125; //ios的loading颜色</span><br><span class=\"line\">              titleColor=&#123;&apos;red&apos;&#125; //loading文字颜色</span><br><span class=\"line\">              refreshing=&#123;this.state.isLoading&#125;</span><br><span class=\"line\">              onRefresh=&#123; () =&gt; &#123;</span><br><span class=\"line\">                this.loadData(true)</span><br><span class=\"line\">              &#125;&#125;</span><br><span class=\"line\">            /&gt;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          ListFooterComponent=&#123; () =&gt; this.genIndicator()&#125;</span><br><span class=\"line\">          onEndReached=&#123; () =&gt; &#123;</span><br><span class=\"line\">            this.loadData()</span><br><span class=\"line\">          &#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      &lt;/View&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"react-native的FlatList\"><a href=\"#react-native的FlatList\" class=\"headerlink\" title=\"react-native的FlatList\"></a>react-native的FlatList</h3>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123;Component&#125; from &apos;react&apos;;</span><br><span class=\"line\">import &#123;StyleSheet, Text, View,FlatList,RefreshControl,ActivityIndicator&#125; from &apos;react-native&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">const CITY_NAMES = [&apos;北京&apos;,&apos;上海&apos;,&apos;广州&apos;,&apos;深圳&apos;,&apos;佛山&apos;,&apos;清远&apos;,&apos;湛江&apos;]</span><br><span class=\"line\">type Props = &#123;&#125;;</span><br><span class=\"line\">export default class FlatListDemo extends Component&lt;Props&gt; &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props)</span><br><span class=\"line\">    this.state = &#123;</span><br><span class=\"line\">      isLoading: false,</span><br><span class=\"line\">      dataArray: CITY_NAMES,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  loadData(refreshing) &#123;</span><br><span class=\"line\">    //如果是下拉刷新顶部loading转</span><br><span class=\"line\">    if (refreshing) &#123;</span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">        isLoading: true,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    setTimeout( () =&gt; &#123;</span><br><span class=\"line\">      let dataArray = []</span><br><span class=\"line\">      //判断是下拉刷新还是上拉下载</span><br><span class=\"line\">      if (refreshing) &#123;</span><br><span class=\"line\">        for (let i = this.state.dataArray.length-1;i&gt;=0;i--) &#123;</span><br><span class=\"line\">          dataArray.push(this.state.dataArray[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;else &#123;</span><br><span class=\"line\">        dataArray = this.state.dataArray.concat(CITY_NAMES)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">        dataArray:dataArray,</span><br><span class=\"line\">        isLoading: false,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,1000)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  _renderItem(data) &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;View style=&#123;styles.item&#125;&gt;</span><br><span class=\"line\">        &lt;Text style=&#123;styles.text&#125;&gt;&#123;data.item&#125;&lt;/Text&gt;</span><br><span class=\"line\">      &lt;/View&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  genIndicator() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;View style=&#123;styles.indicatorContainer&#125;&gt;</span><br><span class=\"line\">        &lt;ActivityIndicator</span><br><span class=\"line\">          style=&#123;styles.indicator&#125;</span><br><span class=\"line\">          color=&#123;&apos;red&apos;&#125;</span><br><span class=\"line\">          size=&#123;&apos;large&apos;&#125;</span><br><span class=\"line\">          animating=&#123;true&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">        &lt;Text&gt;正在加载更多&lt;/Text&gt;</span><br><span class=\"line\">      &lt;/View&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  //onRefresh：下拉刷新</span><br><span class=\"line\">  //refreshing：定义Loading状态</span><br><span class=\"line\">  //RefreshControl：这一组件可以用在ScrollView或FlatList内部，为其添加下拉刷新的功能</span><br><span class=\"line\">  //ListFooterComponent：尾部组件</span><br><span class=\"line\">  //onEndReached：当列表被滚动到距离内容最底部不足onEndReachedThreshold的距离时调用</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class=\"line\">        &lt;FlatList</span><br><span class=\"line\">          data=&#123;this.state.dataArray&#125;</span><br><span class=\"line\">          renderItem=&#123;(data)=&gt;this._renderItem(data)&#125;</span><br><span class=\"line\">          // refreshing=&#123;this.state.isLoading&#125;</span><br><span class=\"line\">          // onRefresh=&#123; () =&gt; &#123;</span><br><span class=\"line\">          //   this.loadData();</span><br><span class=\"line\">          // &#125;&#125;</span><br><span class=\"line\">          refreshControl=&#123;</span><br><span class=\"line\">            &lt;RefreshControl</span><br><span class=\"line\">              title=&#123;&apos;Loading&apos;&#125; //loading文字</span><br><span class=\"line\">              colors=&#123;&apos;red&apos;&#125; //android的loading颜色</span><br><span class=\"line\">              tintColor=&#123;&apos;red&apos;&#125; //ios的loading颜色</span><br><span class=\"line\">              titleColor=&#123;&apos;red&apos;&#125; //loading文字颜色</span><br><span class=\"line\">              refreshing=&#123;this.state.isLoading&#125;</span><br><span class=\"line\">              onRefresh=&#123; () =&gt; &#123;</span><br><span class=\"line\">                this.loadData(true)</span><br><span class=\"line\">              &#125;&#125;</span><br><span class=\"line\">            /&gt;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          ListFooterComponent=&#123; () =&gt; this.genIndicator()&#125;</span><br><span class=\"line\">          onEndReached=&#123; () =&gt; &#123;</span><br><span class=\"line\">            this.loadData()</span><br><span class=\"line\">          &#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      &lt;/View&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"react-native的全面屏处理","date":"2019-06-24T16:00:00.000Z","_content":"\n### react-native的全面屏处理\n<!-- more -->\n\n#### iOS\n以iPhoneX为例，顶部导航栏和底部导航栏有一个“安全”区域，怎么去处理？RN官方提供SafeAreaView的组件目的是在一个“安全”的可视区域内渲染内容。对SafeAreaView进行封装处理\n\n```\n/** \n * topColor 顶部颜色\n */\nimport React, {Component,} from 'react';\nimport {DeviceInfo, SafeAreaView, StyleSheet, View, ViewPropTypes} from 'react-native';\nimport {PropTypes} from 'prop-types';\n\nexport default class SafeAreaViewPlus extends Component {\n  static propTypes = {\n    ...ViewPropTypes,\n    topColor: PropTypes.string,\n    bottomColor: PropTypes.string,\n    enablePlus: PropTypes.bool,\n    topInset: PropTypes.bool,\n    bottomInset: PropTypes.bool,\n\n  };\n  static defaultProps = {\n    topColor: 'transparent',\n    bottomColor: '#f8f8f8',\n    enablePlus: true,\n    topInset: true,\n    bottomInset: false,\n  };\n\n  genSafeAreaViewPlus() {\n    const {children, topColor, bottomColor, topInset, bottomInset} = this.props;\n    return <View style={[styles.container, this.props.style]}>\n      {this.getTopArea(topColor, topInset)}\n      {children}\n      {this.getBottomArea(bottomColor, bottomInset)}\n    </View>;\n  }\n\n  genSafeAreaView() {\n    return <SafeAreaView style={[styles.container, this.props.style]} {...this.props}>\n        {this.props.children}\n    </SafeAreaView>\n  }\n\n  getTopArea(topColor, topInset) {\n    return !DeviceInfo.isIPhoneX_deprecated || !topInset ? null\n        : <View style={[styles.topArea, {backgroundColor: topColor}]}/>;\n  }\n\n  getBottomArea(bottomColor, bottomInset) {\n    return !DeviceInfo.isIPhoneX_deprecated || !bottomInset ? null\n        : <View style={[styles.bottomArea, {backgroundColor: bottomColor}]}/>;\n  }\n\n  render() {\n    const {enablePlus} = this.props;\n    return enablePlus ? this.genSafeAreaViewPlus() : this.genSafeAreaView();\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  topArea: {\n    height: 44,\n  },\n  bottomArea: {\n    height: 34,\n  }\n});\n```\n\n#### Android\n改变屏幕最大适应比例\n\n```\nAndroidManifest.xml\n\n<!--适配全面屏-->\nandroid:resizeableActivity=\"true\"\n<meta-data\n    android:name=\"android.max_aspect\"\n    android:value=\"2.2\" />\n```","source":"_posts/react-native-SafeAreaView.md","raw":"---\ntitle: react-native的全面屏处理\ndate: 2019-06-25\ntags: ['React Native']\ncategories: React Native\n---\n\n### react-native的全面屏处理\n<!-- more -->\n\n#### iOS\n以iPhoneX为例，顶部导航栏和底部导航栏有一个“安全”区域，怎么去处理？RN官方提供SafeAreaView的组件目的是在一个“安全”的可视区域内渲染内容。对SafeAreaView进行封装处理\n\n```\n/** \n * topColor 顶部颜色\n */\nimport React, {Component,} from 'react';\nimport {DeviceInfo, SafeAreaView, StyleSheet, View, ViewPropTypes} from 'react-native';\nimport {PropTypes} from 'prop-types';\n\nexport default class SafeAreaViewPlus extends Component {\n  static propTypes = {\n    ...ViewPropTypes,\n    topColor: PropTypes.string,\n    bottomColor: PropTypes.string,\n    enablePlus: PropTypes.bool,\n    topInset: PropTypes.bool,\n    bottomInset: PropTypes.bool,\n\n  };\n  static defaultProps = {\n    topColor: 'transparent',\n    bottomColor: '#f8f8f8',\n    enablePlus: true,\n    topInset: true,\n    bottomInset: false,\n  };\n\n  genSafeAreaViewPlus() {\n    const {children, topColor, bottomColor, topInset, bottomInset} = this.props;\n    return <View style={[styles.container, this.props.style]}>\n      {this.getTopArea(topColor, topInset)}\n      {children}\n      {this.getBottomArea(bottomColor, bottomInset)}\n    </View>;\n  }\n\n  genSafeAreaView() {\n    return <SafeAreaView style={[styles.container, this.props.style]} {...this.props}>\n        {this.props.children}\n    </SafeAreaView>\n  }\n\n  getTopArea(topColor, topInset) {\n    return !DeviceInfo.isIPhoneX_deprecated || !topInset ? null\n        : <View style={[styles.topArea, {backgroundColor: topColor}]}/>;\n  }\n\n  getBottomArea(bottomColor, bottomInset) {\n    return !DeviceInfo.isIPhoneX_deprecated || !bottomInset ? null\n        : <View style={[styles.bottomArea, {backgroundColor: bottomColor}]}/>;\n  }\n\n  render() {\n    const {enablePlus} = this.props;\n    return enablePlus ? this.genSafeAreaViewPlus() : this.genSafeAreaView();\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  topArea: {\n    height: 44,\n  },\n  bottomArea: {\n    height: 34,\n  }\n});\n```\n\n#### Android\n改变屏幕最大适应比例\n\n```\nAndroidManifest.xml\n\n<!--适配全面屏-->\nandroid:resizeableActivity=\"true\"\n<meta-data\n    android:name=\"android.max_aspect\"\n    android:value=\"2.2\" />\n```","slug":"react-native-SafeAreaView","published":1,"updated":"2019-06-25T01:40:33.656Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq42u0037he6jpm7u5bec","content":"<h3 id=\"react-native的全面屏处理\"><a href=\"#react-native的全面屏处理\" class=\"headerlink\" title=\"react-native的全面屏处理\"></a>react-native的全面屏处理</h3><a id=\"more\"></a>\n<h4 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h4><p>以iPhoneX为例，顶部导航栏和底部导航栏有一个“安全”区域，怎么去处理？RN官方提供SafeAreaView的组件目的是在一个“安全”的可视区域内渲染内容。对SafeAreaView进行封装处理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** </span><br><span class=\"line\"> * topColor 顶部颜色</span><br><span class=\"line\"> */</span><br><span class=\"line\">import React, &#123;Component,&#125; from &apos;react&apos;;</span><br><span class=\"line\">import &#123;DeviceInfo, SafeAreaView, StyleSheet, View, ViewPropTypes&#125; from &apos;react-native&apos;;</span><br><span class=\"line\">import &#123;PropTypes&#125; from &apos;prop-types&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class SafeAreaViewPlus extends Component &#123;</span><br><span class=\"line\">  static propTypes = &#123;</span><br><span class=\"line\">    ...ViewPropTypes,</span><br><span class=\"line\">    topColor: PropTypes.string,</span><br><span class=\"line\">    bottomColor: PropTypes.string,</span><br><span class=\"line\">    enablePlus: PropTypes.bool,</span><br><span class=\"line\">    topInset: PropTypes.bool,</span><br><span class=\"line\">    bottomInset: PropTypes.bool,</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  static defaultProps = &#123;</span><br><span class=\"line\">    topColor: &apos;transparent&apos;,</span><br><span class=\"line\">    bottomColor: &apos;#f8f8f8&apos;,</span><br><span class=\"line\">    enablePlus: true,</span><br><span class=\"line\">    topInset: true,</span><br><span class=\"line\">    bottomInset: false,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  genSafeAreaViewPlus() &#123;</span><br><span class=\"line\">    const &#123;children, topColor, bottomColor, topInset, bottomInset&#125; = this.props;</span><br><span class=\"line\">    return &lt;View style=&#123;[styles.container, this.props.style]&#125;&gt;</span><br><span class=\"line\">      &#123;this.getTopArea(topColor, topInset)&#125;</span><br><span class=\"line\">      &#123;children&#125;</span><br><span class=\"line\">      &#123;this.getBottomArea(bottomColor, bottomInset)&#125;</span><br><span class=\"line\">    &lt;/View&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  genSafeAreaView() &#123;</span><br><span class=\"line\">    return &lt;SafeAreaView style=&#123;[styles.container, this.props.style]&#125; &#123;...this.props&#125;&gt;</span><br><span class=\"line\">        &#123;this.props.children&#125;</span><br><span class=\"line\">    &lt;/SafeAreaView&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getTopArea(topColor, topInset) &#123;</span><br><span class=\"line\">    return !DeviceInfo.isIPhoneX_deprecated || !topInset ? null</span><br><span class=\"line\">        : &lt;View style=&#123;[styles.topArea, &#123;backgroundColor: topColor&#125;]&#125;/&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getBottomArea(bottomColor, bottomInset) &#123;</span><br><span class=\"line\">    return !DeviceInfo.isIPhoneX_deprecated || !bottomInset ? null</span><br><span class=\"line\">        : &lt;View style=&#123;[styles.bottomArea, &#123;backgroundColor: bottomColor&#125;]&#125;/&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123;enablePlus&#125; = this.props;</span><br><span class=\"line\">    return enablePlus ? this.genSafeAreaViewPlus() : this.genSafeAreaView();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const styles = StyleSheet.create(&#123;</span><br><span class=\"line\">  container: &#123;</span><br><span class=\"line\">    flex: 1,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  topArea: &#123;</span><br><span class=\"line\">    height: 44,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  bottomArea: &#123;</span><br><span class=\"line\">    height: 34,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h4><p>改变屏幕最大适应比例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AndroidManifest.xml</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--适配全面屏--&gt;</span><br><span class=\"line\">android:resizeableActivity=&quot;true&quot;</span><br><span class=\"line\">&lt;meta-data</span><br><span class=\"line\">    android:name=&quot;android.max_aspect&quot;</span><br><span class=\"line\">    android:value=&quot;2.2&quot; /&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"react-native的全面屏处理\"><a href=\"#react-native的全面屏处理\" class=\"headerlink\" title=\"react-native的全面屏处理\"></a>react-native的全面屏处理</h3>","more":"<h4 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h4><p>以iPhoneX为例，顶部导航栏和底部导航栏有一个“安全”区域，怎么去处理？RN官方提供SafeAreaView的组件目的是在一个“安全”的可视区域内渲染内容。对SafeAreaView进行封装处理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** </span><br><span class=\"line\"> * topColor 顶部颜色</span><br><span class=\"line\"> */</span><br><span class=\"line\">import React, &#123;Component,&#125; from &apos;react&apos;;</span><br><span class=\"line\">import &#123;DeviceInfo, SafeAreaView, StyleSheet, View, ViewPropTypes&#125; from &apos;react-native&apos;;</span><br><span class=\"line\">import &#123;PropTypes&#125; from &apos;prop-types&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class SafeAreaViewPlus extends Component &#123;</span><br><span class=\"line\">  static propTypes = &#123;</span><br><span class=\"line\">    ...ViewPropTypes,</span><br><span class=\"line\">    topColor: PropTypes.string,</span><br><span class=\"line\">    bottomColor: PropTypes.string,</span><br><span class=\"line\">    enablePlus: PropTypes.bool,</span><br><span class=\"line\">    topInset: PropTypes.bool,</span><br><span class=\"line\">    bottomInset: PropTypes.bool,</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  static defaultProps = &#123;</span><br><span class=\"line\">    topColor: &apos;transparent&apos;,</span><br><span class=\"line\">    bottomColor: &apos;#f8f8f8&apos;,</span><br><span class=\"line\">    enablePlus: true,</span><br><span class=\"line\">    topInset: true,</span><br><span class=\"line\">    bottomInset: false,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  genSafeAreaViewPlus() &#123;</span><br><span class=\"line\">    const &#123;children, topColor, bottomColor, topInset, bottomInset&#125; = this.props;</span><br><span class=\"line\">    return &lt;View style=&#123;[styles.container, this.props.style]&#125;&gt;</span><br><span class=\"line\">      &#123;this.getTopArea(topColor, topInset)&#125;</span><br><span class=\"line\">      &#123;children&#125;</span><br><span class=\"line\">      &#123;this.getBottomArea(bottomColor, bottomInset)&#125;</span><br><span class=\"line\">    &lt;/View&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  genSafeAreaView() &#123;</span><br><span class=\"line\">    return &lt;SafeAreaView style=&#123;[styles.container, this.props.style]&#125; &#123;...this.props&#125;&gt;</span><br><span class=\"line\">        &#123;this.props.children&#125;</span><br><span class=\"line\">    &lt;/SafeAreaView&gt;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getTopArea(topColor, topInset) &#123;</span><br><span class=\"line\">    return !DeviceInfo.isIPhoneX_deprecated || !topInset ? null</span><br><span class=\"line\">        : &lt;View style=&#123;[styles.topArea, &#123;backgroundColor: topColor&#125;]&#125;/&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getBottomArea(bottomColor, bottomInset) &#123;</span><br><span class=\"line\">    return !DeviceInfo.isIPhoneX_deprecated || !bottomInset ? null</span><br><span class=\"line\">        : &lt;View style=&#123;[styles.bottomArea, &#123;backgroundColor: bottomColor&#125;]&#125;/&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123;enablePlus&#125; = this.props;</span><br><span class=\"line\">    return enablePlus ? this.genSafeAreaViewPlus() : this.genSafeAreaView();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const styles = StyleSheet.create(&#123;</span><br><span class=\"line\">  container: &#123;</span><br><span class=\"line\">    flex: 1,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  topArea: &#123;</span><br><span class=\"line\">    height: 44,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  bottomArea: &#123;</span><br><span class=\"line\">    height: 34,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h4><p>改变屏幕最大适应比例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AndroidManifest.xml</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--适配全面屏--&gt;</span><br><span class=\"line\">android:resizeableActivity=&quot;true&quot;</span><br><span class=\"line\">&lt;meta-data</span><br><span class=\"line\">    android:name=&quot;android.max_aspect&quot;</span><br><span class=\"line\">    android:value=&quot;2.2&quot; /&gt;</span><br></pre></td></tr></table></figure>"},{"title":"react-native-navigation","date":"2019-06-16T16:00:00.000Z","_content":"\n### react-native-navigation3.x\n<!-- more -->\n\n### 真机调试\n在iOS上\n打开RCTWebSocketExecutor.m文件，将\"localhost\"改为你电脑的ip，\n然后在Developer Menu下单击\"Debug JS Remotely\"启动远程调试功能\n\n```\nNSString *host = [[_bridge bundleURL] host] ?: @\"localhost\";\n```\n\n### react生命周期\nMounting-装载\nUpdating-更新\nUnmounting-卸载\n组件初始化会调用构造方法constructor。\n然后会调用render方法进行渲染，相关的组件和节点会挂载到真实的DOM节点去。render方法执行完可以获取真实的DOM节点。\nrender方法执行完回调componentDidMount方法,可以获取真实的DOM节点。\n更新阶段，每个组件都有更新状态,setState，重新渲染之后componentDidUpdate会被回调\n卸载阶段会调用componentWillUnmount\n\n### React Navigation3.x\n\n#### 安装\n\n```\nnpm i react-navigation  react-native-gesture-handler -S \n\nreact-native link react-native-gesture-handler\n```\n\n#### createStackNavigator\n为你的应用程序提供一种在每个新屏幕放置在堆栈顶部的屏幕之间转换的方法\n\n```\nAppNavigators.js \n引入页面文件，配置标题栏\nexport const AppStackNavigator = createStackNavigator({\n  HomePage: {\n    screen: HomePage\n  },\n\n  //动态方式获取title\n  Page1: {\n    screen: Page1,\n    navigationOptions: ({navigation}) => ({\n      title: `${navigation.state.params.name}页面名字`\n    })\n  },\n\n  //静态配置title\n  Page2: {\n    screen: Page2,\n    navigationOptions: {\n      title: 'This is Page2'\n    }\n  },\n\n  //动态方式配置\n  Page3: {\n    screen: Page3,\n    navigationOptions: (props) => {\n      const { navigation } = props\n      const { state,setParams } = navigation\n      const { params } = state\n      return {\n        title: params.title ? params.title : 'This is Page3',\n        headerRight: (\n          <Button\n            title={params.mode === 'edit' ? '保存' : '编辑'}\n            onPress={() =>\n                setParams({mode: params.mode === 'edit' ? '' : 'edit'})}\n          />\n        ),\n      }\n     \n    }\n  },\n})\n```\n \n```\nAPP.js\n\n需要注册createAppContainer\nimport {AppStackNavigator} from './navigators/AppNavigators'\nimport {createAppContainer} from 'react-navigation'\nexport default createAppContainer(AppStackNavigator);\n```\n\n3. 页面传参和接受参数\n\n```\nHomePage.js\n\n//通过this.props.navigation.navigate进行页面跳转\nexport default class HomePage extends Component {\n  render() {\n    const {navigation} = this.props\n    return (\n      <Button\n        title={'Go to Page1'}\n        onPress={() => {\n          navigation.navigate('Page1',{name:'参数'})\n        }}\n      />\n    )\n  }\n}\n\n---\nPage1.js\n\n//通过this.props.navigation.state.params接收传过来的参数\nexport default class Page1 extends Component {\n  render() {\n    const {navigation} = this.props\n    return (\n      <View>\n        {navigation.state.params.name}\n      <View>\n    )\n  }\n}\n```\n\n#### createBottomTabNavigator+createMaterialTopTabNavigator\n1. createBottomTabNavigator：创建底部导航栏组件\n2. createMaterialTopTabNavigator：创建顶部导航栏组件\n\n```\nconst AppBottomNavigator = createBottomTabNavigator({\n  Page1: {\n    screen: Page1,\n    navigationOptions: {\n      tabBarLabel: '最热',\n      tabBarIcon: ({tintColor, focused}) => (\n        <Ionicons\n          name={'ios-home'}\n          size={26}\n          style={{color: tintColor}}\n        />\n      ),\n    },\n    \n  },\n  Page2: {\n    screen: Page2,\n    navigationOptions: {\n      tabBarLabel: '趋势',\n      tabBarIcon: ({tintColor, focused}) => (\n        <Ionicons\n          name={'ios-people'}\n          size={26}\n          style={{color: tintColor}}\n        />\n      ),\n    }\n  },\n  Page3: {\n    screen: Page3,\n    navigationOptions: {\n      tabBarLabel: '收藏',\n      tabBarIcon: ({tintColor, focused}) => (\n        <Ionicons\n          name={'ios-chatboxes'}\n          size={26}\n          style={{color: tintColor}}\n        />\n      ),\n    }\n  },\n  Page4: {\n    screen: Page4,\n    navigationOptions: {\n      tabBarLabel: '我的',\n      tabBarIcon: ({tintColor, focused}) => (\n        <Ionicons\n          name={'ios-home'}\n          size={26}\n          style={{color: tintColor}}\n        />\n      ),\n    }\n  },\n},{\n  tabBarOptions: {\n    activeTintColor: Platform.OS === 'ios' ? '#e91e63' : '#fff',\n  }\n})\n```\n\n```\nconst AppTopNavigator = createMaterialTopTabNavigator({\n  Page1: {\n    screen: Page1,\n    navigationOptions: {\n      tabBarLabel: 'All'\n    }\n  },\n  Page2: {\n    screen: Page2,\n    navigationOptions: {\n      tabBarLabel: 'iOS'\n    }\n  },\n  Page3: {\n    screen: Page3,\n    navigationOptions: {\n      tabBarLabel: 'Page3'\n    }\n  },\n},{\n  tabBarOptions: {\n    tabStyle: {\n        minWidth: 50\n    },\n    upperCaseLabel: false,//是否使标签大写，默认为true\n    scrollEnabled: true,//是否支持 选项卡滚动，默认false\n    // activeTintColor: 'white',//label和icon的前景色 活跃状态下（选中）\n    // inactiveTintColor: 'gray',//label和icon的前景色 活跃状态下（未选中）\n    style: {\n      backgroundColor: '#678',//TabBar 的背景颜色\n    },\n    indicatorStyle: {\n      height: 2,\n      backgroundColor: 'white',\n    },//标签指示器的样式\n    labelStyle: {\n      fontSize: 13,\n      marginTop: 6,\n      marginBottom: 6,\n    },//文字的样式\n  }\n})\n```\n\n```\n使用把底部放到createStackNavigator\n\nexport const AppStackNavigator = createStackNavigator({\n  Bottom: {\n    screen: AppBottomNavigator,\n    navigationOptions: {\n      title: 'BottomNavigator'\n    }\n  },\n  Top: {\n    screen: AppTopNavigator,\n    navigationOptions: {\n      title: 'TopNavigator'\n    }\n  }\n  HomePage: {\n    screen: HomePage\n  },\n  //动态方式获取title\n  Page1: {\n    screen: Page1,\n    navigationOptions: ({navigation}) => ({\n      title: `${navigation.state.params.name}页面名字`\n    })\n  },\n})\n```\n\n#### createDrawerNavigator+createSwitchNavigator\n\n```\nconst DrawerNav = createDrawerNavigator({\n  Page4: {\n    screen: Page4,\n    navigationOptions: {\n      drawerLabel: 'Page4',\n      drawerIcon: ({tintColor}) => (\n        <MaterialIcons name=\"drafts\" size={24} style={{color: tintColor}}/>\n      ),\n    }\n  },\n  Page5: {\n    screen: Page5,\n    navigationOptions: {\n      drawerLabel: 'Page5',\n      drawerIcon: ({tintColor}) => (\n        <MaterialIcons\n          name=\"move-to-inbox\"\n          size={24}\n          style={{color: tintColor}}\n        />\n      ),\n    }\n  },\n},\n{\n  initialRouteName: 'Page4', //第一次加载时初始选项卡路由的 routeName\n  contentOptions: {\n      activeTintColor: '#e91e63',//活动选项卡的标签和图标颜色\n  },\n  contentComponent: (props) => (\n    <ScrollView style={{backgroundColor: '#987656', flex: 1}}>\n      <SafeAreaView forceInset={{top: 'always', horizontal: 'never'}}>\n        <DrawerItems {...props} />\n      </SafeAreaView>\n    </ScrollView>\n  ) //用于呈现抽屉内容 (例如, 导航项) 的组件\n}\n);\n```\n","source":"_posts/react-native-navigation.md","raw":"---\ntitle: react-native-navigation\ndate: 2019-06-17\ntags: ['React Native']\ncategories: React Native\n---\n\n### react-native-navigation3.x\n<!-- more -->\n\n### 真机调试\n在iOS上\n打开RCTWebSocketExecutor.m文件，将\"localhost\"改为你电脑的ip，\n然后在Developer Menu下单击\"Debug JS Remotely\"启动远程调试功能\n\n```\nNSString *host = [[_bridge bundleURL] host] ?: @\"localhost\";\n```\n\n### react生命周期\nMounting-装载\nUpdating-更新\nUnmounting-卸载\n组件初始化会调用构造方法constructor。\n然后会调用render方法进行渲染，相关的组件和节点会挂载到真实的DOM节点去。render方法执行完可以获取真实的DOM节点。\nrender方法执行完回调componentDidMount方法,可以获取真实的DOM节点。\n更新阶段，每个组件都有更新状态,setState，重新渲染之后componentDidUpdate会被回调\n卸载阶段会调用componentWillUnmount\n\n### React Navigation3.x\n\n#### 安装\n\n```\nnpm i react-navigation  react-native-gesture-handler -S \n\nreact-native link react-native-gesture-handler\n```\n\n#### createStackNavigator\n为你的应用程序提供一种在每个新屏幕放置在堆栈顶部的屏幕之间转换的方法\n\n```\nAppNavigators.js \n引入页面文件，配置标题栏\nexport const AppStackNavigator = createStackNavigator({\n  HomePage: {\n    screen: HomePage\n  },\n\n  //动态方式获取title\n  Page1: {\n    screen: Page1,\n    navigationOptions: ({navigation}) => ({\n      title: `${navigation.state.params.name}页面名字`\n    })\n  },\n\n  //静态配置title\n  Page2: {\n    screen: Page2,\n    navigationOptions: {\n      title: 'This is Page2'\n    }\n  },\n\n  //动态方式配置\n  Page3: {\n    screen: Page3,\n    navigationOptions: (props) => {\n      const { navigation } = props\n      const { state,setParams } = navigation\n      const { params } = state\n      return {\n        title: params.title ? params.title : 'This is Page3',\n        headerRight: (\n          <Button\n            title={params.mode === 'edit' ? '保存' : '编辑'}\n            onPress={() =>\n                setParams({mode: params.mode === 'edit' ? '' : 'edit'})}\n          />\n        ),\n      }\n     \n    }\n  },\n})\n```\n \n```\nAPP.js\n\n需要注册createAppContainer\nimport {AppStackNavigator} from './navigators/AppNavigators'\nimport {createAppContainer} from 'react-navigation'\nexport default createAppContainer(AppStackNavigator);\n```\n\n3. 页面传参和接受参数\n\n```\nHomePage.js\n\n//通过this.props.navigation.navigate进行页面跳转\nexport default class HomePage extends Component {\n  render() {\n    const {navigation} = this.props\n    return (\n      <Button\n        title={'Go to Page1'}\n        onPress={() => {\n          navigation.navigate('Page1',{name:'参数'})\n        }}\n      />\n    )\n  }\n}\n\n---\nPage1.js\n\n//通过this.props.navigation.state.params接收传过来的参数\nexport default class Page1 extends Component {\n  render() {\n    const {navigation} = this.props\n    return (\n      <View>\n        {navigation.state.params.name}\n      <View>\n    )\n  }\n}\n```\n\n#### createBottomTabNavigator+createMaterialTopTabNavigator\n1. createBottomTabNavigator：创建底部导航栏组件\n2. createMaterialTopTabNavigator：创建顶部导航栏组件\n\n```\nconst AppBottomNavigator = createBottomTabNavigator({\n  Page1: {\n    screen: Page1,\n    navigationOptions: {\n      tabBarLabel: '最热',\n      tabBarIcon: ({tintColor, focused}) => (\n        <Ionicons\n          name={'ios-home'}\n          size={26}\n          style={{color: tintColor}}\n        />\n      ),\n    },\n    \n  },\n  Page2: {\n    screen: Page2,\n    navigationOptions: {\n      tabBarLabel: '趋势',\n      tabBarIcon: ({tintColor, focused}) => (\n        <Ionicons\n          name={'ios-people'}\n          size={26}\n          style={{color: tintColor}}\n        />\n      ),\n    }\n  },\n  Page3: {\n    screen: Page3,\n    navigationOptions: {\n      tabBarLabel: '收藏',\n      tabBarIcon: ({tintColor, focused}) => (\n        <Ionicons\n          name={'ios-chatboxes'}\n          size={26}\n          style={{color: tintColor}}\n        />\n      ),\n    }\n  },\n  Page4: {\n    screen: Page4,\n    navigationOptions: {\n      tabBarLabel: '我的',\n      tabBarIcon: ({tintColor, focused}) => (\n        <Ionicons\n          name={'ios-home'}\n          size={26}\n          style={{color: tintColor}}\n        />\n      ),\n    }\n  },\n},{\n  tabBarOptions: {\n    activeTintColor: Platform.OS === 'ios' ? '#e91e63' : '#fff',\n  }\n})\n```\n\n```\nconst AppTopNavigator = createMaterialTopTabNavigator({\n  Page1: {\n    screen: Page1,\n    navigationOptions: {\n      tabBarLabel: 'All'\n    }\n  },\n  Page2: {\n    screen: Page2,\n    navigationOptions: {\n      tabBarLabel: 'iOS'\n    }\n  },\n  Page3: {\n    screen: Page3,\n    navigationOptions: {\n      tabBarLabel: 'Page3'\n    }\n  },\n},{\n  tabBarOptions: {\n    tabStyle: {\n        minWidth: 50\n    },\n    upperCaseLabel: false,//是否使标签大写，默认为true\n    scrollEnabled: true,//是否支持 选项卡滚动，默认false\n    // activeTintColor: 'white',//label和icon的前景色 活跃状态下（选中）\n    // inactiveTintColor: 'gray',//label和icon的前景色 活跃状态下（未选中）\n    style: {\n      backgroundColor: '#678',//TabBar 的背景颜色\n    },\n    indicatorStyle: {\n      height: 2,\n      backgroundColor: 'white',\n    },//标签指示器的样式\n    labelStyle: {\n      fontSize: 13,\n      marginTop: 6,\n      marginBottom: 6,\n    },//文字的样式\n  }\n})\n```\n\n```\n使用把底部放到createStackNavigator\n\nexport const AppStackNavigator = createStackNavigator({\n  Bottom: {\n    screen: AppBottomNavigator,\n    navigationOptions: {\n      title: 'BottomNavigator'\n    }\n  },\n  Top: {\n    screen: AppTopNavigator,\n    navigationOptions: {\n      title: 'TopNavigator'\n    }\n  }\n  HomePage: {\n    screen: HomePage\n  },\n  //动态方式获取title\n  Page1: {\n    screen: Page1,\n    navigationOptions: ({navigation}) => ({\n      title: `${navigation.state.params.name}页面名字`\n    })\n  },\n})\n```\n\n#### createDrawerNavigator+createSwitchNavigator\n\n```\nconst DrawerNav = createDrawerNavigator({\n  Page4: {\n    screen: Page4,\n    navigationOptions: {\n      drawerLabel: 'Page4',\n      drawerIcon: ({tintColor}) => (\n        <MaterialIcons name=\"drafts\" size={24} style={{color: tintColor}}/>\n      ),\n    }\n  },\n  Page5: {\n    screen: Page5,\n    navigationOptions: {\n      drawerLabel: 'Page5',\n      drawerIcon: ({tintColor}) => (\n        <MaterialIcons\n          name=\"move-to-inbox\"\n          size={24}\n          style={{color: tintColor}}\n        />\n      ),\n    }\n  },\n},\n{\n  initialRouteName: 'Page4', //第一次加载时初始选项卡路由的 routeName\n  contentOptions: {\n      activeTintColor: '#e91e63',//活动选项卡的标签和图标颜色\n  },\n  contentComponent: (props) => (\n    <ScrollView style={{backgroundColor: '#987656', flex: 1}}>\n      <SafeAreaView forceInset={{top: 'always', horizontal: 'never'}}>\n        <DrawerItems {...props} />\n      </SafeAreaView>\n    </ScrollView>\n  ) //用于呈现抽屉内容 (例如, 导航项) 的组件\n}\n);\n```\n","slug":"react-native-navigation","published":1,"updated":"2019-06-17T10:08:08.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq42v003bhe6jh0hg2iz5","content":"<h3 id=\"react-native-navigation3-x\"><a href=\"#react-native-navigation3-x\" class=\"headerlink\" title=\"react-native-navigation3.x\"></a>react-native-navigation3.x</h3><a id=\"more\"></a>\n<h3 id=\"真机调试\"><a href=\"#真机调试\" class=\"headerlink\" title=\"真机调试\"></a>真机调试</h3><p>在iOS上<br>打开RCTWebSocketExecutor.m文件，将”localhost”改为你电脑的ip，<br>然后在Developer Menu下单击”Debug JS Remotely”启动远程调试功能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *host = [[_bridge bundleURL] host] ?: @&quot;localhost&quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"react生命周期\"><a href=\"#react生命周期\" class=\"headerlink\" title=\"react生命周期\"></a>react生命周期</h3><p>Mounting-装载<br>Updating-更新<br>Unmounting-卸载<br>组件初始化会调用构造方法constructor。<br>然后会调用render方法进行渲染，相关的组件和节点会挂载到真实的DOM节点去。render方法执行完可以获取真实的DOM节点。<br>render方法执行完回调componentDidMount方法,可以获取真实的DOM节点。<br>更新阶段，每个组件都有更新状态,setState，重新渲染之后componentDidUpdate会被回调<br>卸载阶段会调用componentWillUnmount</p>\n<h3 id=\"React-Navigation3-x\"><a href=\"#React-Navigation3-x\" class=\"headerlink\" title=\"React Navigation3.x\"></a>React Navigation3.x</h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i react-navigation  react-native-gesture-handler -S </span><br><span class=\"line\"></span><br><span class=\"line\">react-native link react-native-gesture-handler</span><br></pre></td></tr></table></figure>\n<h4 id=\"createStackNavigator\"><a href=\"#createStackNavigator\" class=\"headerlink\" title=\"createStackNavigator\"></a>createStackNavigator</h4><p>为你的应用程序提供一种在每个新屏幕放置在堆栈顶部的屏幕之间转换的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AppNavigators.js </span><br><span class=\"line\">引入页面文件，配置标题栏</span><br><span class=\"line\">export const AppStackNavigator = createStackNavigator(&#123;</span><br><span class=\"line\">  HomePage: &#123;</span><br><span class=\"line\">    screen: HomePage</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  //动态方式获取title</span><br><span class=\"line\">  Page1: &#123;</span><br><span class=\"line\">    screen: Page1,</span><br><span class=\"line\">    navigationOptions: (&#123;navigation&#125;) =&gt; (&#123;</span><br><span class=\"line\">      title: `$&#123;navigation.state.params.name&#125;页面名字`</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  //静态配置title</span><br><span class=\"line\">  Page2: &#123;</span><br><span class=\"line\">    screen: Page2,</span><br><span class=\"line\">    navigationOptions: &#123;</span><br><span class=\"line\">      title: &apos;This is Page2&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  //动态方式配置</span><br><span class=\"line\">  Page3: &#123;</span><br><span class=\"line\">    screen: Page3,</span><br><span class=\"line\">    navigationOptions: (props) =&gt; &#123;</span><br><span class=\"line\">      const &#123; navigation &#125; = props</span><br><span class=\"line\">      const &#123; state,setParams &#125; = navigation</span><br><span class=\"line\">      const &#123; params &#125; = state</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        title: params.title ? params.title : &apos;This is Page3&apos;,</span><br><span class=\"line\">        headerRight: (</span><br><span class=\"line\">          &lt;Button</span><br><span class=\"line\">            title=&#123;params.mode === &apos;edit&apos; ? &apos;保存&apos; : &apos;编辑&apos;&#125;</span><br><span class=\"line\">            onPress=&#123;() =&gt;</span><br><span class=\"line\">                setParams(&#123;mode: params.mode === &apos;edit&apos; ? &apos;&apos; : &apos;edit&apos;&#125;)&#125;</span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APP.js</span><br><span class=\"line\"></span><br><span class=\"line\">需要注册createAppContainer</span><br><span class=\"line\">import &#123;AppStackNavigator&#125; from &apos;./navigators/AppNavigators&apos;</span><br><span class=\"line\">import &#123;createAppContainer&#125; from &apos;react-navigation&apos;</span><br><span class=\"line\">export default createAppContainer(AppStackNavigator);</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>页面传参和接受参数</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HomePage.js</span><br><span class=\"line\"></span><br><span class=\"line\">//通过this.props.navigation.navigate进行页面跳转</span><br><span class=\"line\">export default class HomePage extends Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123;navigation&#125; = this.props</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;Button</span><br><span class=\"line\">        title=&#123;&apos;Go to Page1&apos;&#125;</span><br><span class=\"line\">        onPress=&#123;() =&gt; &#123;</span><br><span class=\"line\">          navigation.navigate(&apos;Page1&apos;,&#123;name:&apos;参数&apos;&#125;)</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">Page1.js</span><br><span class=\"line\"></span><br><span class=\"line\">//通过this.props.navigation.state.params接收传过来的参数</span><br><span class=\"line\">export default class Page1 extends Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123;navigation&#125; = this.props</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;View&gt;</span><br><span class=\"line\">        &#123;navigation.state.params.name&#125;</span><br><span class=\"line\">      &lt;View&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"createBottomTabNavigator-createMaterialTopTabNavigator\"><a href=\"#createBottomTabNavigator-createMaterialTopTabNavigator\" class=\"headerlink\" title=\"createBottomTabNavigator+createMaterialTopTabNavigator\"></a>createBottomTabNavigator+createMaterialTopTabNavigator</h4><ol>\n<li>createBottomTabNavigator：创建底部导航栏组件</li>\n<li>createMaterialTopTabNavigator：创建顶部导航栏组件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const AppBottomNavigator = createBottomTabNavigator(&#123;</span><br><span class=\"line\">  Page1: &#123;</span><br><span class=\"line\">    screen: Page1,</span><br><span class=\"line\">    navigationOptions: &#123;</span><br><span class=\"line\">      tabBarLabel: &apos;最热&apos;,</span><br><span class=\"line\">      tabBarIcon: (&#123;tintColor, focused&#125;) =&gt; (</span><br><span class=\"line\">        &lt;Ionicons</span><br><span class=\"line\">          name=&#123;&apos;ios-home&apos;&#125;</span><br><span class=\"line\">          size=&#123;26&#125;</span><br><span class=\"line\">          style=&#123;&#123;color: tintColor&#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  Page2: &#123;</span><br><span class=\"line\">    screen: Page2,</span><br><span class=\"line\">    navigationOptions: &#123;</span><br><span class=\"line\">      tabBarLabel: &apos;趋势&apos;,</span><br><span class=\"line\">      tabBarIcon: (&#123;tintColor, focused&#125;) =&gt; (</span><br><span class=\"line\">        &lt;Ionicons</span><br><span class=\"line\">          name=&#123;&apos;ios-people&apos;&#125;</span><br><span class=\"line\">          size=&#123;26&#125;</span><br><span class=\"line\">          style=&#123;&#123;color: tintColor&#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  Page3: &#123;</span><br><span class=\"line\">    screen: Page3,</span><br><span class=\"line\">    navigationOptions: &#123;</span><br><span class=\"line\">      tabBarLabel: &apos;收藏&apos;,</span><br><span class=\"line\">      tabBarIcon: (&#123;tintColor, focused&#125;) =&gt; (</span><br><span class=\"line\">        &lt;Ionicons</span><br><span class=\"line\">          name=&#123;&apos;ios-chatboxes&apos;&#125;</span><br><span class=\"line\">          size=&#123;26&#125;</span><br><span class=\"line\">          style=&#123;&#123;color: tintColor&#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  Page4: &#123;</span><br><span class=\"line\">    screen: Page4,</span><br><span class=\"line\">    navigationOptions: &#123;</span><br><span class=\"line\">      tabBarLabel: &apos;我的&apos;,</span><br><span class=\"line\">      tabBarIcon: (&#123;tintColor, focused&#125;) =&gt; (</span><br><span class=\"line\">        &lt;Ionicons</span><br><span class=\"line\">          name=&#123;&apos;ios-home&apos;&#125;</span><br><span class=\"line\">          size=&#123;26&#125;</span><br><span class=\"line\">          style=&#123;&#123;color: tintColor&#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">  tabBarOptions: &#123;</span><br><span class=\"line\">    activeTintColor: Platform.OS === &apos;ios&apos; ? &apos;#e91e63&apos; : &apos;#fff&apos;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const AppTopNavigator = createMaterialTopTabNavigator(&#123;</span><br><span class=\"line\">  Page1: &#123;</span><br><span class=\"line\">    screen: Page1,</span><br><span class=\"line\">    navigationOptions: &#123;</span><br><span class=\"line\">      tabBarLabel: &apos;All&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  Page2: &#123;</span><br><span class=\"line\">    screen: Page2,</span><br><span class=\"line\">    navigationOptions: &#123;</span><br><span class=\"line\">      tabBarLabel: &apos;iOS&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  Page3: &#123;</span><br><span class=\"line\">    screen: Page3,</span><br><span class=\"line\">    navigationOptions: &#123;</span><br><span class=\"line\">      tabBarLabel: &apos;Page3&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">  tabBarOptions: &#123;</span><br><span class=\"line\">    tabStyle: &#123;</span><br><span class=\"line\">        minWidth: 50</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    upperCaseLabel: false,//是否使标签大写，默认为true</span><br><span class=\"line\">    scrollEnabled: true,//是否支持 选项卡滚动，默认false</span><br><span class=\"line\">    // activeTintColor: &apos;white&apos;,//label和icon的前景色 活跃状态下（选中）</span><br><span class=\"line\">    // inactiveTintColor: &apos;gray&apos;,//label和icon的前景色 活跃状态下（未选中）</span><br><span class=\"line\">    style: &#123;</span><br><span class=\"line\">      backgroundColor: &apos;#678&apos;,//TabBar 的背景颜色</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    indicatorStyle: &#123;</span><br><span class=\"line\">      height: 2,</span><br><span class=\"line\">      backgroundColor: &apos;white&apos;,</span><br><span class=\"line\">    &#125;,//标签指示器的样式</span><br><span class=\"line\">    labelStyle: &#123;</span><br><span class=\"line\">      fontSize: 13,</span><br><span class=\"line\">      marginTop: 6,</span><br><span class=\"line\">      marginBottom: 6,</span><br><span class=\"line\">    &#125;,//文字的样式</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用把底部放到createStackNavigator</span><br><span class=\"line\"></span><br><span class=\"line\">export const AppStackNavigator = createStackNavigator(&#123;</span><br><span class=\"line\">  Bottom: &#123;</span><br><span class=\"line\">    screen: AppBottomNavigator,</span><br><span class=\"line\">    navigationOptions: &#123;</span><br><span class=\"line\">      title: &apos;BottomNavigator&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  Top: &#123;</span><br><span class=\"line\">    screen: AppTopNavigator,</span><br><span class=\"line\">    navigationOptions: &#123;</span><br><span class=\"line\">      title: &apos;TopNavigator&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  HomePage: &#123;</span><br><span class=\"line\">    screen: HomePage</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  //动态方式获取title</span><br><span class=\"line\">  Page1: &#123;</span><br><span class=\"line\">    screen: Page1,</span><br><span class=\"line\">    navigationOptions: (&#123;navigation&#125;) =&gt; (&#123;</span><br><span class=\"line\">      title: `$&#123;navigation.state.params.name&#125;页面名字`</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"createDrawerNavigator-createSwitchNavigator\"><a href=\"#createDrawerNavigator-createSwitchNavigator\" class=\"headerlink\" title=\"createDrawerNavigator+createSwitchNavigator\"></a>createDrawerNavigator+createSwitchNavigator</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const DrawerNav = createDrawerNavigator(&#123;</span><br><span class=\"line\">  Page4: &#123;</span><br><span class=\"line\">    screen: Page4,</span><br><span class=\"line\">    navigationOptions: &#123;</span><br><span class=\"line\">      drawerLabel: &apos;Page4&apos;,</span><br><span class=\"line\">      drawerIcon: (&#123;tintColor&#125;) =&gt; (</span><br><span class=\"line\">        &lt;MaterialIcons name=&quot;drafts&quot; size=&#123;24&#125; style=&#123;&#123;color: tintColor&#125;&#125;/&gt;</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  Page5: &#123;</span><br><span class=\"line\">    screen: Page5,</span><br><span class=\"line\">    navigationOptions: &#123;</span><br><span class=\"line\">      drawerLabel: &apos;Page5&apos;,</span><br><span class=\"line\">      drawerIcon: (&#123;tintColor&#125;) =&gt; (</span><br><span class=\"line\">        &lt;MaterialIcons</span><br><span class=\"line\">          name=&quot;move-to-inbox&quot;</span><br><span class=\"line\">          size=&#123;24&#125;</span><br><span class=\"line\">          style=&#123;&#123;color: tintColor&#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  initialRouteName: &apos;Page4&apos;, //第一次加载时初始选项卡路由的 routeName</span><br><span class=\"line\">  contentOptions: &#123;</span><br><span class=\"line\">      activeTintColor: &apos;#e91e63&apos;,//活动选项卡的标签和图标颜色</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  contentComponent: (props) =&gt; (</span><br><span class=\"line\">    &lt;ScrollView style=&#123;&#123;backgroundColor: &apos;#987656&apos;, flex: 1&#125;&#125;&gt;</span><br><span class=\"line\">      &lt;SafeAreaView forceInset=&#123;&#123;top: &apos;always&apos;, horizontal: &apos;never&apos;&#125;&#125;&gt;</span><br><span class=\"line\">        &lt;DrawerItems &#123;...props&#125; /&gt;</span><br><span class=\"line\">      &lt;/SafeAreaView&gt;</span><br><span class=\"line\">    &lt;/ScrollView&gt;</span><br><span class=\"line\">  ) //用于呈现抽屉内容 (例如, 导航项) 的组件</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"react-native-navigation3-x\"><a href=\"#react-native-navigation3-x\" class=\"headerlink\" title=\"react-native-navigation3.x\"></a>react-native-navigation3.x</h3>","more":"<h3 id=\"真机调试\"><a href=\"#真机调试\" class=\"headerlink\" title=\"真机调试\"></a>真机调试</h3><p>在iOS上<br>打开RCTWebSocketExecutor.m文件，将”localhost”改为你电脑的ip，<br>然后在Developer Menu下单击”Debug JS Remotely”启动远程调试功能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString *host = [[_bridge bundleURL] host] ?: @&quot;localhost&quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"react生命周期\"><a href=\"#react生命周期\" class=\"headerlink\" title=\"react生命周期\"></a>react生命周期</h3><p>Mounting-装载<br>Updating-更新<br>Unmounting-卸载<br>组件初始化会调用构造方法constructor。<br>然后会调用render方法进行渲染，相关的组件和节点会挂载到真实的DOM节点去。render方法执行完可以获取真实的DOM节点。<br>render方法执行完回调componentDidMount方法,可以获取真实的DOM节点。<br>更新阶段，每个组件都有更新状态,setState，重新渲染之后componentDidUpdate会被回调<br>卸载阶段会调用componentWillUnmount</p>\n<h3 id=\"React-Navigation3-x\"><a href=\"#React-Navigation3-x\" class=\"headerlink\" title=\"React Navigation3.x\"></a>React Navigation3.x</h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i react-navigation  react-native-gesture-handler -S </span><br><span class=\"line\"></span><br><span class=\"line\">react-native link react-native-gesture-handler</span><br></pre></td></tr></table></figure>\n<h4 id=\"createStackNavigator\"><a href=\"#createStackNavigator\" class=\"headerlink\" title=\"createStackNavigator\"></a>createStackNavigator</h4><p>为你的应用程序提供一种在每个新屏幕放置在堆栈顶部的屏幕之间转换的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AppNavigators.js </span><br><span class=\"line\">引入页面文件，配置标题栏</span><br><span class=\"line\">export const AppStackNavigator = createStackNavigator(&#123;</span><br><span class=\"line\">  HomePage: &#123;</span><br><span class=\"line\">    screen: HomePage</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  //动态方式获取title</span><br><span class=\"line\">  Page1: &#123;</span><br><span class=\"line\">    screen: Page1,</span><br><span class=\"line\">    navigationOptions: (&#123;navigation&#125;) =&gt; (&#123;</span><br><span class=\"line\">      title: `$&#123;navigation.state.params.name&#125;页面名字`</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  //静态配置title</span><br><span class=\"line\">  Page2: &#123;</span><br><span class=\"line\">    screen: Page2,</span><br><span class=\"line\">    navigationOptions: &#123;</span><br><span class=\"line\">      title: &apos;This is Page2&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  //动态方式配置</span><br><span class=\"line\">  Page3: &#123;</span><br><span class=\"line\">    screen: Page3,</span><br><span class=\"line\">    navigationOptions: (props) =&gt; &#123;</span><br><span class=\"line\">      const &#123; navigation &#125; = props</span><br><span class=\"line\">      const &#123; state,setParams &#125; = navigation</span><br><span class=\"line\">      const &#123; params &#125; = state</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        title: params.title ? params.title : &apos;This is Page3&apos;,</span><br><span class=\"line\">        headerRight: (</span><br><span class=\"line\">          &lt;Button</span><br><span class=\"line\">            title=&#123;params.mode === &apos;edit&apos; ? &apos;保存&apos; : &apos;编辑&apos;&#125;</span><br><span class=\"line\">            onPress=&#123;() =&gt;</span><br><span class=\"line\">                setParams(&#123;mode: params.mode === &apos;edit&apos; ? &apos;&apos; : &apos;edit&apos;&#125;)&#125;</span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">APP.js</span><br><span class=\"line\"></span><br><span class=\"line\">需要注册createAppContainer</span><br><span class=\"line\">import &#123;AppStackNavigator&#125; from &apos;./navigators/AppNavigators&apos;</span><br><span class=\"line\">import &#123;createAppContainer&#125; from &apos;react-navigation&apos;</span><br><span class=\"line\">export default createAppContainer(AppStackNavigator);</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>页面传参和接受参数</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HomePage.js</span><br><span class=\"line\"></span><br><span class=\"line\">//通过this.props.navigation.navigate进行页面跳转</span><br><span class=\"line\">export default class HomePage extends Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123;navigation&#125; = this.props</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;Button</span><br><span class=\"line\">        title=&#123;&apos;Go to Page1&apos;&#125;</span><br><span class=\"line\">        onPress=&#123;() =&gt; &#123;</span><br><span class=\"line\">          navigation.navigate(&apos;Page1&apos;,&#123;name:&apos;参数&apos;&#125;)</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">Page1.js</span><br><span class=\"line\"></span><br><span class=\"line\">//通过this.props.navigation.state.params接收传过来的参数</span><br><span class=\"line\">export default class Page1 extends Component &#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    const &#123;navigation&#125; = this.props</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;View&gt;</span><br><span class=\"line\">        &#123;navigation.state.params.name&#125;</span><br><span class=\"line\">      &lt;View&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"createBottomTabNavigator-createMaterialTopTabNavigator\"><a href=\"#createBottomTabNavigator-createMaterialTopTabNavigator\" class=\"headerlink\" title=\"createBottomTabNavigator+createMaterialTopTabNavigator\"></a>createBottomTabNavigator+createMaterialTopTabNavigator</h4><ol>\n<li>createBottomTabNavigator：创建底部导航栏组件</li>\n<li>createMaterialTopTabNavigator：创建顶部导航栏组件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const AppBottomNavigator = createBottomTabNavigator(&#123;</span><br><span class=\"line\">  Page1: &#123;</span><br><span class=\"line\">    screen: Page1,</span><br><span class=\"line\">    navigationOptions: &#123;</span><br><span class=\"line\">      tabBarLabel: &apos;最热&apos;,</span><br><span class=\"line\">      tabBarIcon: (&#123;tintColor, focused&#125;) =&gt; (</span><br><span class=\"line\">        &lt;Ionicons</span><br><span class=\"line\">          name=&#123;&apos;ios-home&apos;&#125;</span><br><span class=\"line\">          size=&#123;26&#125;</span><br><span class=\"line\">          style=&#123;&#123;color: tintColor&#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  Page2: &#123;</span><br><span class=\"line\">    screen: Page2,</span><br><span class=\"line\">    navigationOptions: &#123;</span><br><span class=\"line\">      tabBarLabel: &apos;趋势&apos;,</span><br><span class=\"line\">      tabBarIcon: (&#123;tintColor, focused&#125;) =&gt; (</span><br><span class=\"line\">        &lt;Ionicons</span><br><span class=\"line\">          name=&#123;&apos;ios-people&apos;&#125;</span><br><span class=\"line\">          size=&#123;26&#125;</span><br><span class=\"line\">          style=&#123;&#123;color: tintColor&#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  Page3: &#123;</span><br><span class=\"line\">    screen: Page3,</span><br><span class=\"line\">    navigationOptions: &#123;</span><br><span class=\"line\">      tabBarLabel: &apos;收藏&apos;,</span><br><span class=\"line\">      tabBarIcon: (&#123;tintColor, focused&#125;) =&gt; (</span><br><span class=\"line\">        &lt;Ionicons</span><br><span class=\"line\">          name=&#123;&apos;ios-chatboxes&apos;&#125;</span><br><span class=\"line\">          size=&#123;26&#125;</span><br><span class=\"line\">          style=&#123;&#123;color: tintColor&#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  Page4: &#123;</span><br><span class=\"line\">    screen: Page4,</span><br><span class=\"line\">    navigationOptions: &#123;</span><br><span class=\"line\">      tabBarLabel: &apos;我的&apos;,</span><br><span class=\"line\">      tabBarIcon: (&#123;tintColor, focused&#125;) =&gt; (</span><br><span class=\"line\">        &lt;Ionicons</span><br><span class=\"line\">          name=&#123;&apos;ios-home&apos;&#125;</span><br><span class=\"line\">          size=&#123;26&#125;</span><br><span class=\"line\">          style=&#123;&#123;color: tintColor&#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">  tabBarOptions: &#123;</span><br><span class=\"line\">    activeTintColor: Platform.OS === &apos;ios&apos; ? &apos;#e91e63&apos; : &apos;#fff&apos;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const AppTopNavigator = createMaterialTopTabNavigator(&#123;</span><br><span class=\"line\">  Page1: &#123;</span><br><span class=\"line\">    screen: Page1,</span><br><span class=\"line\">    navigationOptions: &#123;</span><br><span class=\"line\">      tabBarLabel: &apos;All&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  Page2: &#123;</span><br><span class=\"line\">    screen: Page2,</span><br><span class=\"line\">    navigationOptions: &#123;</span><br><span class=\"line\">      tabBarLabel: &apos;iOS&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  Page3: &#123;</span><br><span class=\"line\">    screen: Page3,</span><br><span class=\"line\">    navigationOptions: &#123;</span><br><span class=\"line\">      tabBarLabel: &apos;Page3&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">  tabBarOptions: &#123;</span><br><span class=\"line\">    tabStyle: &#123;</span><br><span class=\"line\">        minWidth: 50</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    upperCaseLabel: false,//是否使标签大写，默认为true</span><br><span class=\"line\">    scrollEnabled: true,//是否支持 选项卡滚动，默认false</span><br><span class=\"line\">    // activeTintColor: &apos;white&apos;,//label和icon的前景色 活跃状态下（选中）</span><br><span class=\"line\">    // inactiveTintColor: &apos;gray&apos;,//label和icon的前景色 活跃状态下（未选中）</span><br><span class=\"line\">    style: &#123;</span><br><span class=\"line\">      backgroundColor: &apos;#678&apos;,//TabBar 的背景颜色</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    indicatorStyle: &#123;</span><br><span class=\"line\">      height: 2,</span><br><span class=\"line\">      backgroundColor: &apos;white&apos;,</span><br><span class=\"line\">    &#125;,//标签指示器的样式</span><br><span class=\"line\">    labelStyle: &#123;</span><br><span class=\"line\">      fontSize: 13,</span><br><span class=\"line\">      marginTop: 6,</span><br><span class=\"line\">      marginBottom: 6,</span><br><span class=\"line\">    &#125;,//文字的样式</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用把底部放到createStackNavigator</span><br><span class=\"line\"></span><br><span class=\"line\">export const AppStackNavigator = createStackNavigator(&#123;</span><br><span class=\"line\">  Bottom: &#123;</span><br><span class=\"line\">    screen: AppBottomNavigator,</span><br><span class=\"line\">    navigationOptions: &#123;</span><br><span class=\"line\">      title: &apos;BottomNavigator&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  Top: &#123;</span><br><span class=\"line\">    screen: AppTopNavigator,</span><br><span class=\"line\">    navigationOptions: &#123;</span><br><span class=\"line\">      title: &apos;TopNavigator&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  HomePage: &#123;</span><br><span class=\"line\">    screen: HomePage</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  //动态方式获取title</span><br><span class=\"line\">  Page1: &#123;</span><br><span class=\"line\">    screen: Page1,</span><br><span class=\"line\">    navigationOptions: (&#123;navigation&#125;) =&gt; (&#123;</span><br><span class=\"line\">      title: `$&#123;navigation.state.params.name&#125;页面名字`</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"createDrawerNavigator-createSwitchNavigator\"><a href=\"#createDrawerNavigator-createSwitchNavigator\" class=\"headerlink\" title=\"createDrawerNavigator+createSwitchNavigator\"></a>createDrawerNavigator+createSwitchNavigator</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const DrawerNav = createDrawerNavigator(&#123;</span><br><span class=\"line\">  Page4: &#123;</span><br><span class=\"line\">    screen: Page4,</span><br><span class=\"line\">    navigationOptions: &#123;</span><br><span class=\"line\">      drawerLabel: &apos;Page4&apos;,</span><br><span class=\"line\">      drawerIcon: (&#123;tintColor&#125;) =&gt; (</span><br><span class=\"line\">        &lt;MaterialIcons name=&quot;drafts&quot; size=&#123;24&#125; style=&#123;&#123;color: tintColor&#125;&#125;/&gt;</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  Page5: &#123;</span><br><span class=\"line\">    screen: Page5,</span><br><span class=\"line\">    navigationOptions: &#123;</span><br><span class=\"line\">      drawerLabel: &apos;Page5&apos;,</span><br><span class=\"line\">      drawerIcon: (&#123;tintColor&#125;) =&gt; (</span><br><span class=\"line\">        &lt;MaterialIcons</span><br><span class=\"line\">          name=&quot;move-to-inbox&quot;</span><br><span class=\"line\">          size=&#123;24&#125;</span><br><span class=\"line\">          style=&#123;&#123;color: tintColor&#125;&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  initialRouteName: &apos;Page4&apos;, //第一次加载时初始选项卡路由的 routeName</span><br><span class=\"line\">  contentOptions: &#123;</span><br><span class=\"line\">      activeTintColor: &apos;#e91e63&apos;,//活动选项卡的标签和图标颜色</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  contentComponent: (props) =&gt; (</span><br><span class=\"line\">    &lt;ScrollView style=&#123;&#123;backgroundColor: &apos;#987656&apos;, flex: 1&#125;&#125;&gt;</span><br><span class=\"line\">      &lt;SafeAreaView forceInset=&#123;&#123;top: &apos;always&apos;, horizontal: &apos;never&apos;&#125;&#125;&gt;</span><br><span class=\"line\">        &lt;DrawerItems &#123;...props&#125; /&gt;</span><br><span class=\"line\">      &lt;/SafeAreaView&gt;</span><br><span class=\"line\">    &lt;/ScrollView&gt;</span><br><span class=\"line\">  ) //用于呈现抽屉内容 (例如, 导航项) 的组件</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>"},{"title":"react-native-打包","date":"2019-06-25T16:00:00.000Z","_content":"\n### Android和iOS打包\n<!-- more -->\n\n#### Android\n\n```\n1.生成签名 - 生成一个有效期10000天的证书，证书为： my-release-key.keystore\n注意: 有效期写长，密码要记住\nkeytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000\n\n2.配置打包时的签名-android/app/gradle.properties\nMYAPP_RELEASE_KEY_ALIAS=my-key-alias\nMYAPP_RELEASE_KEY_PASSWORD=123456\nMYAPP_RELEASE_STORE_PASSWORD=123456\nMYAPP_RELEASE_STORE_FILE=my-release-key.keystore\nandroid.useDeprecatedNdk=true\n\n3.添加签名 - android/app/build.gradle\nandroid {\n  ...\n  defaultConfig { ... }\n  signingConfigs {\n      release {\n          storeFile file(MYAPP_RELEASE_STORE_FILE)\n          storePassword MYAPP_RELEASE_STORE_PASSWORD\n          keyAlias MYAPP_RELEASE_KEY_ALIAS\n          keyPassword MYAPP_RELEASE_KEY_PASSWORD\n      }\n  }\n  buildTypes {\n      release {\n          ...\n          signingConfig signingConfigs.release\n      }\n  }\n}\n\n4.生成apk\n生成的apk文件在， android/app/build/outputs/apk/ 下\n./gradlew assembleRelease\n```\n\n#### iOS\n\n```\n1.找到ios目录，在该目录下新建bundle目录\n\n2.package.json\n{\n    \"scripts\":{\n        \"bundle-ios\":\"node node_modules/react-native/local-cli/cli.js bundle --entry-file index.js  --platform ios --dev false --bundle-output ./ios/bundle/index.ios.jsbundle --assets-dest ./ios/bundle\"\n    }\n}\n\n3.运行npm run bundle-ios\n\n4.Xcode中集成，添加资源到项目中，必须选择Create folder references的方式添加文件夹\n\n5.添加证书、配置描述文件打包\n```\n","source":"_posts/react-native-package.md","raw":"---\ntitle: react-native-打包\ndate: 2019-06-26\ntags: ['React Native']\ncategories: React Native\n---\n\n### Android和iOS打包\n<!-- more -->\n\n#### Android\n\n```\n1.生成签名 - 生成一个有效期10000天的证书，证书为： my-release-key.keystore\n注意: 有效期写长，密码要记住\nkeytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000\n\n2.配置打包时的签名-android/app/gradle.properties\nMYAPP_RELEASE_KEY_ALIAS=my-key-alias\nMYAPP_RELEASE_KEY_PASSWORD=123456\nMYAPP_RELEASE_STORE_PASSWORD=123456\nMYAPP_RELEASE_STORE_FILE=my-release-key.keystore\nandroid.useDeprecatedNdk=true\n\n3.添加签名 - android/app/build.gradle\nandroid {\n  ...\n  defaultConfig { ... }\n  signingConfigs {\n      release {\n          storeFile file(MYAPP_RELEASE_STORE_FILE)\n          storePassword MYAPP_RELEASE_STORE_PASSWORD\n          keyAlias MYAPP_RELEASE_KEY_ALIAS\n          keyPassword MYAPP_RELEASE_KEY_PASSWORD\n      }\n  }\n  buildTypes {\n      release {\n          ...\n          signingConfig signingConfigs.release\n      }\n  }\n}\n\n4.生成apk\n生成的apk文件在， android/app/build/outputs/apk/ 下\n./gradlew assembleRelease\n```\n\n#### iOS\n\n```\n1.找到ios目录，在该目录下新建bundle目录\n\n2.package.json\n{\n    \"scripts\":{\n        \"bundle-ios\":\"node node_modules/react-native/local-cli/cli.js bundle --entry-file index.js  --platform ios --dev false --bundle-output ./ios/bundle/index.ios.jsbundle --assets-dest ./ios/bundle\"\n    }\n}\n\n3.运行npm run bundle-ios\n\n4.Xcode中集成，添加资源到项目中，必须选择Create folder references的方式添加文件夹\n\n5.添加证书、配置描述文件打包\n```\n","slug":"react-native-package","published":1,"updated":"2019-06-26T01:19:40.408Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq42x003fhe6j73679zgn","content":"<h3 id=\"Android和iOS打包\"><a href=\"#Android和iOS打包\" class=\"headerlink\" title=\"Android和iOS打包\"></a>Android和iOS打包</h3><a id=\"more\"></a>\n<h4 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.生成签名 - 生成一个有效期10000天的证书，证书为： my-release-key.keystore</span><br><span class=\"line\">注意: 有效期写长，密码要记住</span><br><span class=\"line\">keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000</span><br><span class=\"line\"></span><br><span class=\"line\">2.配置打包时的签名-android/app/gradle.properties</span><br><span class=\"line\">MYAPP_RELEASE_KEY_ALIAS=my-key-alias</span><br><span class=\"line\">MYAPP_RELEASE_KEY_PASSWORD=123456</span><br><span class=\"line\">MYAPP_RELEASE_STORE_PASSWORD=123456</span><br><span class=\"line\">MYAPP_RELEASE_STORE_FILE=my-release-key.keystore</span><br><span class=\"line\">android.useDeprecatedNdk=true</span><br><span class=\"line\"></span><br><span class=\"line\">3.添加签名 - android/app/build.gradle</span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  defaultConfig &#123; ... &#125;</span><br><span class=\"line\">  signingConfigs &#123;</span><br><span class=\"line\">      release &#123;</span><br><span class=\"line\">          storeFile file(MYAPP_RELEASE_STORE_FILE)</span><br><span class=\"line\">          storePassword MYAPP_RELEASE_STORE_PASSWORD</span><br><span class=\"line\">          keyAlias MYAPP_RELEASE_KEY_ALIAS</span><br><span class=\"line\">          keyPassword MYAPP_RELEASE_KEY_PASSWORD</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  buildTypes &#123;</span><br><span class=\"line\">      release &#123;</span><br><span class=\"line\">          ...</span><br><span class=\"line\">          signingConfig signingConfigs.release</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">4.生成apk</span><br><span class=\"line\">生成的apk文件在， android/app/build/outputs/apk/ 下</span><br><span class=\"line\">./gradlew assembleRelease</span><br></pre></td></tr></table></figure>\n<h4 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.找到ios目录，在该目录下新建bundle目录</span><br><span class=\"line\"></span><br><span class=\"line\">2.package.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;scripts&quot;:&#123;</span><br><span class=\"line\">        &quot;bundle-ios&quot;:&quot;node node_modules/react-native/local-cli/cli.js bundle --entry-file index.js  --platform ios --dev false --bundle-output ./ios/bundle/index.ios.jsbundle --assets-dest ./ios/bundle&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">3.运行npm run bundle-ios</span><br><span class=\"line\"></span><br><span class=\"line\">4.Xcode中集成，添加资源到项目中，必须选择Create folder references的方式添加文件夹</span><br><span class=\"line\"></span><br><span class=\"line\">5.添加证书、配置描述文件打包</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"Android和iOS打包\"><a href=\"#Android和iOS打包\" class=\"headerlink\" title=\"Android和iOS打包\"></a>Android和iOS打包</h3>","more":"<h4 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.生成签名 - 生成一个有效期10000天的证书，证书为： my-release-key.keystore</span><br><span class=\"line\">注意: 有效期写长，密码要记住</span><br><span class=\"line\">keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000</span><br><span class=\"line\"></span><br><span class=\"line\">2.配置打包时的签名-android/app/gradle.properties</span><br><span class=\"line\">MYAPP_RELEASE_KEY_ALIAS=my-key-alias</span><br><span class=\"line\">MYAPP_RELEASE_KEY_PASSWORD=123456</span><br><span class=\"line\">MYAPP_RELEASE_STORE_PASSWORD=123456</span><br><span class=\"line\">MYAPP_RELEASE_STORE_FILE=my-release-key.keystore</span><br><span class=\"line\">android.useDeprecatedNdk=true</span><br><span class=\"line\"></span><br><span class=\"line\">3.添加签名 - android/app/build.gradle</span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  defaultConfig &#123; ... &#125;</span><br><span class=\"line\">  signingConfigs &#123;</span><br><span class=\"line\">      release &#123;</span><br><span class=\"line\">          storeFile file(MYAPP_RELEASE_STORE_FILE)</span><br><span class=\"line\">          storePassword MYAPP_RELEASE_STORE_PASSWORD</span><br><span class=\"line\">          keyAlias MYAPP_RELEASE_KEY_ALIAS</span><br><span class=\"line\">          keyPassword MYAPP_RELEASE_KEY_PASSWORD</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  buildTypes &#123;</span><br><span class=\"line\">      release &#123;</span><br><span class=\"line\">          ...</span><br><span class=\"line\">          signingConfig signingConfigs.release</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">4.生成apk</span><br><span class=\"line\">生成的apk文件在， android/app/build/outputs/apk/ 下</span><br><span class=\"line\">./gradlew assembleRelease</span><br></pre></td></tr></table></figure>\n<h4 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.找到ios目录，在该目录下新建bundle目录</span><br><span class=\"line\"></span><br><span class=\"line\">2.package.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;scripts&quot;:&#123;</span><br><span class=\"line\">        &quot;bundle-ios&quot;:&quot;node node_modules/react-native/local-cli/cli.js bundle --entry-file index.js  --platform ios --dev false --bundle-output ./ios/bundle/index.ios.jsbundle --assets-dest ./ios/bundle&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">3.运行npm run bundle-ios</span><br><span class=\"line\"></span><br><span class=\"line\">4.Xcode中集成，添加资源到项目中，必须选择Create folder references的方式添加文件夹</span><br><span class=\"line\"></span><br><span class=\"line\">5.添加证书、配置描述文件打包</span><br></pre></td></tr></table></figure>"},{"title":"React RouterV4","date":"2019-02-24T12:27:40.000Z","_content":"### React Router\n<!-- more -->\n\n### react-router和react-router-dom理解\n1. react-router\n提供了一些router的核心api,包括Router,Route,Switch等\n\n2.react-router-dom\n提供了BrowserRouter,HashRouter,Route,Link,NavLink\n\n### react-router-dom核心用法\n1.HashRouter和BrowserRouter\n\n2.Route:path,exact,component,render\nRoute:路由的根基\npath:路由的匹配\nexact:精准匹配\ncomponent:渲染的 React 组件\nrender:方便的内联渲染和包裹\n\n3.NavLink,Link\nLink:导航，路由跳转\n\n4.Switch\n渲染与该地址匹配的第一个子节点 <Route>,匹配到不会往下继续匹配。\n\n5.Redirect\n路由重定向\n\n6.HashRouter和BrowserRouter\nHashRouter: http://localhost:3000/#/admin，带有#号\nBrowserRouter:http://localhost:3000/admin,基于浏览的Router\n\n\n","source":"_posts/react-router.md","raw":"---\ntitle: React RouterV4\ndate: 2019-02-24 20:27:40\ntags: [\"React\"]\ncategories: React\n---\n### React Router\n<!-- more -->\n\n### react-router和react-router-dom理解\n1. react-router\n提供了一些router的核心api,包括Router,Route,Switch等\n\n2.react-router-dom\n提供了BrowserRouter,HashRouter,Route,Link,NavLink\n\n### react-router-dom核心用法\n1.HashRouter和BrowserRouter\n\n2.Route:path,exact,component,render\nRoute:路由的根基\npath:路由的匹配\nexact:精准匹配\ncomponent:渲染的 React 组件\nrender:方便的内联渲染和包裹\n\n3.NavLink,Link\nLink:导航，路由跳转\n\n4.Switch\n渲染与该地址匹配的第一个子节点 <Route>,匹配到不会往下继续匹配。\n\n5.Redirect\n路由重定向\n\n6.HashRouter和BrowserRouter\nHashRouter: http://localhost:3000/#/admin，带有#号\nBrowserRouter:http://localhost:3000/admin,基于浏览的Router\n\n\n","slug":"react-router","published":1,"updated":"2019-02-24T12:51:46.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq42y003ihe6jyo9cl1hl","content":"<h3 id=\"React-Router\"><a href=\"#React-Router\" class=\"headerlink\" title=\"React Router\"></a>React Router</h3><a id=\"more\"></a>\n<h3 id=\"react-router和react-router-dom理解\"><a href=\"#react-router和react-router-dom理解\" class=\"headerlink\" title=\"react-router和react-router-dom理解\"></a>react-router和react-router-dom理解</h3><ol>\n<li>react-router<br>提供了一些router的核心api,包括Router,Route,Switch等</li>\n</ol>\n<p>2.react-router-dom<br>提供了BrowserRouter,HashRouter,Route,Link,NavLink</p>\n<h3 id=\"react-router-dom核心用法\"><a href=\"#react-router-dom核心用法\" class=\"headerlink\" title=\"react-router-dom核心用法\"></a>react-router-dom核心用法</h3><p>1.HashRouter和BrowserRouter</p>\n<p>2.Route:path,exact,component,render<br>Route:路由的根基<br>path:路由的匹配<br>exact:精准匹配<br>component:渲染的 React 组件<br>render:方便的内联渲染和包裹</p>\n<p>3.NavLink,Link<br>Link:导航，路由跳转</p>\n<p>4.Switch<br>渲染与该地址匹配的第一个子节点 <route>,匹配到不会往下继续匹配。</route></p>\n<p>5.Redirect<br>路由重定向</p>\n<p>6.HashRouter和BrowserRouter<br>HashRouter: <a href=\"http://localhost:3000/#/admin，带有#号\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/#/admin，带有#号</a><br>BrowserRouter:<a href=\"http://localhost:3000/admin,基于浏览的Router\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/admin,基于浏览的Router</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"React-Router\"><a href=\"#React-Router\" class=\"headerlink\" title=\"React Router\"></a>React Router</h3>","more":"<h3 id=\"react-router和react-router-dom理解\"><a href=\"#react-router和react-router-dom理解\" class=\"headerlink\" title=\"react-router和react-router-dom理解\"></a>react-router和react-router-dom理解</h3><ol>\n<li>react-router<br>提供了一些router的核心api,包括Router,Route,Switch等</li>\n</ol>\n<p>2.react-router-dom<br>提供了BrowserRouter,HashRouter,Route,Link,NavLink</p>\n<h3 id=\"react-router-dom核心用法\"><a href=\"#react-router-dom核心用法\" class=\"headerlink\" title=\"react-router-dom核心用法\"></a>react-router-dom核心用法</h3><p>1.HashRouter和BrowserRouter</p>\n<p>2.Route:path,exact,component,render<br>Route:路由的根基<br>path:路由的匹配<br>exact:精准匹配<br>component:渲染的 React 组件<br>render:方便的内联渲染和包裹</p>\n<p>3.NavLink,Link<br>Link:导航，路由跳转</p>\n<p>4.Switch<br>渲染与该地址匹配的第一个子节点 <route>,匹配到不会往下继续匹配。</route></p>\n<p>5.Redirect<br>路由重定向</p>\n<p>6.HashRouter和BrowserRouter<br>HashRouter: <a href=\"http://localhost:3000/#/admin，带有#号\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/#/admin，带有#号</a><br>BrowserRouter:<a href=\"http://localhost:3000/admin,基于浏览的Router\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/admin,基于浏览的Router</a></p>"},{"title":"react-native常用组件","date":"2019-07-02T16:00:00.000Z","_content":"\n### react-native常用组件\n<!-- more -->\n\n#### 底部导航菜单 - react-native-tab-navigator\nprops={this.props} 把react-navigation的api传递到各组件\n\n```\nnpm install react-native-tab-navigator --save\n\nimport TabNavigator from 'react-native-tab-navigator';\n<View style={styles.container}>\n  <TabNavigator>\n    <TabNavigator.Item\n      selected={this.state.selectedTab === 'home'}\n      selectedTitleStyle={{color:'red'}} //文字的颜色\n      title=\"首页\"\n      renderIcon={() => <Image style={styles.image} source={require('../assets/images/ic_polular.png')} />}\n      renderSelectedIcon={() => <Image style={[styles.image,{tintColor:'red'}]} source={require('../assets/images/ic_polular.png')} />}\n      onPress={() => this.setState({ selectedTab: 'home' })}>\n      <Home props={this.props}/>\n    </TabNavigator.Item>\n    <TabNavigator.Item\n      selected={this.state.selectedTab === 'my'}\n      selectedTitleStyle={{color:'red'}}\n      title=\"我的\"\n      renderIcon={() => <Image style={styles.image} source={require('../assets/images/ic_my.png')} />}\n      renderSelectedIcon={() => <Image style={[styles.image,{tintColor:'red'}]} source={require('../assets/images/ic_my.png')} />}\n      onPress={() => this.setState({ selectedTab: 'my' })}>\n      <My props={this.props}/>\n    </TabNavigator.Item>\n  </TabNavigator>\n</View>\n```\n\n#### 顶部导航栏 - react-native-scrollable-tab-view \n\n```\nnpm install react-native-scrollable-tab-view --save\nScrollableTabBar: 自定义\n\nimport ScrollableTabView, {ScrollableTabBar} from 'react-native-scrollable-tab-view'\n<ScrollableTabView\n  tabBarUnderlineStyle={{backgroundColor: '#e7e7e7', height: 2}}\n  tabBarInactiveTextColor='mintcream'\n  tabBarActiveTextColor='white'\n  ref=\"scrollableTabView\"\n  tabBarBackgroundColor={'#2196f3'}\n  initialPage={0}\n  renderTabBar={()=><ScrollableTabBar style={{height: 40, borderWidth: 0, elevation: 2}}  tabStyle={{height: 39}} />}\n>\n  <PopularTab tabLabel=\"Java\"></PopularTab>\n  <PopularTab tabLabel=\"iOS\"></PopularTab>\n</ScrollableTabView>\n```\n#### 复选框 - react-native-check-box\n\n```\nnpm install react-native-check-box --save\n\nimport CheckBox from 'react-native-check-box'\n<CheckBox\n  style={{flex: 1, padding: 10}}   //整行的checkBox\n  onClick={() => this.onClick(data, index)} //复选框的点击事件\n  isChecked={data.checked} //复选框的状态\n  leftText={data.name}  //复选框的name\n  checkedImage={this._checkedImage(true)} //选中\n  unCheckedImage={this._checkedImage(false)} //未选中\n/>\n\n//复选框的是否选中\nonClick(data, index) {\n  data.checked = !data.checked;\n  ArrayUtil.updateArray(this.changeValues, data); //更新数组的工具函数\n  this.state.keys[index] = data;//更新state以便显示选中状态\n  this.setState({\n      keys: this.state.keys\n  })\n}\n\n/**\n  * 判断复选框的视图\n  * @param {Boolean} checked \n  */\n_checkedImage(checked) {\n  return <Ionicons\n    name={checked ? 'ios-checkbox' : 'md-square-outline'}\n    size={20}\n    style={{\n        color: '#2196f3',\n    }}/>\n}\n```\n\n#### 渲染HTML文本 - react-native-htmlview\n\n```\n<HTMLView\n  value={description} //HTML文本内容\n  onLinkPress={(url) => {\n  }} //渲染的文本有链接的时候，单击链接会回调这个方法\n  stylesheet={{\n      p: styles.description,\n      a: styles.description,\n  }} //指定标签的样式\n /> \n```\n\n#### Modal - 弹框组件\n\n```\n/**\n *弹框组件\n */\nimport React, {Component} from 'react'\nimport {Modal, Text, TouchableOpacity, StyleSheet, View, Platform, DeviceInfo} from 'react-native'\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons'\n\nexport default class TrendingDialog extends Component {\n    state = {\n        visible: false,\n    };\n\n    show() {\n      this.setState({\n        visible: true,\n      })\n    }\n\n    dismiss() {\n      this.setState({\n        visible: false,\n      })\n    }\n\n    render() {\n        const {onClose, onSelect} = this.props;\n        return (\n          <Modal\n            transparent={true}\n            visible={this.state.visible}\n            onRequestClose={() => onClose}\n          >\n            <TouchableOpacity\n              style={styles.container}\n              onPress={() => this.dismiss()}\n            >\n              <MaterialIcons\n                name={'arrow-drop-up'}\n                size={36}\n                style={styles.arrow}\n              />\n              <View style={styles.content}>\n                <TouchableOpacity onPress={() => onSelect('11')}>\n                  <View style={styles.text_container}>\n                    <Text style={styles.text}>Displaying the popover on top of other elements</Text>\n                  </View>\n                </TouchableOpacity>\n                <TouchableOpacity onPress={() => onSelect('11')}>\n                  <View style={styles.text_container}>\n                    <Text style={styles.text}>Displaying the popover on top of other elements</Text>\n                  </View>\n                </TouchableOpacity>\n              </View>\n              </TouchableOpacity>\n            </Modal>\n\n        )\n    }\n}\nconst styles = StyleSheet.create({\n    container: {\n      backgroundColor: 'rgba(0,0,0,0.6)',\n      flex: 1,\n      alignItems: 'center',\n      paddingTop: DeviceInfo.isIPhoneX_deprecated ? 30 : 0\n    },\n    arrow: {\n      marginTop: 40,\n      color: 'white',\n      padding: 0,\n      margin: -15\n    },\n    content: {\n      backgroundColor: 'white',\n      borderRadius: 3,\n      paddingTop: 3,\n      paddingBottom: 3,\n      marginRight: 3,\n    },\n    text_container: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'center'\n    },\n    text: {\n      fontSize: 16,\n      color: 'black',\n      fontWeight: '400',\n      padding: 8,\n      paddingLeft: 26,\n      paddingRight: 26\n    },\n    line: {\n      height: 0.3,\n      backgroundColor: 'darkgray',\n    },\n});\n```\n\n```\n使用\n\n<Button title='弹出' onPress={() => this.dialog.show()/>\n<Button title='关闭' onPress={() => this.dialog.dismiss()/>\n\nrenderTrendingDialog() {\n  return <TrendingDialog\n      ref={dialog => this.dialog = dialog}\n      onSelect={tab => this.onSelectTimeSpan(tab)}\n  />\n}\n```\n\n#### 本地存储 - react-native-storage\n\n```\nnpm install react-native-storage\nnpm install @react-native-community/async-storage\nreact-native link @react-native-community/async-storage\n\nimport Storage from 'react-native-storage';\nimport AsyncStorage from '@react-native-community/async-storage';\n\nconst STORAGE = new Storage({\n  // 最大容量，默认值1000条数据循环存储\n  size: 100,\n\n  // 存储引擎：对于RN使用AsyncStorage，对于web使用window.localStorage\n  // 如果不指定则数据只会保存在内存中，重启后即丢失\n  storageBackend: AsyncStorage,\n\n  // 数据过期时间，默认一整天（1000 * 3600 * 24 毫秒），设为null则永不过期\n  defaultExpires: null,\n\n  // 读写时在内存中缓存数据。默认启用。\n  enableCache: true, // 你可以在构造函数这里就写好sync的方法 // 或是在任何时候，直接对storage.sync进行赋值修改 // 或是写到另一个文件里，这里require引入\n\n  // 如果storage中没有相应数据，或数据已过期，\n  // 则会调用相应的sync方法，无缝返回最新数据。\n  // sync方法的具体说明会在后文提到\n  //sync: require('你可以另外写一个文件专门处理sync'),\n});\n\nglobal.STORAGE = STORAGE\n```\n\n```\n使用：\n\nonSave() {\n  STORAGE.save({\n    key: 'loginState',\n    data: {\n      from: 'some other site',\n      userid: 'some userid',\n      token: 'some token',\n    }\n  })\n}\nonLoad() {\n  STORAGE.load({\n    key: 'loginState'\n  }).then(ret => {\n    console.log(ret)\n  }).catch(err => {\n    console.warn(err.message)\n  })\n}\nonRemove() {\n  STORAGE.remove({\n    key: 'loginState',\n  });\n}\n```\n\n#### 轻提示 - react-native-easy-toast\n\n```\nnpm i react-native-easy-toast --save\n\nimport Toast, {DURATION} from 'react-native-easy-toast'\n<Toast\n  ref={toast => this.toast = toast}\n  position={'center'}\n/>\n\n//使用\nthis.toast.show('\bhello')\n```\n\n#### 类似滚动视图的组件，支持视差和粘性头 - react-native-parallax-scroll-view\n\n```\nnpm install react-native-parallax-scroll-view --save\n\nimport ParallaxScrollView from 'react-native-parallax-scroll-view'\n\n// 配置\ngetParallaxRenderConfig(params) {\n  let config = {}\n  //视差头的背景，封面图像\n  config.renderBackground = () => (\n    <View key=\"background\">\n      <Image source={{\n        uri: params.backgroundImg,\n        width: window.width,\n        height: PARALLAX_HEADER_HEIGHT\n      }}/>\n      <View style={{\n        position: 'absolute',\n        top: 0,\n        width: window.width,\n        backgroundColor: 'rgba(0,0,0,.4)',\n        height: PARALLAX_HEADER_HEIGHT\n      }}/>\n    </View>\n  );\n  // 背景显示的内容\n  config.renderForeground = () => (\n    <View key=\"parallax-header\" style={styles.parallaxHeader}>\n      <Image style={styles.avatar} source={{url:params.avatar}}/>\n        <Text style={ styles.sectionSpeakerText }>\n            {params.name}\n        </Text>\n        <Text style={ styles.sectionTitleText }>\n            {params.description}\n        </Text>\n    </View>\n  );\n  //当视差标题向上滚动时，它会粘在视图的顶部。\n  config.renderStickyHeader = () => (\n    <View key=\"sticky-header\" style={styles.stickySection}>\n      <Text style={styles.stickySectionText}>{params.name}</Text>\n    </View>\n  );\n  //固定在视图顶部\n  config.renderFixedHeader = () => (\n    <View key=\"fixed-header\" style={styles.fixedSection}>\n      {ViewUtil.getLeftBackButton(()=> NavigationUtil.goBack(this.props.navigation))}\n      {ViewUtil.getShareButton(()=>this.onShare())}\n    </View>\n  ); \n  return config\n}\n\nrenderView(content,params) {\n  let renderConfig = this.getParallaxRenderConfig(params)\n  return (\n    <ParallaxScrollView\n      backgroundColor=\"#fff\"\n      contentBackgroundColor=\"#f3f3f4\"\n      parallaxHeaderHeight={PARALLAX_HEADER_HEIGHT}\n      stickyHeaderHeight={STICKY_HEADER_HEIGHT}\n      backgroundScrollSpeed={10}\n      {...renderConfig}\n      >{content}</ParallaxScrollView>\n  )\n}\n\nrender() {\n    const content = <View><Text>hello</Text></View>\n    return this.renderView(content,{\n      'name': 'React Native',\n      'description':'React Native产出的并不是“网页应用”， 或者说“HTML5应用”，又或者“混合应用”。 最终产品是一个真正的移动应用',\n      'avatar': 'https://bbs.reactnative.cn/uploads/profile/1-profileimg.png',\n      'backgroundImg':'https://img0.sc115.com/uploads3/sc/jpgs/1904/zzpic17483_sc115.com.jpg'\n    })\n  }\n```\n\n#### 热更新 - react-native-pushy\n\n```\nhttps://github.com/reactnativecn/react-native-pushy/blob/master/docs/guide.md\n\n1. 注册账号https://update.reactnative.cn\n\n2.pushy login\n\n3.创建应用\npushy createApp --platform ios\npushy createApp --platform android\n\n3.发布应用\npushy uploadIpa <your-package.ipa>\npushy uploadApk android/app/build/outputs/apk/app-release.apk\n\n4.发布新的热更新版本\npushy bundle --platform <ios|android>\n\n```\n\n#### 极光分享 - jshare-react-native \n\n#### 支付宝支付 - react-native-yunpeng-alipay\n\n#### 微信支付 - react-native-wechat \n\n#### 配置相对路径\n```\napp文件下,新建一个package.json文件,\n\n{\n  \"name\":\"app\"\n}\n```","source":"_posts/react-native-tools.md","raw":"---\ntitle: react-native常用组件\ndate: 2019-07-03\ntags: ['React Native']\ncategories: React Native\n---\n\n### react-native常用组件\n<!-- more -->\n\n#### 底部导航菜单 - react-native-tab-navigator\nprops={this.props} 把react-navigation的api传递到各组件\n\n```\nnpm install react-native-tab-navigator --save\n\nimport TabNavigator from 'react-native-tab-navigator';\n<View style={styles.container}>\n  <TabNavigator>\n    <TabNavigator.Item\n      selected={this.state.selectedTab === 'home'}\n      selectedTitleStyle={{color:'red'}} //文字的颜色\n      title=\"首页\"\n      renderIcon={() => <Image style={styles.image} source={require('../assets/images/ic_polular.png')} />}\n      renderSelectedIcon={() => <Image style={[styles.image,{tintColor:'red'}]} source={require('../assets/images/ic_polular.png')} />}\n      onPress={() => this.setState({ selectedTab: 'home' })}>\n      <Home props={this.props}/>\n    </TabNavigator.Item>\n    <TabNavigator.Item\n      selected={this.state.selectedTab === 'my'}\n      selectedTitleStyle={{color:'red'}}\n      title=\"我的\"\n      renderIcon={() => <Image style={styles.image} source={require('../assets/images/ic_my.png')} />}\n      renderSelectedIcon={() => <Image style={[styles.image,{tintColor:'red'}]} source={require('../assets/images/ic_my.png')} />}\n      onPress={() => this.setState({ selectedTab: 'my' })}>\n      <My props={this.props}/>\n    </TabNavigator.Item>\n  </TabNavigator>\n</View>\n```\n\n#### 顶部导航栏 - react-native-scrollable-tab-view \n\n```\nnpm install react-native-scrollable-tab-view --save\nScrollableTabBar: 自定义\n\nimport ScrollableTabView, {ScrollableTabBar} from 'react-native-scrollable-tab-view'\n<ScrollableTabView\n  tabBarUnderlineStyle={{backgroundColor: '#e7e7e7', height: 2}}\n  tabBarInactiveTextColor='mintcream'\n  tabBarActiveTextColor='white'\n  ref=\"scrollableTabView\"\n  tabBarBackgroundColor={'#2196f3'}\n  initialPage={0}\n  renderTabBar={()=><ScrollableTabBar style={{height: 40, borderWidth: 0, elevation: 2}}  tabStyle={{height: 39}} />}\n>\n  <PopularTab tabLabel=\"Java\"></PopularTab>\n  <PopularTab tabLabel=\"iOS\"></PopularTab>\n</ScrollableTabView>\n```\n#### 复选框 - react-native-check-box\n\n```\nnpm install react-native-check-box --save\n\nimport CheckBox from 'react-native-check-box'\n<CheckBox\n  style={{flex: 1, padding: 10}}   //整行的checkBox\n  onClick={() => this.onClick(data, index)} //复选框的点击事件\n  isChecked={data.checked} //复选框的状态\n  leftText={data.name}  //复选框的name\n  checkedImage={this._checkedImage(true)} //选中\n  unCheckedImage={this._checkedImage(false)} //未选中\n/>\n\n//复选框的是否选中\nonClick(data, index) {\n  data.checked = !data.checked;\n  ArrayUtil.updateArray(this.changeValues, data); //更新数组的工具函数\n  this.state.keys[index] = data;//更新state以便显示选中状态\n  this.setState({\n      keys: this.state.keys\n  })\n}\n\n/**\n  * 判断复选框的视图\n  * @param {Boolean} checked \n  */\n_checkedImage(checked) {\n  return <Ionicons\n    name={checked ? 'ios-checkbox' : 'md-square-outline'}\n    size={20}\n    style={{\n        color: '#2196f3',\n    }}/>\n}\n```\n\n#### 渲染HTML文本 - react-native-htmlview\n\n```\n<HTMLView\n  value={description} //HTML文本内容\n  onLinkPress={(url) => {\n  }} //渲染的文本有链接的时候，单击链接会回调这个方法\n  stylesheet={{\n      p: styles.description,\n      a: styles.description,\n  }} //指定标签的样式\n /> \n```\n\n#### Modal - 弹框组件\n\n```\n/**\n *弹框组件\n */\nimport React, {Component} from 'react'\nimport {Modal, Text, TouchableOpacity, StyleSheet, View, Platform, DeviceInfo} from 'react-native'\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons'\n\nexport default class TrendingDialog extends Component {\n    state = {\n        visible: false,\n    };\n\n    show() {\n      this.setState({\n        visible: true,\n      })\n    }\n\n    dismiss() {\n      this.setState({\n        visible: false,\n      })\n    }\n\n    render() {\n        const {onClose, onSelect} = this.props;\n        return (\n          <Modal\n            transparent={true}\n            visible={this.state.visible}\n            onRequestClose={() => onClose}\n          >\n            <TouchableOpacity\n              style={styles.container}\n              onPress={() => this.dismiss()}\n            >\n              <MaterialIcons\n                name={'arrow-drop-up'}\n                size={36}\n                style={styles.arrow}\n              />\n              <View style={styles.content}>\n                <TouchableOpacity onPress={() => onSelect('11')}>\n                  <View style={styles.text_container}>\n                    <Text style={styles.text}>Displaying the popover on top of other elements</Text>\n                  </View>\n                </TouchableOpacity>\n                <TouchableOpacity onPress={() => onSelect('11')}>\n                  <View style={styles.text_container}>\n                    <Text style={styles.text}>Displaying the popover on top of other elements</Text>\n                  </View>\n                </TouchableOpacity>\n              </View>\n              </TouchableOpacity>\n            </Modal>\n\n        )\n    }\n}\nconst styles = StyleSheet.create({\n    container: {\n      backgroundColor: 'rgba(0,0,0,0.6)',\n      flex: 1,\n      alignItems: 'center',\n      paddingTop: DeviceInfo.isIPhoneX_deprecated ? 30 : 0\n    },\n    arrow: {\n      marginTop: 40,\n      color: 'white',\n      padding: 0,\n      margin: -15\n    },\n    content: {\n      backgroundColor: 'white',\n      borderRadius: 3,\n      paddingTop: 3,\n      paddingBottom: 3,\n      marginRight: 3,\n    },\n    text_container: {\n      alignItems: 'center',\n      flexDirection: 'row',\n      justifyContent: 'center'\n    },\n    text: {\n      fontSize: 16,\n      color: 'black',\n      fontWeight: '400',\n      padding: 8,\n      paddingLeft: 26,\n      paddingRight: 26\n    },\n    line: {\n      height: 0.3,\n      backgroundColor: 'darkgray',\n    },\n});\n```\n\n```\n使用\n\n<Button title='弹出' onPress={() => this.dialog.show()/>\n<Button title='关闭' onPress={() => this.dialog.dismiss()/>\n\nrenderTrendingDialog() {\n  return <TrendingDialog\n      ref={dialog => this.dialog = dialog}\n      onSelect={tab => this.onSelectTimeSpan(tab)}\n  />\n}\n```\n\n#### 本地存储 - react-native-storage\n\n```\nnpm install react-native-storage\nnpm install @react-native-community/async-storage\nreact-native link @react-native-community/async-storage\n\nimport Storage from 'react-native-storage';\nimport AsyncStorage from '@react-native-community/async-storage';\n\nconst STORAGE = new Storage({\n  // 最大容量，默认值1000条数据循环存储\n  size: 100,\n\n  // 存储引擎：对于RN使用AsyncStorage，对于web使用window.localStorage\n  // 如果不指定则数据只会保存在内存中，重启后即丢失\n  storageBackend: AsyncStorage,\n\n  // 数据过期时间，默认一整天（1000 * 3600 * 24 毫秒），设为null则永不过期\n  defaultExpires: null,\n\n  // 读写时在内存中缓存数据。默认启用。\n  enableCache: true, // 你可以在构造函数这里就写好sync的方法 // 或是在任何时候，直接对storage.sync进行赋值修改 // 或是写到另一个文件里，这里require引入\n\n  // 如果storage中没有相应数据，或数据已过期，\n  // 则会调用相应的sync方法，无缝返回最新数据。\n  // sync方法的具体说明会在后文提到\n  //sync: require('你可以另外写一个文件专门处理sync'),\n});\n\nglobal.STORAGE = STORAGE\n```\n\n```\n使用：\n\nonSave() {\n  STORAGE.save({\n    key: 'loginState',\n    data: {\n      from: 'some other site',\n      userid: 'some userid',\n      token: 'some token',\n    }\n  })\n}\nonLoad() {\n  STORAGE.load({\n    key: 'loginState'\n  }).then(ret => {\n    console.log(ret)\n  }).catch(err => {\n    console.warn(err.message)\n  })\n}\nonRemove() {\n  STORAGE.remove({\n    key: 'loginState',\n  });\n}\n```\n\n#### 轻提示 - react-native-easy-toast\n\n```\nnpm i react-native-easy-toast --save\n\nimport Toast, {DURATION} from 'react-native-easy-toast'\n<Toast\n  ref={toast => this.toast = toast}\n  position={'center'}\n/>\n\n//使用\nthis.toast.show('\bhello')\n```\n\n#### 类似滚动视图的组件，支持视差和粘性头 - react-native-parallax-scroll-view\n\n```\nnpm install react-native-parallax-scroll-view --save\n\nimport ParallaxScrollView from 'react-native-parallax-scroll-view'\n\n// 配置\ngetParallaxRenderConfig(params) {\n  let config = {}\n  //视差头的背景，封面图像\n  config.renderBackground = () => (\n    <View key=\"background\">\n      <Image source={{\n        uri: params.backgroundImg,\n        width: window.width,\n        height: PARALLAX_HEADER_HEIGHT\n      }}/>\n      <View style={{\n        position: 'absolute',\n        top: 0,\n        width: window.width,\n        backgroundColor: 'rgba(0,0,0,.4)',\n        height: PARALLAX_HEADER_HEIGHT\n      }}/>\n    </View>\n  );\n  // 背景显示的内容\n  config.renderForeground = () => (\n    <View key=\"parallax-header\" style={styles.parallaxHeader}>\n      <Image style={styles.avatar} source={{url:params.avatar}}/>\n        <Text style={ styles.sectionSpeakerText }>\n            {params.name}\n        </Text>\n        <Text style={ styles.sectionTitleText }>\n            {params.description}\n        </Text>\n    </View>\n  );\n  //当视差标题向上滚动时，它会粘在视图的顶部。\n  config.renderStickyHeader = () => (\n    <View key=\"sticky-header\" style={styles.stickySection}>\n      <Text style={styles.stickySectionText}>{params.name}</Text>\n    </View>\n  );\n  //固定在视图顶部\n  config.renderFixedHeader = () => (\n    <View key=\"fixed-header\" style={styles.fixedSection}>\n      {ViewUtil.getLeftBackButton(()=> NavigationUtil.goBack(this.props.navigation))}\n      {ViewUtil.getShareButton(()=>this.onShare())}\n    </View>\n  ); \n  return config\n}\n\nrenderView(content,params) {\n  let renderConfig = this.getParallaxRenderConfig(params)\n  return (\n    <ParallaxScrollView\n      backgroundColor=\"#fff\"\n      contentBackgroundColor=\"#f3f3f4\"\n      parallaxHeaderHeight={PARALLAX_HEADER_HEIGHT}\n      stickyHeaderHeight={STICKY_HEADER_HEIGHT}\n      backgroundScrollSpeed={10}\n      {...renderConfig}\n      >{content}</ParallaxScrollView>\n  )\n}\n\nrender() {\n    const content = <View><Text>hello</Text></View>\n    return this.renderView(content,{\n      'name': 'React Native',\n      'description':'React Native产出的并不是“网页应用”， 或者说“HTML5应用”，又或者“混合应用”。 最终产品是一个真正的移动应用',\n      'avatar': 'https://bbs.reactnative.cn/uploads/profile/1-profileimg.png',\n      'backgroundImg':'https://img0.sc115.com/uploads3/sc/jpgs/1904/zzpic17483_sc115.com.jpg'\n    })\n  }\n```\n\n#### 热更新 - react-native-pushy\n\n```\nhttps://github.com/reactnativecn/react-native-pushy/blob/master/docs/guide.md\n\n1. 注册账号https://update.reactnative.cn\n\n2.pushy login\n\n3.创建应用\npushy createApp --platform ios\npushy createApp --platform android\n\n3.发布应用\npushy uploadIpa <your-package.ipa>\npushy uploadApk android/app/build/outputs/apk/app-release.apk\n\n4.发布新的热更新版本\npushy bundle --platform <ios|android>\n\n```\n\n#### 极光分享 - jshare-react-native \n\n#### 支付宝支付 - react-native-yunpeng-alipay\n\n#### 微信支付 - react-native-wechat \n\n#### 配置相对路径\n```\napp文件下,新建一个package.json文件,\n\n{\n  \"name\":\"app\"\n}\n```","slug":"react-native-tools","published":1,"updated":"2019-07-03T01:23:29.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq430003mhe6jjdgxyg10","content":"<h3 id=\"react-native常用组件\"><a href=\"#react-native常用组件\" class=\"headerlink\" title=\"react-native常用组件\"></a>react-native常用组件</h3><a id=\"more\"></a>\n<h4 id=\"底部导航菜单-react-native-tab-navigator\"><a href=\"#底部导航菜单-react-native-tab-navigator\" class=\"headerlink\" title=\"底部导航菜单 - react-native-tab-navigator\"></a>底部导航菜单 - react-native-tab-navigator</h4><p>props={this.props} 把react-navigation的api传递到各组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-native-tab-navigator --save</span><br><span class=\"line\"></span><br><span class=\"line\">import TabNavigator from &apos;react-native-tab-navigator&apos;;</span><br><span class=\"line\">&lt;View style=&#123;styles.container&#125;&gt;</span><br><span class=\"line\">  &lt;TabNavigator&gt;</span><br><span class=\"line\">    &lt;TabNavigator.Item</span><br><span class=\"line\">      selected=&#123;this.state.selectedTab === &apos;home&apos;&#125;</span><br><span class=\"line\">      selectedTitleStyle=&#123;&#123;color:&apos;red&apos;&#125;&#125; //文字的颜色</span><br><span class=\"line\">      title=&quot;首页&quot;</span><br><span class=\"line\">      renderIcon=&#123;() =&gt; &lt;Image style=&#123;styles.image&#125; source=&#123;require(&apos;../assets/images/ic_polular.png&apos;)&#125; /&gt;&#125;</span><br><span class=\"line\">      renderSelectedIcon=&#123;() =&gt; &lt;Image style=&#123;[styles.image,&#123;tintColor:&apos;red&apos;&#125;]&#125; source=&#123;require(&apos;../assets/images/ic_polular.png&apos;)&#125; /&gt;&#125;</span><br><span class=\"line\">      onPress=&#123;() =&gt; this.setState(&#123; selectedTab: &apos;home&apos; &#125;)&#125;&gt;</span><br><span class=\"line\">      &lt;Home props=&#123;this.props&#125;/&gt;</span><br><span class=\"line\">    &lt;/TabNavigator.Item&gt;</span><br><span class=\"line\">    &lt;TabNavigator.Item</span><br><span class=\"line\">      selected=&#123;this.state.selectedTab === &apos;my&apos;&#125;</span><br><span class=\"line\">      selectedTitleStyle=&#123;&#123;color:&apos;red&apos;&#125;&#125;</span><br><span class=\"line\">      title=&quot;我的&quot;</span><br><span class=\"line\">      renderIcon=&#123;() =&gt; &lt;Image style=&#123;styles.image&#125; source=&#123;require(&apos;../assets/images/ic_my.png&apos;)&#125; /&gt;&#125;</span><br><span class=\"line\">      renderSelectedIcon=&#123;() =&gt; &lt;Image style=&#123;[styles.image,&#123;tintColor:&apos;red&apos;&#125;]&#125; source=&#123;require(&apos;../assets/images/ic_my.png&apos;)&#125; /&gt;&#125;</span><br><span class=\"line\">      onPress=&#123;() =&gt; this.setState(&#123; selectedTab: &apos;my&apos; &#125;)&#125;&gt;</span><br><span class=\"line\">      &lt;My props=&#123;this.props&#125;/&gt;</span><br><span class=\"line\">    &lt;/TabNavigator.Item&gt;</span><br><span class=\"line\">  &lt;/TabNavigator&gt;</span><br><span class=\"line\">&lt;/View&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"顶部导航栏-react-native-scrollable-tab-view\"><a href=\"#顶部导航栏-react-native-scrollable-tab-view\" class=\"headerlink\" title=\"顶部导航栏 - react-native-scrollable-tab-view\"></a>顶部导航栏 - react-native-scrollable-tab-view</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-native-scrollable-tab-view --save</span><br><span class=\"line\">ScrollableTabBar: 自定义</span><br><span class=\"line\"></span><br><span class=\"line\">import ScrollableTabView, &#123;ScrollableTabBar&#125; from &apos;react-native-scrollable-tab-view&apos;</span><br><span class=\"line\">&lt;ScrollableTabView</span><br><span class=\"line\">  tabBarUnderlineStyle=&#123;&#123;backgroundColor: &apos;#e7e7e7&apos;, height: 2&#125;&#125;</span><br><span class=\"line\">  tabBarInactiveTextColor=&apos;mintcream&apos;</span><br><span class=\"line\">  tabBarActiveTextColor=&apos;white&apos;</span><br><span class=\"line\">  ref=&quot;scrollableTabView&quot;</span><br><span class=\"line\">  tabBarBackgroundColor=&#123;&apos;#2196f3&apos;&#125;</span><br><span class=\"line\">  initialPage=&#123;0&#125;</span><br><span class=\"line\">  renderTabBar=&#123;()=&gt;&lt;ScrollableTabBar style=&#123;&#123;height: 40, borderWidth: 0, elevation: 2&#125;&#125;  tabStyle=&#123;&#123;height: 39&#125;&#125; /&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  &lt;PopularTab tabLabel=&quot;Java&quot;&gt;&lt;/PopularTab&gt;</span><br><span class=\"line\">  &lt;PopularTab tabLabel=&quot;iOS&quot;&gt;&lt;/PopularTab&gt;</span><br><span class=\"line\">&lt;/ScrollableTabView&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"复选框-react-native-check-box\"><a href=\"#复选框-react-native-check-box\" class=\"headerlink\" title=\"复选框 - react-native-check-box\"></a>复选框 - react-native-check-box</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-native-check-box --save</span><br><span class=\"line\"></span><br><span class=\"line\">import CheckBox from &apos;react-native-check-box&apos;</span><br><span class=\"line\">&lt;CheckBox</span><br><span class=\"line\">  style=&#123;&#123;flex: 1, padding: 10&#125;&#125;   //整行的checkBox</span><br><span class=\"line\">  onClick=&#123;() =&gt; this.onClick(data, index)&#125; //复选框的点击事件</span><br><span class=\"line\">  isChecked=&#123;data.checked&#125; //复选框的状态</span><br><span class=\"line\">  leftText=&#123;data.name&#125;  //复选框的name</span><br><span class=\"line\">  checkedImage=&#123;this._checkedImage(true)&#125; //选中</span><br><span class=\"line\">  unCheckedImage=&#123;this._checkedImage(false)&#125; //未选中</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//复选框的是否选中</span><br><span class=\"line\">onClick(data, index) &#123;</span><br><span class=\"line\">  data.checked = !data.checked;</span><br><span class=\"line\">  ArrayUtil.updateArray(this.changeValues, data); //更新数组的工具函数</span><br><span class=\"line\">  this.state.keys[index] = data;//更新state以便显示选中状态</span><br><span class=\"line\">  this.setState(&#123;</span><br><span class=\"line\">      keys: this.state.keys</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">  * 判断复选框的视图</span><br><span class=\"line\">  * @param &#123;Boolean&#125; checked </span><br><span class=\"line\">  */</span><br><span class=\"line\">_checkedImage(checked) &#123;</span><br><span class=\"line\">  return &lt;Ionicons</span><br><span class=\"line\">    name=&#123;checked ? &apos;ios-checkbox&apos; : &apos;md-square-outline&apos;&#125;</span><br><span class=\"line\">    size=&#123;20&#125;</span><br><span class=\"line\">    style=&#123;&#123;</span><br><span class=\"line\">        color: &apos;#2196f3&apos;,</span><br><span class=\"line\">    &#125;&#125;/&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"渲染HTML文本-react-native-htmlview\"><a href=\"#渲染HTML文本-react-native-htmlview\" class=\"headerlink\" title=\"渲染HTML文本 - react-native-htmlview\"></a>渲染HTML文本 - react-native-htmlview</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;HTMLView</span><br><span class=\"line\">  value=&#123;description&#125; //HTML文本内容</span><br><span class=\"line\">  onLinkPress=&#123;(url) =&gt; &#123;</span><br><span class=\"line\">  &#125;&#125; //渲染的文本有链接的时候，单击链接会回调这个方法</span><br><span class=\"line\">  stylesheet=&#123;&#123;</span><br><span class=\"line\">      p: styles.description,</span><br><span class=\"line\">      a: styles.description,</span><br><span class=\"line\">  &#125;&#125; //指定标签的样式</span><br><span class=\"line\"> /&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Modal-弹框组件\"><a href=\"#Modal-弹框组件\" class=\"headerlink\" title=\"Modal - 弹框组件\"></a>Modal - 弹框组件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> *弹框组件</span><br><span class=\"line\"> */</span><br><span class=\"line\">import React, &#123;Component&#125; from &apos;react&apos;</span><br><span class=\"line\">import &#123;Modal, Text, TouchableOpacity, StyleSheet, View, Platform, DeviceInfo&#125; from &apos;react-native&apos;</span><br><span class=\"line\">import MaterialIcons from &apos;react-native-vector-icons/MaterialIcons&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class TrendingDialog extends Component &#123;</span><br><span class=\"line\">    state = &#123;</span><br><span class=\"line\">        visible: false,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    show() &#123;</span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">        visible: true,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dismiss() &#123;</span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">        visible: false,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        const &#123;onClose, onSelect&#125; = this.props;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">          &lt;Modal</span><br><span class=\"line\">            transparent=&#123;true&#125;</span><br><span class=\"line\">            visible=&#123;this.state.visible&#125;</span><br><span class=\"line\">            onRequestClose=&#123;() =&gt; onClose&#125;</span><br><span class=\"line\">          &gt;</span><br><span class=\"line\">            &lt;TouchableOpacity</span><br><span class=\"line\">              style=&#123;styles.container&#125;</span><br><span class=\"line\">              onPress=&#123;() =&gt; this.dismiss()&#125;</span><br><span class=\"line\">            &gt;</span><br><span class=\"line\">              &lt;MaterialIcons</span><br><span class=\"line\">                name=&#123;&apos;arrow-drop-up&apos;&#125;</span><br><span class=\"line\">                size=&#123;36&#125;</span><br><span class=\"line\">                style=&#123;styles.arrow&#125;</span><br><span class=\"line\">              /&gt;</span><br><span class=\"line\">              &lt;View style=&#123;styles.content&#125;&gt;</span><br><span class=\"line\">                &lt;TouchableOpacity onPress=&#123;() =&gt; onSelect(&apos;11&apos;)&#125;&gt;</span><br><span class=\"line\">                  &lt;View style=&#123;styles.text_container&#125;&gt;</span><br><span class=\"line\">                    &lt;Text style=&#123;styles.text&#125;&gt;Displaying the popover on top of other elements&lt;/Text&gt;</span><br><span class=\"line\">                  &lt;/View&gt;</span><br><span class=\"line\">                &lt;/TouchableOpacity&gt;</span><br><span class=\"line\">                &lt;TouchableOpacity onPress=&#123;() =&gt; onSelect(&apos;11&apos;)&#125;&gt;</span><br><span class=\"line\">                  &lt;View style=&#123;styles.text_container&#125;&gt;</span><br><span class=\"line\">                    &lt;Text style=&#123;styles.text&#125;&gt;Displaying the popover on top of other elements&lt;/Text&gt;</span><br><span class=\"line\">                  &lt;/View&gt;</span><br><span class=\"line\">                &lt;/TouchableOpacity&gt;</span><br><span class=\"line\">              &lt;/View&gt;</span><br><span class=\"line\">              &lt;/TouchableOpacity&gt;</span><br><span class=\"line\">            &lt;/Modal&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const styles = StyleSheet.create(&#123;</span><br><span class=\"line\">    container: &#123;</span><br><span class=\"line\">      backgroundColor: &apos;rgba(0,0,0,0.6)&apos;,</span><br><span class=\"line\">      flex: 1,</span><br><span class=\"line\">      alignItems: &apos;center&apos;,</span><br><span class=\"line\">      paddingTop: DeviceInfo.isIPhoneX_deprecated ? 30 : 0</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    arrow: &#123;</span><br><span class=\"line\">      marginTop: 40,</span><br><span class=\"line\">      color: &apos;white&apos;,</span><br><span class=\"line\">      padding: 0,</span><br><span class=\"line\">      margin: -15</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">      backgroundColor: &apos;white&apos;,</span><br><span class=\"line\">      borderRadius: 3,</span><br><span class=\"line\">      paddingTop: 3,</span><br><span class=\"line\">      paddingBottom: 3,</span><br><span class=\"line\">      marginRight: 3,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    text_container: &#123;</span><br><span class=\"line\">      alignItems: &apos;center&apos;,</span><br><span class=\"line\">      flexDirection: &apos;row&apos;,</span><br><span class=\"line\">      justifyContent: &apos;center&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    text: &#123;</span><br><span class=\"line\">      fontSize: 16,</span><br><span class=\"line\">      color: &apos;black&apos;,</span><br><span class=\"line\">      fontWeight: &apos;400&apos;,</span><br><span class=\"line\">      padding: 8,</span><br><span class=\"line\">      paddingLeft: 26,</span><br><span class=\"line\">      paddingRight: 26</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    line: &#123;</span><br><span class=\"line\">      height: 0.3,</span><br><span class=\"line\">      backgroundColor: &apos;darkgray&apos;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Button title=&apos;弹出&apos; onPress=&#123;() =&gt; this.dialog.show()/&gt;</span><br><span class=\"line\">&lt;Button title=&apos;关闭&apos; onPress=&#123;() =&gt; this.dialog.dismiss()/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">renderTrendingDialog() &#123;</span><br><span class=\"line\">  return &lt;TrendingDialog</span><br><span class=\"line\">      ref=&#123;dialog =&gt; this.dialog = dialog&#125;</span><br><span class=\"line\">      onSelect=&#123;tab =&gt; this.onSelectTimeSpan(tab)&#125;</span><br><span class=\"line\">  /&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"本地存储-react-native-storage\"><a href=\"#本地存储-react-native-storage\" class=\"headerlink\" title=\"本地存储 - react-native-storage\"></a>本地存储 - react-native-storage</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-native-storage</span><br><span class=\"line\">npm install @react-native-community/async-storage</span><br><span class=\"line\">react-native link @react-native-community/async-storage</span><br><span class=\"line\"></span><br><span class=\"line\">import Storage from &apos;react-native-storage&apos;;</span><br><span class=\"line\">import AsyncStorage from &apos;@react-native-community/async-storage&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">const STORAGE = new Storage(&#123;</span><br><span class=\"line\">  // 最大容量，默认值1000条数据循环存储</span><br><span class=\"line\">  size: 100,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 存储引擎：对于RN使用AsyncStorage，对于web使用window.localStorage</span><br><span class=\"line\">  // 如果不指定则数据只会保存在内存中，重启后即丢失</span><br><span class=\"line\">  storageBackend: AsyncStorage,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 数据过期时间，默认一整天（1000 * 3600 * 24 毫秒），设为null则永不过期</span><br><span class=\"line\">  defaultExpires: null,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 读写时在内存中缓存数据。默认启用。</span><br><span class=\"line\">  enableCache: true, // 你可以在构造函数这里就写好sync的方法 // 或是在任何时候，直接对storage.sync进行赋值修改 // 或是写到另一个文件里，这里require引入</span><br><span class=\"line\"></span><br><span class=\"line\">  // 如果storage中没有相应数据，或数据已过期，</span><br><span class=\"line\">  // 则会调用相应的sync方法，无缝返回最新数据。</span><br><span class=\"line\">  // sync方法的具体说明会在后文提到</span><br><span class=\"line\">  //sync: require(&apos;你可以另外写一个文件专门处理sync&apos;),</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">global.STORAGE = STORAGE</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用：</span><br><span class=\"line\"></span><br><span class=\"line\">onSave() &#123;</span><br><span class=\"line\">  STORAGE.save(&#123;</span><br><span class=\"line\">    key: &apos;loginState&apos;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      from: &apos;some other site&apos;,</span><br><span class=\"line\">      userid: &apos;some userid&apos;,</span><br><span class=\"line\">      token: &apos;some token&apos;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">onLoad() &#123;</span><br><span class=\"line\">  STORAGE.load(&#123;</span><br><span class=\"line\">    key: &apos;loginState&apos;</span><br><span class=\"line\">  &#125;).then(ret =&gt; &#123;</span><br><span class=\"line\">    console.log(ret)</span><br><span class=\"line\">  &#125;).catch(err =&gt; &#123;</span><br><span class=\"line\">    console.warn(err.message)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">onRemove() &#123;</span><br><span class=\"line\">  STORAGE.remove(&#123;</span><br><span class=\"line\">    key: &apos;loginState&apos;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"轻提示-react-native-easy-toast\"><a href=\"#轻提示-react-native-easy-toast\" class=\"headerlink\" title=\"轻提示 - react-native-easy-toast\"></a>轻提示 - react-native-easy-toast</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i react-native-easy-toast --save</span><br><span class=\"line\"></span><br><span class=\"line\">import Toast, &#123;DURATION&#125; from &apos;react-native-easy-toast&apos;</span><br><span class=\"line\">&lt;Toast</span><br><span class=\"line\">  ref=&#123;toast =&gt; this.toast = toast&#125;</span><br><span class=\"line\">  position=&#123;&apos;center&apos;&#125;</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//使用</span><br><span class=\"line\">this.toast.show(&apos;\bhello&apos;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"类似滚动视图的组件，支持视差和粘性头-react-native-parallax-scroll-view\"><a href=\"#类似滚动视图的组件，支持视差和粘性头-react-native-parallax-scroll-view\" class=\"headerlink\" title=\"类似滚动视图的组件，支持视差和粘性头 - react-native-parallax-scroll-view\"></a>类似滚动视图的组件，支持视差和粘性头 - react-native-parallax-scroll-view</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-native-parallax-scroll-view --save</span><br><span class=\"line\"></span><br><span class=\"line\">import ParallaxScrollView from &apos;react-native-parallax-scroll-view&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">// 配置</span><br><span class=\"line\">getParallaxRenderConfig(params) &#123;</span><br><span class=\"line\">  let config = &#123;&#125;</span><br><span class=\"line\">  //视差头的背景，封面图像</span><br><span class=\"line\">  config.renderBackground = () =&gt; (</span><br><span class=\"line\">    &lt;View key=&quot;background&quot;&gt;</span><br><span class=\"line\">      &lt;Image source=&#123;&#123;</span><br><span class=\"line\">        uri: params.backgroundImg,</span><br><span class=\"line\">        width: window.width,</span><br><span class=\"line\">        height: PARALLAX_HEADER_HEIGHT</span><br><span class=\"line\">      &#125;&#125;/&gt;</span><br><span class=\"line\">      &lt;View style=&#123;&#123;</span><br><span class=\"line\">        position: &apos;absolute&apos;,</span><br><span class=\"line\">        top: 0,</span><br><span class=\"line\">        width: window.width,</span><br><span class=\"line\">        backgroundColor: &apos;rgba(0,0,0,.4)&apos;,</span><br><span class=\"line\">        height: PARALLAX_HEADER_HEIGHT</span><br><span class=\"line\">      &#125;&#125;/&gt;</span><br><span class=\"line\">    &lt;/View&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  // 背景显示的内容</span><br><span class=\"line\">  config.renderForeground = () =&gt; (</span><br><span class=\"line\">    &lt;View key=&quot;parallax-header&quot; style=&#123;styles.parallaxHeader&#125;&gt;</span><br><span class=\"line\">      &lt;Image style=&#123;styles.avatar&#125; source=&#123;&#123;url:params.avatar&#125;&#125;/&gt;</span><br><span class=\"line\">        &lt;Text style=&#123; styles.sectionSpeakerText &#125;&gt;</span><br><span class=\"line\">            &#123;params.name&#125;</span><br><span class=\"line\">        &lt;/Text&gt;</span><br><span class=\"line\">        &lt;Text style=&#123; styles.sectionTitleText &#125;&gt;</span><br><span class=\"line\">            &#123;params.description&#125;</span><br><span class=\"line\">        &lt;/Text&gt;</span><br><span class=\"line\">    &lt;/View&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  //当视差标题向上滚动时，它会粘在视图的顶部。</span><br><span class=\"line\">  config.renderStickyHeader = () =&gt; (</span><br><span class=\"line\">    &lt;View key=&quot;sticky-header&quot; style=&#123;styles.stickySection&#125;&gt;</span><br><span class=\"line\">      &lt;Text style=&#123;styles.stickySectionText&#125;&gt;&#123;params.name&#125;&lt;/Text&gt;</span><br><span class=\"line\">    &lt;/View&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  //固定在视图顶部</span><br><span class=\"line\">  config.renderFixedHeader = () =&gt; (</span><br><span class=\"line\">    &lt;View key=&quot;fixed-header&quot; style=&#123;styles.fixedSection&#125;&gt;</span><br><span class=\"line\">      &#123;ViewUtil.getLeftBackButton(()=&gt; NavigationUtil.goBack(this.props.navigation))&#125;</span><br><span class=\"line\">      &#123;ViewUtil.getShareButton(()=&gt;this.onShare())&#125;</span><br><span class=\"line\">    &lt;/View&gt;</span><br><span class=\"line\">  ); </span><br><span class=\"line\">  return config</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">renderView(content,params) &#123;</span><br><span class=\"line\">  let renderConfig = this.getParallaxRenderConfig(params)</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;ParallaxScrollView</span><br><span class=\"line\">      backgroundColor=&quot;#fff&quot;</span><br><span class=\"line\">      contentBackgroundColor=&quot;#f3f3f4&quot;</span><br><span class=\"line\">      parallaxHeaderHeight=&#123;PARALLAX_HEADER_HEIGHT&#125;</span><br><span class=\"line\">      stickyHeaderHeight=&#123;STICKY_HEADER_HEIGHT&#125;</span><br><span class=\"line\">      backgroundScrollSpeed=&#123;10&#125;</span><br><span class=\"line\">      &#123;...renderConfig&#125;</span><br><span class=\"line\">      &gt;&#123;content&#125;&lt;/ParallaxScrollView&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">    const content = &lt;View&gt;&lt;Text&gt;hello&lt;/Text&gt;&lt;/View&gt;</span><br><span class=\"line\">    return this.renderView(content,&#123;</span><br><span class=\"line\">      &apos;name&apos;: &apos;React Native&apos;,</span><br><span class=\"line\">      &apos;description&apos;:&apos;React Native产出的并不是“网页应用”， 或者说“HTML5应用”，又或者“混合应用”。 最终产品是一个真正的移动应用&apos;,</span><br><span class=\"line\">      &apos;avatar&apos;: &apos;https://bbs.reactnative.cn/uploads/profile/1-profileimg.png&apos;,</span><br><span class=\"line\">      &apos;backgroundImg&apos;:&apos;https://img0.sc115.com/uploads3/sc/jpgs/1904/zzpic17483_sc115.com.jpg&apos;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"热更新-react-native-pushy\"><a href=\"#热更新-react-native-pushy\" class=\"headerlink\" title=\"热更新 - react-native-pushy\"></a>热更新 - react-native-pushy</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/reactnativecn/react-native-pushy/blob/master/docs/guide.md</span><br><span class=\"line\"></span><br><span class=\"line\">1. 注册账号https://update.reactnative.cn</span><br><span class=\"line\"></span><br><span class=\"line\">2.pushy login</span><br><span class=\"line\"></span><br><span class=\"line\">3.创建应用</span><br><span class=\"line\">pushy createApp --platform ios</span><br><span class=\"line\">pushy createApp --platform android</span><br><span class=\"line\"></span><br><span class=\"line\">3.发布应用</span><br><span class=\"line\">pushy uploadIpa &lt;your-package.ipa&gt;</span><br><span class=\"line\">pushy uploadApk android/app/build/outputs/apk/app-release.apk</span><br><span class=\"line\"></span><br><span class=\"line\">4.发布新的热更新版本</span><br><span class=\"line\">pushy bundle --platform &lt;ios|android&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"极光分享-jshare-react-native\"><a href=\"#极光分享-jshare-react-native\" class=\"headerlink\" title=\"极光分享 - jshare-react-native\"></a>极光分享 - jshare-react-native</h4><h4 id=\"支付宝支付-react-native-yunpeng-alipay\"><a href=\"#支付宝支付-react-native-yunpeng-alipay\" class=\"headerlink\" title=\"支付宝支付 - react-native-yunpeng-alipay\"></a>支付宝支付 - react-native-yunpeng-alipay</h4><h4 id=\"微信支付-react-native-wechat\"><a href=\"#微信支付-react-native-wechat\" class=\"headerlink\" title=\"微信支付 - react-native-wechat\"></a>微信支付 - react-native-wechat</h4><h4 id=\"配置相对路径\"><a href=\"#配置相对路径\" class=\"headerlink\" title=\"配置相对路径\"></a>配置相对路径</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app文件下,新建一个package.json文件,</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;:&quot;app&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"react-native常用组件\"><a href=\"#react-native常用组件\" class=\"headerlink\" title=\"react-native常用组件\"></a>react-native常用组件</h3>","more":"<h4 id=\"底部导航菜单-react-native-tab-navigator\"><a href=\"#底部导航菜单-react-native-tab-navigator\" class=\"headerlink\" title=\"底部导航菜单 - react-native-tab-navigator\"></a>底部导航菜单 - react-native-tab-navigator</h4><p>props={this.props} 把react-navigation的api传递到各组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-native-tab-navigator --save</span><br><span class=\"line\"></span><br><span class=\"line\">import TabNavigator from &apos;react-native-tab-navigator&apos;;</span><br><span class=\"line\">&lt;View style=&#123;styles.container&#125;&gt;</span><br><span class=\"line\">  &lt;TabNavigator&gt;</span><br><span class=\"line\">    &lt;TabNavigator.Item</span><br><span class=\"line\">      selected=&#123;this.state.selectedTab === &apos;home&apos;&#125;</span><br><span class=\"line\">      selectedTitleStyle=&#123;&#123;color:&apos;red&apos;&#125;&#125; //文字的颜色</span><br><span class=\"line\">      title=&quot;首页&quot;</span><br><span class=\"line\">      renderIcon=&#123;() =&gt; &lt;Image style=&#123;styles.image&#125; source=&#123;require(&apos;../assets/images/ic_polular.png&apos;)&#125; /&gt;&#125;</span><br><span class=\"line\">      renderSelectedIcon=&#123;() =&gt; &lt;Image style=&#123;[styles.image,&#123;tintColor:&apos;red&apos;&#125;]&#125; source=&#123;require(&apos;../assets/images/ic_polular.png&apos;)&#125; /&gt;&#125;</span><br><span class=\"line\">      onPress=&#123;() =&gt; this.setState(&#123; selectedTab: &apos;home&apos; &#125;)&#125;&gt;</span><br><span class=\"line\">      &lt;Home props=&#123;this.props&#125;/&gt;</span><br><span class=\"line\">    &lt;/TabNavigator.Item&gt;</span><br><span class=\"line\">    &lt;TabNavigator.Item</span><br><span class=\"line\">      selected=&#123;this.state.selectedTab === &apos;my&apos;&#125;</span><br><span class=\"line\">      selectedTitleStyle=&#123;&#123;color:&apos;red&apos;&#125;&#125;</span><br><span class=\"line\">      title=&quot;我的&quot;</span><br><span class=\"line\">      renderIcon=&#123;() =&gt; &lt;Image style=&#123;styles.image&#125; source=&#123;require(&apos;../assets/images/ic_my.png&apos;)&#125; /&gt;&#125;</span><br><span class=\"line\">      renderSelectedIcon=&#123;() =&gt; &lt;Image style=&#123;[styles.image,&#123;tintColor:&apos;red&apos;&#125;]&#125; source=&#123;require(&apos;../assets/images/ic_my.png&apos;)&#125; /&gt;&#125;</span><br><span class=\"line\">      onPress=&#123;() =&gt; this.setState(&#123; selectedTab: &apos;my&apos; &#125;)&#125;&gt;</span><br><span class=\"line\">      &lt;My props=&#123;this.props&#125;/&gt;</span><br><span class=\"line\">    &lt;/TabNavigator.Item&gt;</span><br><span class=\"line\">  &lt;/TabNavigator&gt;</span><br><span class=\"line\">&lt;/View&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"顶部导航栏-react-native-scrollable-tab-view\"><a href=\"#顶部导航栏-react-native-scrollable-tab-view\" class=\"headerlink\" title=\"顶部导航栏 - react-native-scrollable-tab-view\"></a>顶部导航栏 - react-native-scrollable-tab-view</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-native-scrollable-tab-view --save</span><br><span class=\"line\">ScrollableTabBar: 自定义</span><br><span class=\"line\"></span><br><span class=\"line\">import ScrollableTabView, &#123;ScrollableTabBar&#125; from &apos;react-native-scrollable-tab-view&apos;</span><br><span class=\"line\">&lt;ScrollableTabView</span><br><span class=\"line\">  tabBarUnderlineStyle=&#123;&#123;backgroundColor: &apos;#e7e7e7&apos;, height: 2&#125;&#125;</span><br><span class=\"line\">  tabBarInactiveTextColor=&apos;mintcream&apos;</span><br><span class=\"line\">  tabBarActiveTextColor=&apos;white&apos;</span><br><span class=\"line\">  ref=&quot;scrollableTabView&quot;</span><br><span class=\"line\">  tabBarBackgroundColor=&#123;&apos;#2196f3&apos;&#125;</span><br><span class=\"line\">  initialPage=&#123;0&#125;</span><br><span class=\"line\">  renderTabBar=&#123;()=&gt;&lt;ScrollableTabBar style=&#123;&#123;height: 40, borderWidth: 0, elevation: 2&#125;&#125;  tabStyle=&#123;&#123;height: 39&#125;&#125; /&gt;&#125;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">  &lt;PopularTab tabLabel=&quot;Java&quot;&gt;&lt;/PopularTab&gt;</span><br><span class=\"line\">  &lt;PopularTab tabLabel=&quot;iOS&quot;&gt;&lt;/PopularTab&gt;</span><br><span class=\"line\">&lt;/ScrollableTabView&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"复选框-react-native-check-box\"><a href=\"#复选框-react-native-check-box\" class=\"headerlink\" title=\"复选框 - react-native-check-box\"></a>复选框 - react-native-check-box</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-native-check-box --save</span><br><span class=\"line\"></span><br><span class=\"line\">import CheckBox from &apos;react-native-check-box&apos;</span><br><span class=\"line\">&lt;CheckBox</span><br><span class=\"line\">  style=&#123;&#123;flex: 1, padding: 10&#125;&#125;   //整行的checkBox</span><br><span class=\"line\">  onClick=&#123;() =&gt; this.onClick(data, index)&#125; //复选框的点击事件</span><br><span class=\"line\">  isChecked=&#123;data.checked&#125; //复选框的状态</span><br><span class=\"line\">  leftText=&#123;data.name&#125;  //复选框的name</span><br><span class=\"line\">  checkedImage=&#123;this._checkedImage(true)&#125; //选中</span><br><span class=\"line\">  unCheckedImage=&#123;this._checkedImage(false)&#125; //未选中</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//复选框的是否选中</span><br><span class=\"line\">onClick(data, index) &#123;</span><br><span class=\"line\">  data.checked = !data.checked;</span><br><span class=\"line\">  ArrayUtil.updateArray(this.changeValues, data); //更新数组的工具函数</span><br><span class=\"line\">  this.state.keys[index] = data;//更新state以便显示选中状态</span><br><span class=\"line\">  this.setState(&#123;</span><br><span class=\"line\">      keys: this.state.keys</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">  * 判断复选框的视图</span><br><span class=\"line\">  * @param &#123;Boolean&#125; checked </span><br><span class=\"line\">  */</span><br><span class=\"line\">_checkedImage(checked) &#123;</span><br><span class=\"line\">  return &lt;Ionicons</span><br><span class=\"line\">    name=&#123;checked ? &apos;ios-checkbox&apos; : &apos;md-square-outline&apos;&#125;</span><br><span class=\"line\">    size=&#123;20&#125;</span><br><span class=\"line\">    style=&#123;&#123;</span><br><span class=\"line\">        color: &apos;#2196f3&apos;,</span><br><span class=\"line\">    &#125;&#125;/&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"渲染HTML文本-react-native-htmlview\"><a href=\"#渲染HTML文本-react-native-htmlview\" class=\"headerlink\" title=\"渲染HTML文本 - react-native-htmlview\"></a>渲染HTML文本 - react-native-htmlview</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;HTMLView</span><br><span class=\"line\">  value=&#123;description&#125; //HTML文本内容</span><br><span class=\"line\">  onLinkPress=&#123;(url) =&gt; &#123;</span><br><span class=\"line\">  &#125;&#125; //渲染的文本有链接的时候，单击链接会回调这个方法</span><br><span class=\"line\">  stylesheet=&#123;&#123;</span><br><span class=\"line\">      p: styles.description,</span><br><span class=\"line\">      a: styles.description,</span><br><span class=\"line\">  &#125;&#125; //指定标签的样式</span><br><span class=\"line\"> /&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Modal-弹框组件\"><a href=\"#Modal-弹框组件\" class=\"headerlink\" title=\"Modal - 弹框组件\"></a>Modal - 弹框组件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> *弹框组件</span><br><span class=\"line\"> */</span><br><span class=\"line\">import React, &#123;Component&#125; from &apos;react&apos;</span><br><span class=\"line\">import &#123;Modal, Text, TouchableOpacity, StyleSheet, View, Platform, DeviceInfo&#125; from &apos;react-native&apos;</span><br><span class=\"line\">import MaterialIcons from &apos;react-native-vector-icons/MaterialIcons&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class TrendingDialog extends Component &#123;</span><br><span class=\"line\">    state = &#123;</span><br><span class=\"line\">        visible: false,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    show() &#123;</span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">        visible: true,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dismiss() &#123;</span><br><span class=\"line\">      this.setState(&#123;</span><br><span class=\"line\">        visible: false,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        const &#123;onClose, onSelect&#125; = this.props;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">          &lt;Modal</span><br><span class=\"line\">            transparent=&#123;true&#125;</span><br><span class=\"line\">            visible=&#123;this.state.visible&#125;</span><br><span class=\"line\">            onRequestClose=&#123;() =&gt; onClose&#125;</span><br><span class=\"line\">          &gt;</span><br><span class=\"line\">            &lt;TouchableOpacity</span><br><span class=\"line\">              style=&#123;styles.container&#125;</span><br><span class=\"line\">              onPress=&#123;() =&gt; this.dismiss()&#125;</span><br><span class=\"line\">            &gt;</span><br><span class=\"line\">              &lt;MaterialIcons</span><br><span class=\"line\">                name=&#123;&apos;arrow-drop-up&apos;&#125;</span><br><span class=\"line\">                size=&#123;36&#125;</span><br><span class=\"line\">                style=&#123;styles.arrow&#125;</span><br><span class=\"line\">              /&gt;</span><br><span class=\"line\">              &lt;View style=&#123;styles.content&#125;&gt;</span><br><span class=\"line\">                &lt;TouchableOpacity onPress=&#123;() =&gt; onSelect(&apos;11&apos;)&#125;&gt;</span><br><span class=\"line\">                  &lt;View style=&#123;styles.text_container&#125;&gt;</span><br><span class=\"line\">                    &lt;Text style=&#123;styles.text&#125;&gt;Displaying the popover on top of other elements&lt;/Text&gt;</span><br><span class=\"line\">                  &lt;/View&gt;</span><br><span class=\"line\">                &lt;/TouchableOpacity&gt;</span><br><span class=\"line\">                &lt;TouchableOpacity onPress=&#123;() =&gt; onSelect(&apos;11&apos;)&#125;&gt;</span><br><span class=\"line\">                  &lt;View style=&#123;styles.text_container&#125;&gt;</span><br><span class=\"line\">                    &lt;Text style=&#123;styles.text&#125;&gt;Displaying the popover on top of other elements&lt;/Text&gt;</span><br><span class=\"line\">                  &lt;/View&gt;</span><br><span class=\"line\">                &lt;/TouchableOpacity&gt;</span><br><span class=\"line\">              &lt;/View&gt;</span><br><span class=\"line\">              &lt;/TouchableOpacity&gt;</span><br><span class=\"line\">            &lt;/Modal&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const styles = StyleSheet.create(&#123;</span><br><span class=\"line\">    container: &#123;</span><br><span class=\"line\">      backgroundColor: &apos;rgba(0,0,0,0.6)&apos;,</span><br><span class=\"line\">      flex: 1,</span><br><span class=\"line\">      alignItems: &apos;center&apos;,</span><br><span class=\"line\">      paddingTop: DeviceInfo.isIPhoneX_deprecated ? 30 : 0</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    arrow: &#123;</span><br><span class=\"line\">      marginTop: 40,</span><br><span class=\"line\">      color: &apos;white&apos;,</span><br><span class=\"line\">      padding: 0,</span><br><span class=\"line\">      margin: -15</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">      backgroundColor: &apos;white&apos;,</span><br><span class=\"line\">      borderRadius: 3,</span><br><span class=\"line\">      paddingTop: 3,</span><br><span class=\"line\">      paddingBottom: 3,</span><br><span class=\"line\">      marginRight: 3,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    text_container: &#123;</span><br><span class=\"line\">      alignItems: &apos;center&apos;,</span><br><span class=\"line\">      flexDirection: &apos;row&apos;,</span><br><span class=\"line\">      justifyContent: &apos;center&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    text: &#123;</span><br><span class=\"line\">      fontSize: 16,</span><br><span class=\"line\">      color: &apos;black&apos;,</span><br><span class=\"line\">      fontWeight: &apos;400&apos;,</span><br><span class=\"line\">      padding: 8,</span><br><span class=\"line\">      paddingLeft: 26,</span><br><span class=\"line\">      paddingRight: 26</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    line: &#123;</span><br><span class=\"line\">      height: 0.3,</span><br><span class=\"line\">      backgroundColor: &apos;darkgray&apos;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Button title=&apos;弹出&apos; onPress=&#123;() =&gt; this.dialog.show()/&gt;</span><br><span class=\"line\">&lt;Button title=&apos;关闭&apos; onPress=&#123;() =&gt; this.dialog.dismiss()/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">renderTrendingDialog() &#123;</span><br><span class=\"line\">  return &lt;TrendingDialog</span><br><span class=\"line\">      ref=&#123;dialog =&gt; this.dialog = dialog&#125;</span><br><span class=\"line\">      onSelect=&#123;tab =&gt; this.onSelectTimeSpan(tab)&#125;</span><br><span class=\"line\">  /&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"本地存储-react-native-storage\"><a href=\"#本地存储-react-native-storage\" class=\"headerlink\" title=\"本地存储 - react-native-storage\"></a>本地存储 - react-native-storage</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-native-storage</span><br><span class=\"line\">npm install @react-native-community/async-storage</span><br><span class=\"line\">react-native link @react-native-community/async-storage</span><br><span class=\"line\"></span><br><span class=\"line\">import Storage from &apos;react-native-storage&apos;;</span><br><span class=\"line\">import AsyncStorage from &apos;@react-native-community/async-storage&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">const STORAGE = new Storage(&#123;</span><br><span class=\"line\">  // 最大容量，默认值1000条数据循环存储</span><br><span class=\"line\">  size: 100,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 存储引擎：对于RN使用AsyncStorage，对于web使用window.localStorage</span><br><span class=\"line\">  // 如果不指定则数据只会保存在内存中，重启后即丢失</span><br><span class=\"line\">  storageBackend: AsyncStorage,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 数据过期时间，默认一整天（1000 * 3600 * 24 毫秒），设为null则永不过期</span><br><span class=\"line\">  defaultExpires: null,</span><br><span class=\"line\"></span><br><span class=\"line\">  // 读写时在内存中缓存数据。默认启用。</span><br><span class=\"line\">  enableCache: true, // 你可以在构造函数这里就写好sync的方法 // 或是在任何时候，直接对storage.sync进行赋值修改 // 或是写到另一个文件里，这里require引入</span><br><span class=\"line\"></span><br><span class=\"line\">  // 如果storage中没有相应数据，或数据已过期，</span><br><span class=\"line\">  // 则会调用相应的sync方法，无缝返回最新数据。</span><br><span class=\"line\">  // sync方法的具体说明会在后文提到</span><br><span class=\"line\">  //sync: require(&apos;你可以另外写一个文件专门处理sync&apos;),</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">global.STORAGE = STORAGE</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用：</span><br><span class=\"line\"></span><br><span class=\"line\">onSave() &#123;</span><br><span class=\"line\">  STORAGE.save(&#123;</span><br><span class=\"line\">    key: &apos;loginState&apos;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">      from: &apos;some other site&apos;,</span><br><span class=\"line\">      userid: &apos;some userid&apos;,</span><br><span class=\"line\">      token: &apos;some token&apos;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">onLoad() &#123;</span><br><span class=\"line\">  STORAGE.load(&#123;</span><br><span class=\"line\">    key: &apos;loginState&apos;</span><br><span class=\"line\">  &#125;).then(ret =&gt; &#123;</span><br><span class=\"line\">    console.log(ret)</span><br><span class=\"line\">  &#125;).catch(err =&gt; &#123;</span><br><span class=\"line\">    console.warn(err.message)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">onRemove() &#123;</span><br><span class=\"line\">  STORAGE.remove(&#123;</span><br><span class=\"line\">    key: &apos;loginState&apos;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"轻提示-react-native-easy-toast\"><a href=\"#轻提示-react-native-easy-toast\" class=\"headerlink\" title=\"轻提示 - react-native-easy-toast\"></a>轻提示 - react-native-easy-toast</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i react-native-easy-toast --save</span><br><span class=\"line\"></span><br><span class=\"line\">import Toast, &#123;DURATION&#125; from &apos;react-native-easy-toast&apos;</span><br><span class=\"line\">&lt;Toast</span><br><span class=\"line\">  ref=&#123;toast =&gt; this.toast = toast&#125;</span><br><span class=\"line\">  position=&#123;&apos;center&apos;&#125;</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//使用</span><br><span class=\"line\">this.toast.show(&apos;\bhello&apos;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"类似滚动视图的组件，支持视差和粘性头-react-native-parallax-scroll-view\"><a href=\"#类似滚动视图的组件，支持视差和粘性头-react-native-parallax-scroll-view\" class=\"headerlink\" title=\"类似滚动视图的组件，支持视差和粘性头 - react-native-parallax-scroll-view\"></a>类似滚动视图的组件，支持视差和粘性头 - react-native-parallax-scroll-view</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-native-parallax-scroll-view --save</span><br><span class=\"line\"></span><br><span class=\"line\">import ParallaxScrollView from &apos;react-native-parallax-scroll-view&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">// 配置</span><br><span class=\"line\">getParallaxRenderConfig(params) &#123;</span><br><span class=\"line\">  let config = &#123;&#125;</span><br><span class=\"line\">  //视差头的背景，封面图像</span><br><span class=\"line\">  config.renderBackground = () =&gt; (</span><br><span class=\"line\">    &lt;View key=&quot;background&quot;&gt;</span><br><span class=\"line\">      &lt;Image source=&#123;&#123;</span><br><span class=\"line\">        uri: params.backgroundImg,</span><br><span class=\"line\">        width: window.width,</span><br><span class=\"line\">        height: PARALLAX_HEADER_HEIGHT</span><br><span class=\"line\">      &#125;&#125;/&gt;</span><br><span class=\"line\">      &lt;View style=&#123;&#123;</span><br><span class=\"line\">        position: &apos;absolute&apos;,</span><br><span class=\"line\">        top: 0,</span><br><span class=\"line\">        width: window.width,</span><br><span class=\"line\">        backgroundColor: &apos;rgba(0,0,0,.4)&apos;,</span><br><span class=\"line\">        height: PARALLAX_HEADER_HEIGHT</span><br><span class=\"line\">      &#125;&#125;/&gt;</span><br><span class=\"line\">    &lt;/View&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  // 背景显示的内容</span><br><span class=\"line\">  config.renderForeground = () =&gt; (</span><br><span class=\"line\">    &lt;View key=&quot;parallax-header&quot; style=&#123;styles.parallaxHeader&#125;&gt;</span><br><span class=\"line\">      &lt;Image style=&#123;styles.avatar&#125; source=&#123;&#123;url:params.avatar&#125;&#125;/&gt;</span><br><span class=\"line\">        &lt;Text style=&#123; styles.sectionSpeakerText &#125;&gt;</span><br><span class=\"line\">            &#123;params.name&#125;</span><br><span class=\"line\">        &lt;/Text&gt;</span><br><span class=\"line\">        &lt;Text style=&#123; styles.sectionTitleText &#125;&gt;</span><br><span class=\"line\">            &#123;params.description&#125;</span><br><span class=\"line\">        &lt;/Text&gt;</span><br><span class=\"line\">    &lt;/View&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  //当视差标题向上滚动时，它会粘在视图的顶部。</span><br><span class=\"line\">  config.renderStickyHeader = () =&gt; (</span><br><span class=\"line\">    &lt;View key=&quot;sticky-header&quot; style=&#123;styles.stickySection&#125;&gt;</span><br><span class=\"line\">      &lt;Text style=&#123;styles.stickySectionText&#125;&gt;&#123;params.name&#125;&lt;/Text&gt;</span><br><span class=\"line\">    &lt;/View&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  //固定在视图顶部</span><br><span class=\"line\">  config.renderFixedHeader = () =&gt; (</span><br><span class=\"line\">    &lt;View key=&quot;fixed-header&quot; style=&#123;styles.fixedSection&#125;&gt;</span><br><span class=\"line\">      &#123;ViewUtil.getLeftBackButton(()=&gt; NavigationUtil.goBack(this.props.navigation))&#125;</span><br><span class=\"line\">      &#123;ViewUtil.getShareButton(()=&gt;this.onShare())&#125;</span><br><span class=\"line\">    &lt;/View&gt;</span><br><span class=\"line\">  ); </span><br><span class=\"line\">  return config</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">renderView(content,params) &#123;</span><br><span class=\"line\">  let renderConfig = this.getParallaxRenderConfig(params)</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;ParallaxScrollView</span><br><span class=\"line\">      backgroundColor=&quot;#fff&quot;</span><br><span class=\"line\">      contentBackgroundColor=&quot;#f3f3f4&quot;</span><br><span class=\"line\">      parallaxHeaderHeight=&#123;PARALLAX_HEADER_HEIGHT&#125;</span><br><span class=\"line\">      stickyHeaderHeight=&#123;STICKY_HEADER_HEIGHT&#125;</span><br><span class=\"line\">      backgroundScrollSpeed=&#123;10&#125;</span><br><span class=\"line\">      &#123;...renderConfig&#125;</span><br><span class=\"line\">      &gt;&#123;content&#125;&lt;/ParallaxScrollView&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">    const content = &lt;View&gt;&lt;Text&gt;hello&lt;/Text&gt;&lt;/View&gt;</span><br><span class=\"line\">    return this.renderView(content,&#123;</span><br><span class=\"line\">      &apos;name&apos;: &apos;React Native&apos;,</span><br><span class=\"line\">      &apos;description&apos;:&apos;React Native产出的并不是“网页应用”， 或者说“HTML5应用”，又或者“混合应用”。 最终产品是一个真正的移动应用&apos;,</span><br><span class=\"line\">      &apos;avatar&apos;: &apos;https://bbs.reactnative.cn/uploads/profile/1-profileimg.png&apos;,</span><br><span class=\"line\">      &apos;backgroundImg&apos;:&apos;https://img0.sc115.com/uploads3/sc/jpgs/1904/zzpic17483_sc115.com.jpg&apos;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"热更新-react-native-pushy\"><a href=\"#热更新-react-native-pushy\" class=\"headerlink\" title=\"热更新 - react-native-pushy\"></a>热更新 - react-native-pushy</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/reactnativecn/react-native-pushy/blob/master/docs/guide.md</span><br><span class=\"line\"></span><br><span class=\"line\">1. 注册账号https://update.reactnative.cn</span><br><span class=\"line\"></span><br><span class=\"line\">2.pushy login</span><br><span class=\"line\"></span><br><span class=\"line\">3.创建应用</span><br><span class=\"line\">pushy createApp --platform ios</span><br><span class=\"line\">pushy createApp --platform android</span><br><span class=\"line\"></span><br><span class=\"line\">3.发布应用</span><br><span class=\"line\">pushy uploadIpa &lt;your-package.ipa&gt;</span><br><span class=\"line\">pushy uploadApk android/app/build/outputs/apk/app-release.apk</span><br><span class=\"line\"></span><br><span class=\"line\">4.发布新的热更新版本</span><br><span class=\"line\">pushy bundle --platform &lt;ios|android&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"极光分享-jshare-react-native\"><a href=\"#极光分享-jshare-react-native\" class=\"headerlink\" title=\"极光分享 - jshare-react-native\"></a>极光分享 - jshare-react-native</h4><h4 id=\"支付宝支付-react-native-yunpeng-alipay\"><a href=\"#支付宝支付-react-native-yunpeng-alipay\" class=\"headerlink\" title=\"支付宝支付 - react-native-yunpeng-alipay\"></a>支付宝支付 - react-native-yunpeng-alipay</h4><h4 id=\"微信支付-react-native-wechat\"><a href=\"#微信支付-react-native-wechat\" class=\"headerlink\" title=\"微信支付 - react-native-wechat\"></a>微信支付 - react-native-wechat</h4><h4 id=\"配置相对路径\"><a href=\"#配置相对路径\" class=\"headerlink\" title=\"配置相对路径\"></a>配置相对路径</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app文件下,新建一个package.json文件,</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;:&quot;app&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"反转单词","date":"2019-07-11T15:31:32.000Z","_content":"### 反转单词\n<!-- more -->\n\n![image](/images/suanfa-string.jpg)\n思路：\n1. 字符串按空格进行分隔，保存数组，数组的元素的先后顺序就是单词的顺序\n2. 对数组进行遍历，然后每个元素进行反转\n\n```\nfunction reverseString(str) {\n    return str.split(' ').map(item => {\n        return item.split('').reverse().join('')\n    }).join(' ')\n}\n```","source":"_posts/suanfa-string.md","raw":"---\ntitle: 反转单词\ndate: 2019-07-11 23:31:32\ntags: ['js数据结构与算法']\ncategories: js数据结构与算法\n---\n### 反转单词\n<!-- more -->\n\n![image](/images/suanfa-string.jpg)\n思路：\n1. 字符串按空格进行分隔，保存数组，数组的元素的先后顺序就是单词的顺序\n2. 对数组进行遍历，然后每个元素进行反转\n\n```\nfunction reverseString(str) {\n    return str.split(' ').map(item => {\n        return item.split('').reverse().join('')\n    }).join(' ')\n}\n```","slug":"suanfa-string","published":1,"updated":"2019-07-11T15:40:14.954Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq431003phe6ja3275cvc","content":"<h3 id=\"反转单词\"><a href=\"#反转单词\" class=\"headerlink\" title=\"反转单词\"></a>反转单词</h3><a id=\"more\"></a>\n<p><img src=\"/images/suanfa-string.jpg\" alt=\"image\"><br>思路：</p>\n<ol>\n<li>字符串按空格进行分隔，保存数组，数组的元素的先后顺序就是单词的顺序</li>\n<li>对数组进行遍历，然后每个元素进行反转</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function reverseString(str) &#123;</span><br><span class=\"line\">    return str.split(&apos; &apos;).map(item =&gt; &#123;</span><br><span class=\"line\">        return item.split(&apos;&apos;).reverse().join(&apos;&apos;)</span><br><span class=\"line\">    &#125;).join(&apos; &apos;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"反转单词\"><a href=\"#反转单词\" class=\"headerlink\" title=\"反转单词\"></a>反转单词</h3>","more":"<p><img src=\"/images/suanfa-string.jpg\" alt=\"image\"><br>思路：</p>\n<ol>\n<li>字符串按空格进行分隔，保存数组，数组的元素的先后顺序就是单词的顺序</li>\n<li>对数组进行遍历，然后每个元素进行反转</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function reverseString(str) &#123;</span><br><span class=\"line\">    return str.split(&apos; &apos;).map(item =&gt; &#123;</span><br><span class=\"line\">        return item.split(&apos;&apos;).reverse().join(&apos;&apos;)</span><br><span class=\"line\">    &#125;).join(&apos; &apos;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"vue-router的history模式","date":"2018-10-15T16:00:00.000Z","_content":"\n### History模式\n<!-- more -->\n\n### 简述\n1.vue-router 默认 hash 模式 ,后面带有#号，如果不要hash，可以用路由的 history 模式，后面不带#号。\n\n2.前端处理\n```\nconst router = new VueRouter({\n  mode: 'history',\n  base:\"/app\"\n  routes: [...]\n})\n```\nbase：应用的基路径。例如，如果整个单页应用服务在 /app/ 下，然后 base 就应该设为 \"/app/\"。如果放在服务器app文件下面没有base设置，页面会出现空白，无法显示页面。\n\n3.history 模式需要后端的配置支持\n[后端配置history模式详情](https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90)\n\n","source":"_posts/vue-router-history.md","raw":"---\ntitle: vue-router的history模式\ndate: 2018-10-16\ntags: [\"vue-router\"]\ncategories: vue\n---\n\n### History模式\n<!-- more -->\n\n### 简述\n1.vue-router 默认 hash 模式 ,后面带有#号，如果不要hash，可以用路由的 history 模式，后面不带#号。\n\n2.前端处理\n```\nconst router = new VueRouter({\n  mode: 'history',\n  base:\"/app\"\n  routes: [...]\n})\n```\nbase：应用的基路径。例如，如果整个单页应用服务在 /app/ 下，然后 base 就应该设为 \"/app/\"。如果放在服务器app文件下面没有base设置，页面会出现空白，无法显示页面。\n\n3.history 模式需要后端的配置支持\n[后端配置history模式详情](https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90)\n\n","slug":"vue-router-history","published":1,"updated":"2018-10-16T14:24:00.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq433003uhe6j5du3dnr0","content":"<h3 id=\"History模式\"><a href=\"#History模式\" class=\"headerlink\" title=\"History模式\"></a>History模式</h3><a id=\"more\"></a>\n<h3 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h3><p>1.vue-router 默认 hash 模式 ,后面带有#号，如果不要hash，可以用路由的 history 模式，后面不带#号。</p>\n<p>2.前端处理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const router = new VueRouter(&#123;</span><br><span class=\"line\">  mode: &apos;history&apos;,</span><br><span class=\"line\">  base:&quot;/app&quot;</span><br><span class=\"line\">  routes: [...]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>base：应用的基路径。例如，如果整个单页应用服务在 /app/ 下，然后 base 就应该设为 “/app/“。如果放在服务器app文件下面没有base设置，页面会出现空白，无法显示页面。</p>\n<p>3.history 模式需要后端的配置支持<br><a href=\"https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90\" target=\"_blank\" rel=\"noopener\">后端配置history模式详情</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"History模式\"><a href=\"#History模式\" class=\"headerlink\" title=\"History模式\"></a>History模式</h3>","more":"<h3 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h3><p>1.vue-router 默认 hash 模式 ,后面带有#号，如果不要hash，可以用路由的 history 模式，后面不带#号。</p>\n<p>2.前端处理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const router = new VueRouter(&#123;</span><br><span class=\"line\">  mode: &apos;history&apos;,</span><br><span class=\"line\">  base:&quot;/app&quot;</span><br><span class=\"line\">  routes: [...]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>base：应用的基路径。例如，如果整个单页应用服务在 /app/ 下，然后 base 就应该设为 “/app/“。如果放在服务器app文件下面没有base设置，页面会出现空白，无法显示页面。</p>\n<p>3.history 模式需要后端的配置支持<br><a href=\"https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90\" target=\"_blank\" rel=\"noopener\">后端配置history模式详情</a></p>"},{"title":"数组类","date":"2019-07-11T16:00:00.000Z","_content":"### 数组类\n<!-- more -->\n\n### 电话号码的字母组合\n![image](/images/array.jpg)\n\n思路：\n1. \"23\"分别对应'abc','def',把\"23\"分隔split成数组对应字母，遍历，splice替换，判断是否还有组合，递归\n2. \"234\" 的时候，先算出23的组合，23的新组合和4进行组合，两两计算\n![image](/images/array1.jpg)\n\n![image](/images/letterCombinations.jpg)\n\n### 种花问题\n![image](/images/array2.jpg)\n\n思路：\n1. 边界处理，判断1左右两边是否是0，如：0，1，0\n2. 定义计数器0\n3. 遍历，判断是否是0为空地\n4. 再判断第一个同时第二个是否为0空地，是的max++,跳到下一个进行左右判断\n\n![image](/images/canPlaceFlowers.jpg)","source":"_posts/sunfa-array.md","raw":"---\ntitle: 数组类\ndate: 2019-07-12\ntags: ['js数据结构与算法']\ncategories: js数据结构与算法\n---\n### 数组类\n<!-- more -->\n\n### 电话号码的字母组合\n![image](/images/array.jpg)\n\n思路：\n1. \"23\"分别对应'abc','def',把\"23\"分隔split成数组对应字母，遍历，splice替换，判断是否还有组合，递归\n2. \"234\" 的时候，先算出23的组合，23的新组合和4进行组合，两两计算\n![image](/images/array1.jpg)\n\n![image](/images/letterCombinations.jpg)\n\n### 种花问题\n![image](/images/array2.jpg)\n\n思路：\n1. 边界处理，判断1左右两边是否是0，如：0，1，0\n2. 定义计数器0\n3. 遍历，判断是否是0为空地\n4. 再判断第一个同时第二个是否为0空地，是的max++,跳到下一个进行左右判断\n\n![image](/images/canPlaceFlowers.jpg)","slug":"sunfa-array","published":1,"updated":"2019-07-12T02:10:20.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq434003xhe6jie40s618","content":"<h3 id=\"数组类\"><a href=\"#数组类\" class=\"headerlink\" title=\"数组类\"></a>数组类</h3><a id=\"more\"></a>\n<h3 id=\"电话号码的字母组合\"><a href=\"#电话号码的字母组合\" class=\"headerlink\" title=\"电话号码的字母组合\"></a>电话号码的字母组合</h3><p><img src=\"/images/array.jpg\" alt=\"image\"></p>\n<p>思路：</p>\n<ol>\n<li>“23”分别对应’abc’,’def’,把”23”分隔split成数组对应字母，遍历，splice替换，判断是否还有组合，递归</li>\n<li>“234” 的时候，先算出23的组合，23的新组合和4进行组合，两两计算<br><img src=\"/images/array1.jpg\" alt=\"image\"></li>\n</ol>\n<p><img src=\"/images/letterCombinations.jpg\" alt=\"image\"></p>\n<h3 id=\"种花问题\"><a href=\"#种花问题\" class=\"headerlink\" title=\"种花问题\"></a>种花问题</h3><p><img src=\"/images/array2.jpg\" alt=\"image\"></p>\n<p>思路：</p>\n<ol>\n<li>边界处理，判断1左右两边是否是0，如：0，1，0</li>\n<li>定义计数器0</li>\n<li>遍历，判断是否是0为空地</li>\n<li>再判断第一个同时第二个是否为0空地，是的max++,跳到下一个进行左右判断</li>\n</ol>\n<p><img src=\"/images/canPlaceFlowers.jpg\" alt=\"image\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"数组类\"><a href=\"#数组类\" class=\"headerlink\" title=\"数组类\"></a>数组类</h3>","more":"<h3 id=\"电话号码的字母组合\"><a href=\"#电话号码的字母组合\" class=\"headerlink\" title=\"电话号码的字母组合\"></a>电话号码的字母组合</h3><p><img src=\"/images/array.jpg\" alt=\"image\"></p>\n<p>思路：</p>\n<ol>\n<li>“23”分别对应’abc’,’def’,把”23”分隔split成数组对应字母，遍历，splice替换，判断是否还有组合，递归</li>\n<li>“234” 的时候，先算出23的组合，23的新组合和4进行组合，两两计算<br><img src=\"/images/array1.jpg\" alt=\"image\"></li>\n</ol>\n<p><img src=\"/images/letterCombinations.jpg\" alt=\"image\"></p>\n<h3 id=\"种花问题\"><a href=\"#种花问题\" class=\"headerlink\" title=\"种花问题\"></a>种花问题</h3><p><img src=\"/images/array2.jpg\" alt=\"image\"></p>\n<p>思路：</p>\n<ol>\n<li>边界处理，判断1左右两边是否是0，如：0，1，0</li>\n<li>定义计数器0</li>\n<li>遍历，判断是否是0为空地</li>\n<li>再判断第一个同时第二个是否为0空地，是的max++,跳到下一个进行左右判断</li>\n</ol>\n<p><img src=\"/images/canPlaceFlowers.jpg\" alt=\"image\"></p>"},{"title":"Vuex","date":"2018-10-08T16:00:00.000Z","_content":"### Vuex的使用\n<!-- more -->\n\n### Vuex是什么\nVuex是vue的全局状态管理模式，为所有组件管理状态，当多组件共享状态时，应当使用vuex，数据更好进行管理。简单说就是无论父组件还是子组件或子子组件都可以直接从vuex获取状态，vuex提供统一状态管理，更好去管理数据。\n#### Vuex图解\n![image](/images/vuex.png)\n1.通过提交mutations去改变state状态，从而state状态渲染到视图组件上\n2.视图组件可以dispatch派发一个Action进行异步操作，异步操作在action里面，在action里面可以commit-mutation\n3.视图组件可以派发action去提交Mutations，从而改变state\n\n### State\n1.state是vuex唯一的状态源，用一个对象包含了全部的应用层级状态。\n```\nstate.js \n\nconst state = {\n    count:1\n}\nexport default state;\n```\n2.如何在vue组件获取vuex状态\n```\nconst Counter = {\n  template: `<div>{{ count }}</div>`,\n  computed: {\n    count () {\n      return this.$store.state.count\n    }\n  }\n}\n```\n通过在根实例注册store选项，注入到根组件的所有子组件，且子组件能通过 this.$store 访问到。通过计算属性返回某个状态，每当this.$store.state.count变化的时候，都会重新求取计算属性，计算属性有缓存。\n\n3.mapState辅助函数\n当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余，帮助我们生成计算属性，让你少按几次键\n```\nimport { mapState } from 'vuex'\nexport defauilt {\n    computed:{\n        ...mapState(\n            ['count']\n        )\n    }\n}\n```\n\n### Getter\n#### 简述\nVuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。\n```\ngetters.js\n\nexport const count = state => state.count\n```\n#### 访问方式\n1.组件中使用它\n```\ncomputed: {\n  doneTodosCount () {\n    return this.$store.getters.count\n  }\n}\n```\n2.mapGetters辅助函数，个人比较喜欢当一种方式\n使用对象展开运算符将 getter 混入 computed 对象中\n```\nimport { mapGetters } from 'vuex'\n\nexport default {\n  computed: { \n    ...mapGetters([\n      'count',\n      'anotherGetter',\n    ])\n  }\n}\n```\n如果你想将一个 getter 属性另取一个名字，使用对象形式：\n```\nmapGetters({\n  把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`\n  doneCount: 'doneTodosCount'\n})\n```\n\n### Mutation\n更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。个人比较常用的一种方式\n\n#### Mutation配置\n```\nmutations-types.js\n\nexport const SET_MUTATION = 'export const SET_MUTATION'\n\n```\n使用常量替代 mutation 事件类型在各种 Flux 实现中是很常见的模式。这样可以使 linter 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然：\n\n```\nmutations.js\n\nimport * as types from './mutations-types.js'\n\nconst mutations = {\n  [types.SET_MUTATION](state,payload){\n\n  }\n}\n\nexport default mutations;\n```\nstate参数可以获取vuex中所有数据源，payload是提交mutations传入的数据参数。\n#### 提交mutation\n1.mapMutations辅助函数\n```\nimport { mapMutations } from 'vuex'\n\nmethods:{\n  test(){\n    this.mutation({\n      amount: 10\n    })\n  },\n  ...mapMutations({\n    mutation:'types.SET_MUTATION'\n  })\n}\n```\n将 `this.mutation()` 映射为 `this.$store.commit('increment')`。`this.mutation()`提交mutation。\n```\n接收payload\nmutations.js\n\nimport * as types from './mutations-types.js'\n\nconst mutations = {\n  [types.SET_MUTATION](state,payload){\n    state.count = payload.amount\n  }\n}\n\n```\n\n### Action\nAction 提交的是 mutation，而不是直接变更状态。Action 可以包含任意异步操作。\n#### 注册简单的action\n```\nimport * as types from './mutations-types.js'\n\nexport const actionFn = function({commit,state},{amount}){\n  commit(types.SET_MUTATION,amount)\n}\n\n```\n#### 在组件中分发 Action\n```\nimport { mapActions } from 'vuex'\n\nmethods:{\n  test(){\n    this.actionFn({amount:10})\n  },\n  ...mapActions([\n    'actionFn'\n  ])\n}\n```\n\n\n\n","source":"_posts/vue-vuex.md","raw":"---\ntitle: Vuex\ndate: 2018-10-09\ntags: [\"vuex\"]\ncategories: vue\n---\n### Vuex的使用\n<!-- more -->\n\n### Vuex是什么\nVuex是vue的全局状态管理模式，为所有组件管理状态，当多组件共享状态时，应当使用vuex，数据更好进行管理。简单说就是无论父组件还是子组件或子子组件都可以直接从vuex获取状态，vuex提供统一状态管理，更好去管理数据。\n#### Vuex图解\n![image](/images/vuex.png)\n1.通过提交mutations去改变state状态，从而state状态渲染到视图组件上\n2.视图组件可以dispatch派发一个Action进行异步操作，异步操作在action里面，在action里面可以commit-mutation\n3.视图组件可以派发action去提交Mutations，从而改变state\n\n### State\n1.state是vuex唯一的状态源，用一个对象包含了全部的应用层级状态。\n```\nstate.js \n\nconst state = {\n    count:1\n}\nexport default state;\n```\n2.如何在vue组件获取vuex状态\n```\nconst Counter = {\n  template: `<div>{{ count }}</div>`,\n  computed: {\n    count () {\n      return this.$store.state.count\n    }\n  }\n}\n```\n通过在根实例注册store选项，注入到根组件的所有子组件，且子组件能通过 this.$store 访问到。通过计算属性返回某个状态，每当this.$store.state.count变化的时候，都会重新求取计算属性，计算属性有缓存。\n\n3.mapState辅助函数\n当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余，帮助我们生成计算属性，让你少按几次键\n```\nimport { mapState } from 'vuex'\nexport defauilt {\n    computed:{\n        ...mapState(\n            ['count']\n        )\n    }\n}\n```\n\n### Getter\n#### 简述\nVuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。\n```\ngetters.js\n\nexport const count = state => state.count\n```\n#### 访问方式\n1.组件中使用它\n```\ncomputed: {\n  doneTodosCount () {\n    return this.$store.getters.count\n  }\n}\n```\n2.mapGetters辅助函数，个人比较喜欢当一种方式\n使用对象展开运算符将 getter 混入 computed 对象中\n```\nimport { mapGetters } from 'vuex'\n\nexport default {\n  computed: { \n    ...mapGetters([\n      'count',\n      'anotherGetter',\n    ])\n  }\n}\n```\n如果你想将一个 getter 属性另取一个名字，使用对象形式：\n```\nmapGetters({\n  把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`\n  doneCount: 'doneTodosCount'\n})\n```\n\n### Mutation\n更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。个人比较常用的一种方式\n\n#### Mutation配置\n```\nmutations-types.js\n\nexport const SET_MUTATION = 'export const SET_MUTATION'\n\n```\n使用常量替代 mutation 事件类型在各种 Flux 实现中是很常见的模式。这样可以使 linter 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然：\n\n```\nmutations.js\n\nimport * as types from './mutations-types.js'\n\nconst mutations = {\n  [types.SET_MUTATION](state,payload){\n\n  }\n}\n\nexport default mutations;\n```\nstate参数可以获取vuex中所有数据源，payload是提交mutations传入的数据参数。\n#### 提交mutation\n1.mapMutations辅助函数\n```\nimport { mapMutations } from 'vuex'\n\nmethods:{\n  test(){\n    this.mutation({\n      amount: 10\n    })\n  },\n  ...mapMutations({\n    mutation:'types.SET_MUTATION'\n  })\n}\n```\n将 `this.mutation()` 映射为 `this.$store.commit('increment')`。`this.mutation()`提交mutation。\n```\n接收payload\nmutations.js\n\nimport * as types from './mutations-types.js'\n\nconst mutations = {\n  [types.SET_MUTATION](state,payload){\n    state.count = payload.amount\n  }\n}\n\n```\n\n### Action\nAction 提交的是 mutation，而不是直接变更状态。Action 可以包含任意异步操作。\n#### 注册简单的action\n```\nimport * as types from './mutations-types.js'\n\nexport const actionFn = function({commit,state},{amount}){\n  commit(types.SET_MUTATION,amount)\n}\n\n```\n#### 在组件中分发 Action\n```\nimport { mapActions } from 'vuex'\n\nmethods:{\n  test(){\n    this.actionFn({amount:10})\n  },\n  ...mapActions([\n    'actionFn'\n  ])\n}\n```\n\n\n\n","slug":"vue-vuex","published":1,"updated":"2018-10-09T15:02:29.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq4360042he6j0pgaj1xh","content":"<h3 id=\"Vuex的使用\"><a href=\"#Vuex的使用\" class=\"headerlink\" title=\"Vuex的使用\"></a>Vuex的使用</h3><a id=\"more\"></a>\n<h3 id=\"Vuex是什么\"><a href=\"#Vuex是什么\" class=\"headerlink\" title=\"Vuex是什么\"></a>Vuex是什么</h3><p>Vuex是vue的全局状态管理模式，为所有组件管理状态，当多组件共享状态时，应当使用vuex，数据更好进行管理。简单说就是无论父组件还是子组件或子子组件都可以直接从vuex获取状态，vuex提供统一状态管理，更好去管理数据。</p>\n<h4 id=\"Vuex图解\"><a href=\"#Vuex图解\" class=\"headerlink\" title=\"Vuex图解\"></a>Vuex图解</h4><p><img src=\"/images/vuex.png\" alt=\"image\"><br>1.通过提交mutations去改变state状态，从而state状态渲染到视图组件上<br>2.视图组件可以dispatch派发一个Action进行异步操作，异步操作在action里面，在action里面可以commit-mutation<br>3.视图组件可以派发action去提交Mutations，从而改变state</p>\n<h3 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h3><p>1.state是vuex唯一的状态源，用一个对象包含了全部的应用层级状态。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state.js </span><br><span class=\"line\"></span><br><span class=\"line\">const state = &#123;</span><br><span class=\"line\">    count:1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default state;</span><br></pre></td></tr></table></figure></p>\n<p>2.如何在vue组件获取vuex状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Counter = &#123;</span><br><span class=\"line\">  template: `&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    count () &#123;</span><br><span class=\"line\">      return this.$store.state.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过在根实例注册store选项，注入到根组件的所有子组件，且子组件能通过 this.$store 访问到。通过计算属性返回某个状态，每当this.$store.state.count变化的时候，都会重新求取计算属性，计算属性有缓存。</p>\n<p>3.mapState辅助函数<br>当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余，帮助我们生成计算属性，让你少按几次键<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; mapState &#125; from &apos;vuex&apos;</span><br><span class=\"line\">export defauilt &#123;</span><br><span class=\"line\">    computed:&#123;</span><br><span class=\"line\">        ...mapState(</span><br><span class=\"line\">            [&apos;count&apos;]</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Getter\"><a href=\"#Getter\" class=\"headerlink\" title=\"Getter\"></a>Getter</h3><h4 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h4><p>Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getters.js</span><br><span class=\"line\"></span><br><span class=\"line\">export const count = state =&gt; state.count</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"访问方式\"><a href=\"#访问方式\" class=\"headerlink\" title=\"访问方式\"></a>访问方式</h4><p>1.组件中使用它<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  doneTodosCount () &#123;</span><br><span class=\"line\">    return this.$store.getters.count</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.mapGetters辅助函数，个人比较喜欢当一种方式<br>使用对象展开运算符将 getter 混入 computed 对象中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; mapGetters &#125; from &apos;vuex&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  computed: &#123; </span><br><span class=\"line\">    ...mapGetters([</span><br><span class=\"line\">      &apos;count&apos;,</span><br><span class=\"line\">      &apos;anotherGetter&apos;,</span><br><span class=\"line\">    ])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果你想将一个 getter 属性另取一个名字，使用对象形式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mapGetters(&#123;</span><br><span class=\"line\">  把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`</span><br><span class=\"line\">  doneCount: &apos;doneTodosCount&apos;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Mutation\"><a href=\"#Mutation\" class=\"headerlink\" title=\"Mutation\"></a>Mutation</h3><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。个人比较常用的一种方式</p>\n<h4 id=\"Mutation配置\"><a href=\"#Mutation配置\" class=\"headerlink\" title=\"Mutation配置\"></a>Mutation配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutations-types.js</span><br><span class=\"line\"></span><br><span class=\"line\">export const SET_MUTATION = &apos;export const SET_MUTATION&apos;</span><br></pre></td></tr></table></figure>\n<p>使用常量替代 mutation 事件类型在各种 Flux 实现中是很常见的模式。这样可以使 linter 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutations.js</span><br><span class=\"line\"></span><br><span class=\"line\">import * as types from &apos;./mutations-types.js&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const mutations = &#123;</span><br><span class=\"line\">  [types.SET_MUTATION](state,payload)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default mutations;</span><br></pre></td></tr></table></figure>\n<p>state参数可以获取vuex中所有数据源，payload是提交mutations传入的数据参数。</p>\n<h4 id=\"提交mutation\"><a href=\"#提交mutation\" class=\"headerlink\" title=\"提交mutation\"></a>提交mutation</h4><p>1.mapMutations辅助函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; mapMutations &#125; from &apos;vuex&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">  test()&#123;</span><br><span class=\"line\">    this.mutation(&#123;</span><br><span class=\"line\">      amount: 10</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...mapMutations(&#123;</span><br><span class=\"line\">    mutation:&apos;types.SET_MUTATION&apos;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>将 <code>this.mutation()</code> 映射为 <code>this.$store.commit(&#39;increment&#39;)</code>。<code>this.mutation()</code>提交mutation。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">接收payload</span><br><span class=\"line\">mutations.js</span><br><span class=\"line\"></span><br><span class=\"line\">import * as types from &apos;./mutations-types.js&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const mutations = &#123;</span><br><span class=\"line\">  [types.SET_MUTATION](state,payload)&#123;</span><br><span class=\"line\">    state.count = payload.amount</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h3><p>Action 提交的是 mutation，而不是直接变更状态。Action 可以包含任意异步操作。</p>\n<h4 id=\"注册简单的action\"><a href=\"#注册简单的action\" class=\"headerlink\" title=\"注册简单的action\"></a>注册简单的action</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as types from &apos;./mutations-types.js&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export const actionFn = function(&#123;commit,state&#125;,&#123;amount&#125;)&#123;</span><br><span class=\"line\">  commit(types.SET_MUTATION,amount)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在组件中分发-Action\"><a href=\"#在组件中分发-Action\" class=\"headerlink\" title=\"在组件中分发 Action\"></a>在组件中分发 Action</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; mapActions &#125; from &apos;vuex&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">  test()&#123;</span><br><span class=\"line\">    this.actionFn(&#123;amount:10&#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...mapActions([</span><br><span class=\"line\">    &apos;actionFn&apos;</span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"Vuex的使用\"><a href=\"#Vuex的使用\" class=\"headerlink\" title=\"Vuex的使用\"></a>Vuex的使用</h3>","more":"<h3 id=\"Vuex是什么\"><a href=\"#Vuex是什么\" class=\"headerlink\" title=\"Vuex是什么\"></a>Vuex是什么</h3><p>Vuex是vue的全局状态管理模式，为所有组件管理状态，当多组件共享状态时，应当使用vuex，数据更好进行管理。简单说就是无论父组件还是子组件或子子组件都可以直接从vuex获取状态，vuex提供统一状态管理，更好去管理数据。</p>\n<h4 id=\"Vuex图解\"><a href=\"#Vuex图解\" class=\"headerlink\" title=\"Vuex图解\"></a>Vuex图解</h4><p><img src=\"/images/vuex.png\" alt=\"image\"><br>1.通过提交mutations去改变state状态，从而state状态渲染到视图组件上<br>2.视图组件可以dispatch派发一个Action进行异步操作，异步操作在action里面，在action里面可以commit-mutation<br>3.视图组件可以派发action去提交Mutations，从而改变state</p>\n<h3 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h3><p>1.state是vuex唯一的状态源，用一个对象包含了全部的应用层级状态。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">state.js </span><br><span class=\"line\"></span><br><span class=\"line\">const state = &#123;</span><br><span class=\"line\">    count:1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default state;</span><br></pre></td></tr></table></figure></p>\n<p>2.如何在vue组件获取vuex状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Counter = &#123;</span><br><span class=\"line\">  template: `&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    count () &#123;</span><br><span class=\"line\">      return this.$store.state.count</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过在根实例注册store选项，注入到根组件的所有子组件，且子组件能通过 this.$store 访问到。通过计算属性返回某个状态，每当this.$store.state.count变化的时候，都会重新求取计算属性，计算属性有缓存。</p>\n<p>3.mapState辅助函数<br>当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余，帮助我们生成计算属性，让你少按几次键<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; mapState &#125; from &apos;vuex&apos;</span><br><span class=\"line\">export defauilt &#123;</span><br><span class=\"line\">    computed:&#123;</span><br><span class=\"line\">        ...mapState(</span><br><span class=\"line\">            [&apos;count&apos;]</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Getter\"><a href=\"#Getter\" class=\"headerlink\" title=\"Getter\"></a>Getter</h3><h4 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h4><p>Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getters.js</span><br><span class=\"line\"></span><br><span class=\"line\">export const count = state =&gt; state.count</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"访问方式\"><a href=\"#访问方式\" class=\"headerlink\" title=\"访问方式\"></a>访问方式</h4><p>1.组件中使用它<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  doneTodosCount () &#123;</span><br><span class=\"line\">    return this.$store.getters.count</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.mapGetters辅助函数，个人比较喜欢当一种方式<br>使用对象展开运算符将 getter 混入 computed 对象中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; mapGetters &#125; from &apos;vuex&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  computed: &#123; </span><br><span class=\"line\">    ...mapGetters([</span><br><span class=\"line\">      &apos;count&apos;,</span><br><span class=\"line\">      &apos;anotherGetter&apos;,</span><br><span class=\"line\">    ])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果你想将一个 getter 属性另取一个名字，使用对象形式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mapGetters(&#123;</span><br><span class=\"line\">  把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`</span><br><span class=\"line\">  doneCount: &apos;doneTodosCount&apos;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Mutation\"><a href=\"#Mutation\" class=\"headerlink\" title=\"Mutation\"></a>Mutation</h3><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。个人比较常用的一种方式</p>\n<h4 id=\"Mutation配置\"><a href=\"#Mutation配置\" class=\"headerlink\" title=\"Mutation配置\"></a>Mutation配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutations-types.js</span><br><span class=\"line\"></span><br><span class=\"line\">export const SET_MUTATION = &apos;export const SET_MUTATION&apos;</span><br></pre></td></tr></table></figure>\n<p>使用常量替代 mutation 事件类型在各种 Flux 实现中是很常见的模式。这样可以使 linter 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutations.js</span><br><span class=\"line\"></span><br><span class=\"line\">import * as types from &apos;./mutations-types.js&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const mutations = &#123;</span><br><span class=\"line\">  [types.SET_MUTATION](state,payload)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default mutations;</span><br></pre></td></tr></table></figure>\n<p>state参数可以获取vuex中所有数据源，payload是提交mutations传入的数据参数。</p>\n<h4 id=\"提交mutation\"><a href=\"#提交mutation\" class=\"headerlink\" title=\"提交mutation\"></a>提交mutation</h4><p>1.mapMutations辅助函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; mapMutations &#125; from &apos;vuex&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">  test()&#123;</span><br><span class=\"line\">    this.mutation(&#123;</span><br><span class=\"line\">      amount: 10</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...mapMutations(&#123;</span><br><span class=\"line\">    mutation:&apos;types.SET_MUTATION&apos;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>将 <code>this.mutation()</code> 映射为 <code>this.$store.commit(&#39;increment&#39;)</code>。<code>this.mutation()</code>提交mutation。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">接收payload</span><br><span class=\"line\">mutations.js</span><br><span class=\"line\"></span><br><span class=\"line\">import * as types from &apos;./mutations-types.js&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const mutations = &#123;</span><br><span class=\"line\">  [types.SET_MUTATION](state,payload)&#123;</span><br><span class=\"line\">    state.count = payload.amount</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h3><p>Action 提交的是 mutation，而不是直接变更状态。Action 可以包含任意异步操作。</p>\n<h4 id=\"注册简单的action\"><a href=\"#注册简单的action\" class=\"headerlink\" title=\"注册简单的action\"></a>注册简单的action</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as types from &apos;./mutations-types.js&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export const actionFn = function(&#123;commit,state&#125;,&#123;amount&#125;)&#123;</span><br><span class=\"line\">  commit(types.SET_MUTATION,amount)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在组件中分发-Action\"><a href=\"#在组件中分发-Action\" class=\"headerlink\" title=\"在组件中分发 Action\"></a>在组件中分发 Action</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; mapActions &#125; from &apos;vuex&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">  test()&#123;</span><br><span class=\"line\">    this.actionFn(&#123;amount:10&#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...mapActions([</span><br><span class=\"line\">    &apos;actionFn&apos;</span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"小程序http封装","date":"2018-12-04T16:00:00.000Z","_content":"\n### 小程序wx.request请求封装\n<!-- more -->\n\n``` \nconfig.js\n---\napi_base_url:接口域名\nappkey:头部携带的参数\nconst config = {\n    api_base_url: '',\n    appkey: \"\",\n}\n\nexport {config }\n```\n```\nhttp.js\n---\n\nimport {config} from '../config.js'\n\n定义状态码返回的错误信息 \nconst tips = {\n    1: '抱歉，出现了一个错误',\n    1005:'appkey无效，请前往www.7yue.pro申请',\n    3000:'期刊不存在'\n}\n\n解构\nclass HTTP{\n    默认GET请求方式，返回Promise\n    request({url,data={},method='GET'}){\n        return new Promise((resolve, reject)=>{\n            this._request(url,resolve,reject,data, method)\n        })\n    }\n    _request(url,resolve, reject, data={}, method='GET'){\n        wx.request({\n            url:config.api_base_url + url,\n            method:method,\n            data:data,\n            header:{\n                'content-type':'application/json',\n                'appkey':config.appkey\n            },\n            success:(res)=>{\n                const code = res.statusCode.toString()\n                if (code.startsWith('2')){\n                    resolve(res.data)\n                }\n                else{\n                    reject()\n                    const error_code = res.data.error_code\n                    this._show_error(error_code)\n                }\n            },\n            fail:(err)=>{\n                reject()\n                this._show_error(1)\n            }\n        })\n\n    }\n\n    _show_error(error_code){\n        if(!error_code){\n            error_code = 1\n        }\n        const tip = tips[error_code]\n        wx.showToast({\n            title: tip?tip:tips[1], \n            icon:'none',\n            duration:2000\n        }) \n    }\n\n\n}\n\nexport {HTTP}\n```\n\n\n```\nmodel.js\n---\nimport {\n    HTTP\n}\nfrom 'http.js'\n\nES6继承\nclass Model extends HTTP {\n\n    GET请求\n    getDetail(bid) {\n        return this.request({\n            url: `book/${bid}/detail`\n        })\n    }\n\n    POST请求\n    postComment(bid, comment) {\n        return this.request({\n            url: 'book/add/short_comment',\n            method: 'POST',\n            data: {\n                book_id: bid,\n                content: comment\n            }\n        })\n    }\n}\n```\n\n```\n使用\n---\nimport {\n  Models\n} from '/models.js'\n\n实例化对象\nconst model = new Models()\n\nmodel.getDetail().then(res => {\n\n})\n```","source":"_posts/weChat-wx-request.md","raw":"---\ntitle: 小程序http封装\ndate: 2018-12-05\ntags: ['小程序']\ncategories: 小程序\n---\n\n### 小程序wx.request请求封装\n<!-- more -->\n\n``` \nconfig.js\n---\napi_base_url:接口域名\nappkey:头部携带的参数\nconst config = {\n    api_base_url: '',\n    appkey: \"\",\n}\n\nexport {config }\n```\n```\nhttp.js\n---\n\nimport {config} from '../config.js'\n\n定义状态码返回的错误信息 \nconst tips = {\n    1: '抱歉，出现了一个错误',\n    1005:'appkey无效，请前往www.7yue.pro申请',\n    3000:'期刊不存在'\n}\n\n解构\nclass HTTP{\n    默认GET请求方式，返回Promise\n    request({url,data={},method='GET'}){\n        return new Promise((resolve, reject)=>{\n            this._request(url,resolve,reject,data, method)\n        })\n    }\n    _request(url,resolve, reject, data={}, method='GET'){\n        wx.request({\n            url:config.api_base_url + url,\n            method:method,\n            data:data,\n            header:{\n                'content-type':'application/json',\n                'appkey':config.appkey\n            },\n            success:(res)=>{\n                const code = res.statusCode.toString()\n                if (code.startsWith('2')){\n                    resolve(res.data)\n                }\n                else{\n                    reject()\n                    const error_code = res.data.error_code\n                    this._show_error(error_code)\n                }\n            },\n            fail:(err)=>{\n                reject()\n                this._show_error(1)\n            }\n        })\n\n    }\n\n    _show_error(error_code){\n        if(!error_code){\n            error_code = 1\n        }\n        const tip = tips[error_code]\n        wx.showToast({\n            title: tip?tip:tips[1], \n            icon:'none',\n            duration:2000\n        }) \n    }\n\n\n}\n\nexport {HTTP}\n```\n\n\n```\nmodel.js\n---\nimport {\n    HTTP\n}\nfrom 'http.js'\n\nES6继承\nclass Model extends HTTP {\n\n    GET请求\n    getDetail(bid) {\n        return this.request({\n            url: `book/${bid}/detail`\n        })\n    }\n\n    POST请求\n    postComment(bid, comment) {\n        return this.request({\n            url: 'book/add/short_comment',\n            method: 'POST',\n            data: {\n                book_id: bid,\n                content: comment\n            }\n        })\n    }\n}\n```\n\n```\n使用\n---\nimport {\n  Models\n} from '/models.js'\n\n实例化对象\nconst model = new Models()\n\nmodel.getDetail().then(res => {\n\n})\n```","slug":"weChat-wx-request","published":1,"updated":"2018-12-05T14:37:16.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq4370045he6jnbj4e33f","content":"<h3 id=\"小程序wx-request请求封装\"><a href=\"#小程序wx-request请求封装\" class=\"headerlink\" title=\"小程序wx.request请求封装\"></a>小程序wx.request请求封装</h3><a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.js</span><br><span class=\"line\">---</span><br><span class=\"line\">api_base_url:接口域名</span><br><span class=\"line\">appkey:头部携带的参数</span><br><span class=\"line\">const config = &#123;</span><br><span class=\"line\">    api_base_url: &apos;&apos;,</span><br><span class=\"line\">    appkey: &quot;&quot;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export &#123;config &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.js</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123;config&#125; from &apos;../config.js&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">定义状态码返回的错误信息 </span><br><span class=\"line\">const tips = &#123;</span><br><span class=\"line\">    1: &apos;抱歉，出现了一个错误&apos;,</span><br><span class=\"line\">    1005:&apos;appkey无效，请前往www.7yue.pro申请&apos;,</span><br><span class=\"line\">    3000:&apos;期刊不存在&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">解构</span><br><span class=\"line\">class HTTP&#123;</span><br><span class=\"line\">    默认GET请求方式，返回Promise</span><br><span class=\"line\">    request(&#123;url,data=&#123;&#125;,method=&apos;GET&apos;&#125;)&#123;</span><br><span class=\"line\">        return new Promise((resolve, reject)=&gt;&#123;</span><br><span class=\"line\">            this._request(url,resolve,reject,data, method)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    _request(url,resolve, reject, data=&#123;&#125;, method=&apos;GET&apos;)&#123;</span><br><span class=\"line\">        wx.request(&#123;</span><br><span class=\"line\">            url:config.api_base_url + url,</span><br><span class=\"line\">            method:method,</span><br><span class=\"line\">            data:data,</span><br><span class=\"line\">            header:&#123;</span><br><span class=\"line\">                &apos;content-type&apos;:&apos;application/json&apos;,</span><br><span class=\"line\">                &apos;appkey&apos;:config.appkey</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            success:(res)=&gt;&#123;</span><br><span class=\"line\">                const code = res.statusCode.toString()</span><br><span class=\"line\">                if (code.startsWith(&apos;2&apos;))&#123;</span><br><span class=\"line\">                    resolve(res.data)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else&#123;</span><br><span class=\"line\">                    reject()</span><br><span class=\"line\">                    const error_code = res.data.error_code</span><br><span class=\"line\">                    this._show_error(error_code)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            fail:(err)=&gt;&#123;</span><br><span class=\"line\">                reject()</span><br><span class=\"line\">                this._show_error(1)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    _show_error(error_code)&#123;</span><br><span class=\"line\">        if(!error_code)&#123;</span><br><span class=\"line\">            error_code = 1</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        const tip = tips[error_code]</span><br><span class=\"line\">        wx.showToast(&#123;</span><br><span class=\"line\">            title: tip?tip:tips[1], </span><br><span class=\"line\">            icon:&apos;none&apos;,</span><br><span class=\"line\">            duration:2000</span><br><span class=\"line\">        &#125;) </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export &#123;HTTP&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model.js</span><br><span class=\"line\">---</span><br><span class=\"line\">import &#123;</span><br><span class=\"line\">    HTTP</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">from &apos;http.js&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">ES6继承</span><br><span class=\"line\">class Model extends HTTP &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    GET请求</span><br><span class=\"line\">    getDetail(bid) &#123;</span><br><span class=\"line\">        return this.request(&#123;</span><br><span class=\"line\">            url: `book/$&#123;bid&#125;/detail`</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    POST请求</span><br><span class=\"line\">    postComment(bid, comment) &#123;</span><br><span class=\"line\">        return this.request(&#123;</span><br><span class=\"line\">            url: &apos;book/add/short_comment&apos;,</span><br><span class=\"line\">            method: &apos;POST&apos;,</span><br><span class=\"line\">            data: &#123;</span><br><span class=\"line\">                book_id: bid,</span><br><span class=\"line\">                content: comment</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用</span><br><span class=\"line\">---</span><br><span class=\"line\">import &#123;</span><br><span class=\"line\">  Models</span><br><span class=\"line\">&#125; from &apos;/models.js&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">实例化对象</span><br><span class=\"line\">const model = new Models()</span><br><span class=\"line\"></span><br><span class=\"line\">model.getDetail().then(res =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"小程序wx-request请求封装\"><a href=\"#小程序wx-request请求封装\" class=\"headerlink\" title=\"小程序wx.request请求封装\"></a>小程序wx.request请求封装</h3>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.js</span><br><span class=\"line\">---</span><br><span class=\"line\">api_base_url:接口域名</span><br><span class=\"line\">appkey:头部携带的参数</span><br><span class=\"line\">const config = &#123;</span><br><span class=\"line\">    api_base_url: &apos;&apos;,</span><br><span class=\"line\">    appkey: &quot;&quot;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export &#123;config &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.js</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123;config&#125; from &apos;../config.js&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">定义状态码返回的错误信息 </span><br><span class=\"line\">const tips = &#123;</span><br><span class=\"line\">    1: &apos;抱歉，出现了一个错误&apos;,</span><br><span class=\"line\">    1005:&apos;appkey无效，请前往www.7yue.pro申请&apos;,</span><br><span class=\"line\">    3000:&apos;期刊不存在&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">解构</span><br><span class=\"line\">class HTTP&#123;</span><br><span class=\"line\">    默认GET请求方式，返回Promise</span><br><span class=\"line\">    request(&#123;url,data=&#123;&#125;,method=&apos;GET&apos;&#125;)&#123;</span><br><span class=\"line\">        return new Promise((resolve, reject)=&gt;&#123;</span><br><span class=\"line\">            this._request(url,resolve,reject,data, method)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    _request(url,resolve, reject, data=&#123;&#125;, method=&apos;GET&apos;)&#123;</span><br><span class=\"line\">        wx.request(&#123;</span><br><span class=\"line\">            url:config.api_base_url + url,</span><br><span class=\"line\">            method:method,</span><br><span class=\"line\">            data:data,</span><br><span class=\"line\">            header:&#123;</span><br><span class=\"line\">                &apos;content-type&apos;:&apos;application/json&apos;,</span><br><span class=\"line\">                &apos;appkey&apos;:config.appkey</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            success:(res)=&gt;&#123;</span><br><span class=\"line\">                const code = res.statusCode.toString()</span><br><span class=\"line\">                if (code.startsWith(&apos;2&apos;))&#123;</span><br><span class=\"line\">                    resolve(res.data)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                else&#123;</span><br><span class=\"line\">                    reject()</span><br><span class=\"line\">                    const error_code = res.data.error_code</span><br><span class=\"line\">                    this._show_error(error_code)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            fail:(err)=&gt;&#123;</span><br><span class=\"line\">                reject()</span><br><span class=\"line\">                this._show_error(1)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    _show_error(error_code)&#123;</span><br><span class=\"line\">        if(!error_code)&#123;</span><br><span class=\"line\">            error_code = 1</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        const tip = tips[error_code]</span><br><span class=\"line\">        wx.showToast(&#123;</span><br><span class=\"line\">            title: tip?tip:tips[1], </span><br><span class=\"line\">            icon:&apos;none&apos;,</span><br><span class=\"line\">            duration:2000</span><br><span class=\"line\">        &#125;) </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export &#123;HTTP&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model.js</span><br><span class=\"line\">---</span><br><span class=\"line\">import &#123;</span><br><span class=\"line\">    HTTP</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">from &apos;http.js&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">ES6继承</span><br><span class=\"line\">class Model extends HTTP &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    GET请求</span><br><span class=\"line\">    getDetail(bid) &#123;</span><br><span class=\"line\">        return this.request(&#123;</span><br><span class=\"line\">            url: `book/$&#123;bid&#125;/detail`</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    POST请求</span><br><span class=\"line\">    postComment(bid, comment) &#123;</span><br><span class=\"line\">        return this.request(&#123;</span><br><span class=\"line\">            url: &apos;book/add/short_comment&apos;,</span><br><span class=\"line\">            method: &apos;POST&apos;,</span><br><span class=\"line\">            data: &#123;</span><br><span class=\"line\">                book_id: bid,</span><br><span class=\"line\">                content: comment</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用</span><br><span class=\"line\">---</span><br><span class=\"line\">import &#123;</span><br><span class=\"line\">  Models</span><br><span class=\"line\">&#125; from &apos;/models.js&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">实例化对象</span><br><span class=\"line\">const model = new Models()</span><br><span class=\"line\"></span><br><span class=\"line\">model.getDetail().then(res =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>"},{"title":"小程序组件","date":"2018-11-03T16:00:00.000Z","_content":"\n### 小程序组件、事件与属性\n<!-- more -->\n\n### 组件引用\n```\nComponent({\n    /**\n    * 组件的属性列表，外部暴露的属性\n    */\n    properties: {\n        like:{\n            type:Number、String、Boolean, //属性的类型，必填\n            value:false, //初始值，选填\n            observer: function (newVal, oldVal) { \n                this.setData({\n                    val:newVal\n                })\n            } \n            // observer属性被改变时执行的函数（可选)，不要直接去改变properties的值(发生内存泄漏)，通过data定义的数据，通过setData把properties的值赋值data定义的值\n        }\n    },\n\n    /**\n    * 组件的初始数据\n    */\n    data: {\n        isLike:false,\n        val:null\n    },\n\n    /**\n    * 组件的方法列表\n    */\n    methods: {\n        this.properties.like//访问properties的属性\n    }\n})\n```\n1.微信开发者工具小程序新建Component,新建组件目录\n2.properties：对外属性，即如果外部的wxml文件传入数据时，会把数据设置成properties的属性。(类似vue父子组件的传值类型限定)\n3.data数据的状态绑定\n4.methods组件的方法和生命周期的使用\n5.只有setData才可以更新data的数据","source":"_posts/weChat-component.md","raw":"---\ntitle: 小程序组件\ndate: 2018-11-04\ntags: ['小程序']\ncategories: 小程序\n---\n\n### 小程序组件、事件与属性\n<!-- more -->\n\n### 组件引用\n```\nComponent({\n    /**\n    * 组件的属性列表，外部暴露的属性\n    */\n    properties: {\n        like:{\n            type:Number、String、Boolean, //属性的类型，必填\n            value:false, //初始值，选填\n            observer: function (newVal, oldVal) { \n                this.setData({\n                    val:newVal\n                })\n            } \n            // observer属性被改变时执行的函数（可选)，不要直接去改变properties的值(发生内存泄漏)，通过data定义的数据，通过setData把properties的值赋值data定义的值\n        }\n    },\n\n    /**\n    * 组件的初始数据\n    */\n    data: {\n        isLike:false,\n        val:null\n    },\n\n    /**\n    * 组件的方法列表\n    */\n    methods: {\n        this.properties.like//访问properties的属性\n    }\n})\n```\n1.微信开发者工具小程序新建Component,新建组件目录\n2.properties：对外属性，即如果外部的wxml文件传入数据时，会把数据设置成properties的属性。(类似vue父子组件的传值类型限定)\n3.data数据的状态绑定\n4.methods组件的方法和生命周期的使用\n5.只有setData才可以更新data的数据","slug":"weChat-component","published":1,"updated":"2018-11-04T15:00:22.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq4390049he6j2cjgmxr3","content":"<h3 id=\"小程序组件、事件与属性\"><a href=\"#小程序组件、事件与属性\" class=\"headerlink\" title=\"小程序组件、事件与属性\"></a>小程序组件、事件与属性</h3><a id=\"more\"></a>\n<h3 id=\"组件引用\"><a href=\"#组件引用\" class=\"headerlink\" title=\"组件引用\"></a>组件引用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Component(&#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">    * 组件的属性列表，外部暴露的属性</span><br><span class=\"line\">    */</span><br><span class=\"line\">    properties: &#123;</span><br><span class=\"line\">        like:&#123;</span><br><span class=\"line\">            type:Number、String、Boolean, //属性的类型，必填</span><br><span class=\"line\">            value:false, //初始值，选填</span><br><span class=\"line\">            observer: function (newVal, oldVal) &#123; </span><br><span class=\"line\">                this.setData(&#123;</span><br><span class=\"line\">                    val:newVal</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            // observer属性被改变时执行的函数（可选)，不要直接去改变properties的值(发生内存泄漏)，通过data定义的数据，通过setData把properties的值赋值data定义的值</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">    * 组件的初始数据</span><br><span class=\"line\">    */</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        isLike:false,</span><br><span class=\"line\">        val:null</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">    * 组件的方法列表</span><br><span class=\"line\">    */</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        this.properties.like//访问properties的属性</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>1.微信开发者工具小程序新建Component,新建组件目录<br>2.properties：对外属性，即如果外部的wxml文件传入数据时，会把数据设置成properties的属性。(类似vue父子组件的传值类型限定)<br>3.data数据的状态绑定<br>4.methods组件的方法和生命周期的使用<br>5.只有setData才可以更新data的数据</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"小程序组件、事件与属性\"><a href=\"#小程序组件、事件与属性\" class=\"headerlink\" title=\"小程序组件、事件与属性\"></a>小程序组件、事件与属性</h3>","more":"<h3 id=\"组件引用\"><a href=\"#组件引用\" class=\"headerlink\" title=\"组件引用\"></a>组件引用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Component(&#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">    * 组件的属性列表，外部暴露的属性</span><br><span class=\"line\">    */</span><br><span class=\"line\">    properties: &#123;</span><br><span class=\"line\">        like:&#123;</span><br><span class=\"line\">            type:Number、String、Boolean, //属性的类型，必填</span><br><span class=\"line\">            value:false, //初始值，选填</span><br><span class=\"line\">            observer: function (newVal, oldVal) &#123; </span><br><span class=\"line\">                this.setData(&#123;</span><br><span class=\"line\">                    val:newVal</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            // observer属性被改变时执行的函数（可选)，不要直接去改变properties的值(发生内存泄漏)，通过data定义的数据，通过setData把properties的值赋值data定义的值</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">    * 组件的初始数据</span><br><span class=\"line\">    */</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        isLike:false,</span><br><span class=\"line\">        val:null</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">    * 组件的方法列表</span><br><span class=\"line\">    */</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        this.properties.like//访问properties的属性</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>1.微信开发者工具小程序新建Component,新建组件目录<br>2.properties：对外属性，即如果外部的wxml文件传入数据时，会把数据设置成properties的属性。(类似vue父子组件的传值类型限定)<br>3.data数据的状态绑定<br>4.methods组件的方法和生命周期的使用<br>5.只有setData才可以更新data的数据</p>"},{"title":"React","date":"2019-02-21T14:06:54.000Z","_content":"### React介绍\n<!-- more -->\n\n### 概述\n1. Fackbook开源的一个JavaScript库\n2. React结合生态库构成一个MVC框架\n3. React特点\n· Declarative(声明式编码)\n· Component-Based(组件化编码)\n    组件化、复用\n· 高效-高效的DOM Diff算法，最小化页面重绘\n    通过创建虚拟DOM的方式，不是直接操作DOM，而是通过构建JavaScript的语法，拼接DOM对象，一次性插入DOM\n· 单向数据流\n    Vue在输入框表单上是双向数据流。而React都是单向数据流，自上而下的数据传递，“从一棵树的根流向它的叶子”\n\n### 生态介绍\n· React + React-Router + Redux + Axios + Babel + Webpack\n\n### 编程式和声明式\n1. 编程式实现\n· 需要以具体代码表达在哪里(where)做什么(what),如何实现(how)\n2. 声明式实现\n· 只需要声明在哪里(where)做什么(what)，而无需关心如何实现(how)\n\n### 生命周期\n![image](/images/react.png)\n1. getDefaultProps\n· 初始化一个props属性，props来自父组件或其它组件传递过来的\n2. getInitalState\n· 组件的初始化状态\n3. componentWillMount()\n· 组件初始化之前调用这个方法，此时可以进行开启定时器、向服务器发送请求等操作\n4. render()\n· 组件渲染\n5. componentDidMount\n· 组件DOM插入完调用的方法，此时页面中有了真正的DOM的元素，可以进行DOM相关的操作\n6. componentWillReceiveProps()\n· 来自父组件传递属性调用的方法。组件接收到属性时触发\n7. shouldComonentUpdate()\n· 组件的更新，调用setState方法就会这个生命周期。组件的状态发生改变时触发\n8. componentWillUpdate()\n· 组件即将被更新时触发\n9. componentDidUpdate()\n· 组件被更新完成后触发。页面中产生了新的DOM的元素，可以进行DOM操作\n10. componentWillUnmount\n· 组件被销毁时触发。这里我们可以进行一些清理操作，例如清理定时器，取消Redux的订阅事件等等。\n\n\n\n\n\n","source":"_posts/react.md","raw":"---\ntitle: React\ndate: 2019-02-21 22:06:54\ntags: [\"React\"]\ncategories: React\n---\n### React介绍\n<!-- more -->\n\n### 概述\n1. Fackbook开源的一个JavaScript库\n2. React结合生态库构成一个MVC框架\n3. React特点\n· Declarative(声明式编码)\n· Component-Based(组件化编码)\n    组件化、复用\n· 高效-高效的DOM Diff算法，最小化页面重绘\n    通过创建虚拟DOM的方式，不是直接操作DOM，而是通过构建JavaScript的语法，拼接DOM对象，一次性插入DOM\n· 单向数据流\n    Vue在输入框表单上是双向数据流。而React都是单向数据流，自上而下的数据传递，“从一棵树的根流向它的叶子”\n\n### 生态介绍\n· React + React-Router + Redux + Axios + Babel + Webpack\n\n### 编程式和声明式\n1. 编程式实现\n· 需要以具体代码表达在哪里(where)做什么(what),如何实现(how)\n2. 声明式实现\n· 只需要声明在哪里(where)做什么(what)，而无需关心如何实现(how)\n\n### 生命周期\n![image](/images/react.png)\n1. getDefaultProps\n· 初始化一个props属性，props来自父组件或其它组件传递过来的\n2. getInitalState\n· 组件的初始化状态\n3. componentWillMount()\n· 组件初始化之前调用这个方法，此时可以进行开启定时器、向服务器发送请求等操作\n4. render()\n· 组件渲染\n5. componentDidMount\n· 组件DOM插入完调用的方法，此时页面中有了真正的DOM的元素，可以进行DOM相关的操作\n6. componentWillReceiveProps()\n· 来自父组件传递属性调用的方法。组件接收到属性时触发\n7. shouldComonentUpdate()\n· 组件的更新，调用setState方法就会这个生命周期。组件的状态发生改变时触发\n8. componentWillUpdate()\n· 组件即将被更新时触发\n9. componentDidUpdate()\n· 组件被更新完成后触发。页面中产生了新的DOM的元素，可以进行DOM操作\n10. componentWillUnmount\n· 组件被销毁时触发。这里我们可以进行一些清理操作，例如清理定时器，取消Redux的订阅事件等等。\n\n\n\n\n\n","slug":"react","published":1,"updated":"2019-03-31T14:27:33.175Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdpqq43a004che6jv1kwgxh2","content":"<h3 id=\"React介绍\"><a href=\"#React介绍\" class=\"headerlink\" title=\"React介绍\"></a>React介绍</h3><a id=\"more\"></a>\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><ol>\n<li>Fackbook开源的一个JavaScript库</li>\n<li>React结合生态库构成一个MVC框架</li>\n<li>React特点<br>· Declarative(声明式编码)<br>· Component-Based(组件化编码)<br> 组件化、复用<br>· 高效-高效的DOM Diff算法，最小化页面重绘<br> 通过创建虚拟DOM的方式，不是直接操作DOM，而是通过构建JavaScript的语法，拼接DOM对象，一次性插入DOM<br>· 单向数据流<br> Vue在输入框表单上是双向数据流。而React都是单向数据流，自上而下的数据传递，“从一棵树的根流向它的叶子”</li>\n</ol>\n<h3 id=\"生态介绍\"><a href=\"#生态介绍\" class=\"headerlink\" title=\"生态介绍\"></a>生态介绍</h3><p>· React + React-Router + Redux + Axios + Babel + Webpack</p>\n<h3 id=\"编程式和声明式\"><a href=\"#编程式和声明式\" class=\"headerlink\" title=\"编程式和声明式\"></a>编程式和声明式</h3><ol>\n<li>编程式实现<br>· 需要以具体代码表达在哪里(where)做什么(what),如何实现(how)</li>\n<li>声明式实现<br>· 只需要声明在哪里(where)做什么(what)，而无需关心如何实现(how)</li>\n</ol>\n<h3 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h3><p><img src=\"/images/react.png\" alt=\"image\"></p>\n<ol>\n<li>getDefaultProps<br>· 初始化一个props属性，props来自父组件或其它组件传递过来的</li>\n<li>getInitalState<br>· 组件的初始化状态</li>\n<li>componentWillMount()<br>· 组件初始化之前调用这个方法，此时可以进行开启定时器、向服务器发送请求等操作</li>\n<li>render()<br>· 组件渲染</li>\n<li>componentDidMount<br>· 组件DOM插入完调用的方法，此时页面中有了真正的DOM的元素，可以进行DOM相关的操作</li>\n<li>componentWillReceiveProps()<br>· 来自父组件传递属性调用的方法。组件接收到属性时触发</li>\n<li>shouldComonentUpdate()<br>· 组件的更新，调用setState方法就会这个生命周期。组件的状态发生改变时触发</li>\n<li>componentWillUpdate()<br>· 组件即将被更新时触发</li>\n<li>componentDidUpdate()<br>· 组件被更新完成后触发。页面中产生了新的DOM的元素，可以进行DOM操作</li>\n<li>componentWillUnmount<br>· 组件被销毁时触发。这里我们可以进行一些清理操作，例如清理定时器，取消Redux的订阅事件等等。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"React介绍\"><a href=\"#React介绍\" class=\"headerlink\" title=\"React介绍\"></a>React介绍</h3>","more":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><ol>\n<li>Fackbook开源的一个JavaScript库</li>\n<li>React结合生态库构成一个MVC框架</li>\n<li>React特点<br>· Declarative(声明式编码)<br>· Component-Based(组件化编码)<br> 组件化、复用<br>· 高效-高效的DOM Diff算法，最小化页面重绘<br> 通过创建虚拟DOM的方式，不是直接操作DOM，而是通过构建JavaScript的语法，拼接DOM对象，一次性插入DOM<br>· 单向数据流<br> Vue在输入框表单上是双向数据流。而React都是单向数据流，自上而下的数据传递，“从一棵树的根流向它的叶子”</li>\n</ol>\n<h3 id=\"生态介绍\"><a href=\"#生态介绍\" class=\"headerlink\" title=\"生态介绍\"></a>生态介绍</h3><p>· React + React-Router + Redux + Axios + Babel + Webpack</p>\n<h3 id=\"编程式和声明式\"><a href=\"#编程式和声明式\" class=\"headerlink\" title=\"编程式和声明式\"></a>编程式和声明式</h3><ol>\n<li>编程式实现<br>· 需要以具体代码表达在哪里(where)做什么(what),如何实现(how)</li>\n<li>声明式实现<br>· 只需要声明在哪里(where)做什么(what)，而无需关心如何实现(how)</li>\n</ol>\n<h3 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h3><p><img src=\"/images/react.png\" alt=\"image\"></p>\n<ol>\n<li>getDefaultProps<br>· 初始化一个props属性，props来自父组件或其它组件传递过来的</li>\n<li>getInitalState<br>· 组件的初始化状态</li>\n<li>componentWillMount()<br>· 组件初始化之前调用这个方法，此时可以进行开启定时器、向服务器发送请求等操作</li>\n<li>render()<br>· 组件渲染</li>\n<li>componentDidMount<br>· 组件DOM插入完调用的方法，此时页面中有了真正的DOM的元素，可以进行DOM相关的操作</li>\n<li>componentWillReceiveProps()<br>· 来自父组件传递属性调用的方法。组件接收到属性时触发</li>\n<li>shouldComonentUpdate()<br>· 组件的更新，调用setState方法就会这个生命周期。组件的状态发生改变时触发</li>\n<li>componentWillUpdate()<br>· 组件即将被更新时触发</li>\n<li>componentDidUpdate()<br>· 组件被更新完成后触发。页面中产生了新的DOM的元素，可以进行DOM操作</li>\n<li>componentWillUnmount<br>· 组件被销毁时触发。这里我们可以进行一些清理操作，例如清理定时器，取消Redux的订阅事件等等。</li>\n</ol>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckdpqq41e0005he6jkdheiqxc","category_id":"ckdpqq41b0002he6j6g6d8sy5","_id":"ckdpqq41k000dhe6j6z0cs53z"},{"post_id":"ckdpqq4160000he6jxn1uftjq","category_id":"ckdpqq41b0002he6j6g6d8sy5","_id":"ckdpqq41m000ihe6j9g5lr4b0"},{"post_id":"ckdpqq41i000ahe6j2sloq7ei","category_id":"ckdpqq41b0002he6j6g6d8sy5","_id":"ckdpqq41o000lhe6j86gjzerz"},{"post_id":"ckdpqq41a0001he6jio7c4hsg","category_id":"ckdpqq41g0007he6jnm5p8f3d","_id":"ckdpqq41r000qhe6j7uwid2lr"},{"post_id":"ckdpqq41l000hhe6j1po2b8ih","category_id":"ckdpqq41l000ehe6juvv8fryg","_id":"ckdpqq41t000the6jx5ggjdq7"},{"post_id":"ckdpqq41d0004he6jsoq84sr7","category_id":"ckdpqq41l000ehe6juvv8fryg","_id":"ckdpqq41w000yhe6jrpa2oqpa"},{"post_id":"ckdpqq41m000khe6jeb0xm7s5","category_id":"ckdpqq41g0007he6jnm5p8f3d","_id":"ckdpqq41w0011he6jbyrsry8a"},{"post_id":"ckdpqq41r000phe6jnlo7ayd6","category_id":"ckdpqq41g0007he6jnm5p8f3d","_id":"ckdpqq41z0016he6jw6ys4z6z"},{"post_id":"ckdpqq41g0006he6jfgzni2e9","category_id":"ckdpqq41l000ehe6juvv8fryg","_id":"ckdpqq4200019he6jtngxoddf"},{"post_id":"ckdpqq41j000che6jqi903pgg","category_id":"ckdpqq41l000ehe6juvv8fryg","_id":"ckdpqq422001ehe6jyiv3sthd"},{"post_id":"ckdpqq41x0015he6jswf4vynl","category_id":"ckdpqq41x0012he6jacd89u9k","_id":"ckdpqq424001hhe6jfgkoip0e"},{"post_id":"ckdpqq41s000she6j0n1f4ly2","category_id":"ckdpqq41x0012he6jacd89u9k","_id":"ckdpqq426001khe6j1vxu4p69"},{"post_id":"ckdpqq421001dhe6jraawb6k1","category_id":"ckdpqq41g0007he6jnm5p8f3d","_id":"ckdpqq428001phe6j66n4f1j5"},{"post_id":"ckdpqq423001ghe6j910lfltr","category_id":"ckdpqq41x0012he6jacd89u9k","_id":"ckdpqq429001she6jejtyhdxz"},{"post_id":"ckdpqq41v000xhe6j38vwo1vz","category_id":"ckdpqq421001bhe6j23yts0w7","_id":"ckdpqq42a001whe6jyelvvh8n"},{"post_id":"ckdpqq41w0010he6jjd9eatqt","category_id":"ckdpqq426001lhe6j6pibmf1u","_id":"ckdpqq42c0020he6j8all08j7"},{"post_id":"ckdpqq41z0018he6jcixjga7m","category_id":"ckdpqq426001lhe6j6pibmf1u","_id":"ckdpqq42f0025he6jq3zq6hsh"},{"post_id":"ckdpqq42d0022he6j0gz1fqib","category_id":"ckdpqq42c001zhe6jdut2960z","_id":"ckdpqq42i002che6jrgwsv8wx"},{"post_id":"ckdpqq425001jhe6ja7mjm4j4","category_id":"ckdpqq42c001zhe6jdut2960z","_id":"ckdpqq42j002hhe6jjlxpy288"},{"post_id":"ckdpqq42e0024he6jvjewuvv8","category_id":"ckdpqq42c001zhe6jdut2960z","_id":"ckdpqq42l002khe6j93zmeeoy"},{"post_id":"ckdpqq427001ohe6jro6eg7ge","category_id":"ckdpqq42c001zhe6jdut2960z","_id":"ckdpqq42o002phe6jmfgy3p1s"},{"post_id":"ckdpqq42h002bhe6jxq6ug25b","category_id":"ckdpqq41x0012he6jacd89u9k","_id":"ckdpqq42p002she6jop3tztn3"},{"post_id":"ckdpqq42j002ghe6jjfionoxq","category_id":"ckdpqq41x0012he6jacd89u9k","_id":"ckdpqq42r002xhe6jr4eqfb56"},{"post_id":"ckdpqq428001rhe6j0c9rt6yr","category_id":"ckdpqq42c001zhe6jdut2960z","_id":"ckdpqq42s0030he6jtki2vi2e"},{"post_id":"ckdpqq42k002jhe6jqdtbtwkn","category_id":"ckdpqq421001bhe6j23yts0w7","_id":"ckdpqq42t0035he6j4no108um"},{"post_id":"ckdpqq42m002ohe6jhncidsgm","category_id":"ckdpqq41g0007he6jnm5p8f3d","_id":"ckdpqq42v0038he6j0whvq0g5"},{"post_id":"ckdpqq42a001vhe6j1wdl3af1","category_id":"ckdpqq42c001zhe6jdut2960z","_id":"ckdpqq42w003che6jbd8s6wnt"},{"post_id":"ckdpqq42o002rhe6jeod8ij7s","category_id":"ckdpqq41g0007he6jnm5p8f3d","_id":"ckdpqq42x003ghe6j2jhff72m"},{"post_id":"ckdpqq42q002whe6jpjbj2tjd","category_id":"ckdpqq41g0007he6jnm5p8f3d","_id":"ckdpqq42y003jhe6jutx7w4do"},{"post_id":"ckdpqq42b001yhe6jr8b8wm8k","category_id":"ckdpqq42c001zhe6jdut2960z","_id":"ckdpqq431003nhe6jrwv3u6sb"},{"post_id":"ckdpqq42g0029he6ja3ow5ox4","category_id":"ckdpqq42s0031he6jfipcvv8u","_id":"ckdpqq432003qhe6j1zm35e93"},{"post_id":"ckdpqq42x003fhe6j73679zgn","category_id":"ckdpqq42v003ahe6jalex3gbz","_id":"ckdpqq434003vhe6jv27epj2v"},{"post_id":"ckdpqq42r002zhe6jqgtnbjpm","category_id":"ckdpqq42v003ahe6jalex3gbz","_id":"ckdpqq435003yhe6j39spr6b9"},{"post_id":"ckdpqq430003mhe6jjdgxyg10","category_id":"ckdpqq42v003ahe6jalex3gbz","_id":"ckdpqq4370043he6jmyv8ru8e"},{"post_id":"ckdpqq42t0034he6jxlkk2agm","category_id":"ckdpqq42v003ahe6jalex3gbz","_id":"ckdpqq4380046he6j1rakehl5"},{"post_id":"ckdpqq433003uhe6j5du3dnr0","category_id":"ckdpqq421001bhe6j23yts0w7","_id":"ckdpqq43a004ahe6j5xrtj8fv"},{"post_id":"ckdpqq42u0037he6jpm7u5bec","category_id":"ckdpqq42v003ahe6jalex3gbz","_id":"ckdpqq43b004dhe6jfnjjzw3g"},{"post_id":"ckdpqq4360042he6j0pgaj1xh","category_id":"ckdpqq421001bhe6j23yts0w7","_id":"ckdpqq43c004ghe6jggh3amq4"},{"post_id":"ckdpqq42v003bhe6jh0hg2iz5","category_id":"ckdpqq42v003ahe6jalex3gbz","_id":"ckdpqq43d004ihe6jcvndm2iv"},{"post_id":"ckdpqq42y003ihe6jyo9cl1hl","category_id":"ckdpqq4380047he6jxiiqh4wr","_id":"ckdpqq43e004lhe6jz46mf55f"},{"post_id":"ckdpqq43a004che6jv1kwgxh2","category_id":"ckdpqq4380047he6jxiiqh4wr","_id":"ckdpqq43e004nhe6jti7lkr1y"},{"post_id":"ckdpqq431003phe6ja3275cvc","category_id":"ckdpqq43b004ehe6jwbyeje3u","_id":"ckdpqq43f004qhe6j9os4js02"},{"post_id":"ckdpqq434003xhe6jie40s618","category_id":"ckdpqq43b004ehe6jwbyeje3u","_id":"ckdpqq43f004she6jp62uannk"},{"post_id":"ckdpqq4370045he6jnbj4e33f","category_id":"ckdpqq43e004ohe6jgejkgtfs","_id":"ckdpqq43g004whe6juvm811og"},{"post_id":"ckdpqq4390049he6j2cjgmxr3","category_id":"ckdpqq43e004ohe6jgejkgtfs","_id":"ckdpqq43h004zhe6jcya3jj3i"}],"PostTag":[{"post_id":"ckdpqq41e0005he6jkdheiqxc","tag_id":"ckdpqq41d0003he6jl9qtiy7l","_id":"ckdpqq41h0009he6j69etihst"},{"post_id":"ckdpqq4160000he6jxn1uftjq","tag_id":"ckdpqq41d0003he6jl9qtiy7l","_id":"ckdpqq41j000bhe6jnni8ch6b"},{"post_id":"ckdpqq41i000ahe6j2sloq7ei","tag_id":"ckdpqq41d0003he6jl9qtiy7l","_id":"ckdpqq41l000ghe6jou4boo3f"},{"post_id":"ckdpqq41a0001he6jio7c4hsg","tag_id":"ckdpqq41h0008he6j7i3dhuom","_id":"ckdpqq41m000jhe6jnj52e773"},{"post_id":"ckdpqq41l000hhe6j1po2b8ih","tag_id":"ckdpqq41l000fhe6joziyqq01","_id":"ckdpqq41o000ohe6jihiwx9ab"},{"post_id":"ckdpqq41d0004he6jsoq84sr7","tag_id":"ckdpqq41l000fhe6joziyqq01","_id":"ckdpqq41s000rhe6jbcwet36l"},{"post_id":"ckdpqq41m000khe6jeb0xm7s5","tag_id":"ckdpqq41h0008he6j7i3dhuom","_id":"ckdpqq41v000whe6jo5hr49sh"},{"post_id":"ckdpqq41r000phe6jnlo7ayd6","tag_id":"ckdpqq41h0008he6j7i3dhuom","_id":"ckdpqq41w000zhe6j5mg2wxvh"},{"post_id":"ckdpqq41g0006he6jfgzni2e9","tag_id":"ckdpqq41l000fhe6joziyqq01","_id":"ckdpqq41x0014he6jsmvby9jx"},{"post_id":"ckdpqq41j000che6jqi903pgg","tag_id":"ckdpqq41l000fhe6joziyqq01","_id":"ckdpqq41z0017he6jyi1vf68a"},{"post_id":"ckdpqq41x0015he6jswf4vynl","tag_id":"ckdpqq41x0013he6jks9bdvfk","_id":"ckdpqq421001ahe6jqg20w8sq"},{"post_id":"ckdpqq41s000she6j0n1f4ly2","tag_id":"ckdpqq41x0013he6jks9bdvfk","_id":"ckdpqq423001fhe6jdme0lxu3"},{"post_id":"ckdpqq421001dhe6jraawb6k1","tag_id":"ckdpqq41h0008he6j7i3dhuom","_id":"ckdpqq425001ihe6j08pjoc3t"},{"post_id":"ckdpqq423001ghe6j910lfltr","tag_id":"ckdpqq41x0013he6jks9bdvfk","_id":"ckdpqq427001nhe6jtp3x41se"},{"post_id":"ckdpqq41v000xhe6j38vwo1vz","tag_id":"ckdpqq421001che6jmw6giev1","_id":"ckdpqq428001qhe6js9vhjc23"},{"post_id":"ckdpqq41w0010he6jjd9eatqt","tag_id":"ckdpqq426001mhe6j749p9ed6","_id":"ckdpqq42a001xhe6jutrgq3r3"},{"post_id":"ckdpqq41z0018he6jcixjga7m","tag_id":"ckdpqq429001uhe6jbuv5m3sb","_id":"ckdpqq42e0023he6j692dnj3h"},{"post_id":"ckdpqq42d0022he6j0gz1fqib","tag_id":"ckdpqq42d0021he6jf3o7g43d","_id":"ckdpqq42f0027he6j6s7hp5pe"},{"post_id":"ckdpqq425001jhe6ja7mjm4j4","tag_id":"ckdpqq42d0021he6jf3o7g43d","_id":"ckdpqq42h002ahe6jxach4ij7"},{"post_id":"ckdpqq42e0024he6jvjewuvv8","tag_id":"ckdpqq42d0021he6jf3o7g43d","_id":"ckdpqq42i002ehe6jde2qvbr4"},{"post_id":"ckdpqq427001ohe6jro6eg7ge","tag_id":"ckdpqq42d0021he6jf3o7g43d","_id":"ckdpqq42k002ihe6jbf7xsdcy"},{"post_id":"ckdpqq42h002bhe6jxq6ug25b","tag_id":"ckdpqq41x0013he6jks9bdvfk","_id":"ckdpqq42l002mhe6jw3bgc7cz"},{"post_id":"ckdpqq42j002ghe6jjfionoxq","tag_id":"ckdpqq41x0013he6jks9bdvfk","_id":"ckdpqq42o002qhe6jj2ycaytk"},{"post_id":"ckdpqq428001rhe6j0c9rt6yr","tag_id":"ckdpqq42d0021he6jf3o7g43d","_id":"ckdpqq42p002uhe6j5kb2y7zz"},{"post_id":"ckdpqq42k002jhe6jqdtbtwkn","tag_id":"ckdpqq421001che6jmw6giev1","_id":"ckdpqq42r002yhe6j7tb9rtip"},{"post_id":"ckdpqq42m002ohe6jhncidsgm","tag_id":"ckdpqq41h0008he6j7i3dhuom","_id":"ckdpqq42s0032he6ja08ycknj"},{"post_id":"ckdpqq42a001vhe6j1wdl3af1","tag_id":"ckdpqq42d0021he6jf3o7g43d","_id":"ckdpqq42u0036he6jwevrsg06"},{"post_id":"ckdpqq42o002rhe6jeod8ij7s","tag_id":"ckdpqq41h0008he6j7i3dhuom","_id":"ckdpqq42v0039he6je0xtzld6"},{"post_id":"ckdpqq42q002whe6jpjbj2tjd","tag_id":"ckdpqq41h0008he6j7i3dhuom","_id":"ckdpqq42w003ehe6jii474e8i"},{"post_id":"ckdpqq42b001yhe6jr8b8wm8k","tag_id":"ckdpqq42d0021he6jf3o7g43d","_id":"ckdpqq42x003hhe6jtokxjhx8"},{"post_id":"ckdpqq42g0029he6ja3ow5ox4","tag_id":"ckdpqq42t0033he6jjb0fiidf","_id":"ckdpqq431003ohe6jswuxoi02"},{"post_id":"ckdpqq42g0029he6ja3ow5ox4","tag_id":"ckdpqq42w003dhe6jpm5tx1r5","_id":"ckdpqq433003she6jwtmrfy2p"},{"post_id":"ckdpqq430003mhe6jjdgxyg10","tag_id":"ckdpqq42z003lhe6j5khzwo73","_id":"ckdpqq434003whe6ja9ev7ptx"},{"post_id":"ckdpqq42r002zhe6jqgtnbjpm","tag_id":"ckdpqq42z003lhe6j5khzwo73","_id":"ckdpqq4350040he6jlo8zv749"},{"post_id":"ckdpqq42t0034he6jxlkk2agm","tag_id":"ckdpqq42z003lhe6j5khzwo73","_id":"ckdpqq4370044he6jal26e40i"},{"post_id":"ckdpqq42u0037he6jpm7u5bec","tag_id":"ckdpqq42z003lhe6j5khzwo73","_id":"ckdpqq43a004bhe6j2j2ugkco"},{"post_id":"ckdpqq42v003bhe6jh0hg2iz5","tag_id":"ckdpqq42z003lhe6j5khzwo73","_id":"ckdpqq43d004hhe6j2xdtenv5"},{"post_id":"ckdpqq42x003fhe6j73679zgn","tag_id":"ckdpqq42z003lhe6j5khzwo73","_id":"ckdpqq43e004mhe6jziyxlihl"},{"post_id":"ckdpqq42y003ihe6jyo9cl1hl","tag_id":"ckdpqq43e004khe6jd1757a9t","_id":"ckdpqq43f004rhe6j1045dsio"},{"post_id":"ckdpqq431003phe6ja3275cvc","tag_id":"ckdpqq43f004phe6j5omeqn7n","_id":"ckdpqq43g004vhe6jcv59mfz1"},{"post_id":"ckdpqq433003uhe6j5du3dnr0","tag_id":"ckdpqq43f004uhe6jak3lkn34","_id":"ckdpqq43g004yhe6j34vggg45"},{"post_id":"ckdpqq434003xhe6jie40s618","tag_id":"ckdpqq43f004phe6j5omeqn7n","_id":"ckdpqq43h0051he6j5pf93ukv"},{"post_id":"ckdpqq4360042he6j0pgaj1xh","tag_id":"ckdpqq43h0050he6jni6tqbzt","_id":"ckdpqq43h0053he6jqk15dplc"},{"post_id":"ckdpqq4370045he6jnbj4e33f","tag_id":"ckdpqq43h0052he6jui4t3sxy","_id":"ckdpqq43i0055he6ji4duve01"},{"post_id":"ckdpqq4390049he6j2cjgmxr3","tag_id":"ckdpqq43h0052he6jui4t3sxy","_id":"ckdpqq43j0057he6j9nxx1mdf"},{"post_id":"ckdpqq43a004che6jv1kwgxh2","tag_id":"ckdpqq43e004khe6jd1757a9t","_id":"ckdpqq43j0058he6jhtbmkh2i"}],"Tag":[{"name":"你不知道的JavaScript","_id":"ckdpqq41d0003he6jl9qtiy7l"},{"name":"Node.js","_id":"ckdpqq41h0008he6j7i3dhuom"},{"name":"TypeScript","_id":"ckdpqq41l000fhe6joziyqq01"},{"name":"JavaScript","_id":"ckdpqq41x0013he6jks9bdvfk"},{"name":"vue","_id":"ckdpqq421001che6jmw6giev1"},{"name":"随笔","_id":"ckdpqq426001mhe6j749p9ed6"},{"name":"github","_id":"ckdpqq429001uhe6jbuv5m3sb"},{"name":"Flutter","_id":"ckdpqq42d0021he6jf3o7g43d"},{"name":"wx.chooseWXPay","_id":"ckdpqq42t0033he6jjb0fiidf"},{"name":"Alipay","_id":"ckdpqq42w003dhe6jpm5tx1r5"},{"name":"React Native","_id":"ckdpqq42z003lhe6j5khzwo73"},{"name":"React","_id":"ckdpqq43e004khe6jd1757a9t"},{"name":"js数据结构与算法","_id":"ckdpqq43f004phe6j5omeqn7n"},{"name":"vue-router","_id":"ckdpqq43f004uhe6jak3lkn34"},{"name":"vuex","_id":"ckdpqq43h0050he6jni6tqbzt"},{"name":"小程序","_id":"ckdpqq43h0052he6jui4t3sxy"}]}}